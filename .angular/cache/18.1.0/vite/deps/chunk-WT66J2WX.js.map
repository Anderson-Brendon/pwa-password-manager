{
  "version": 3,
  "sources": ["../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-array.js", "../../../../../node_modules/js-base64/base64.mjs", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-base64.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-blob.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-revision.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-object.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-document.js", "../../../../../node_modules/ohash/dist/index.mjs", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-hash.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-promise.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-regex.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-string.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-object-deep-equal.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-object-dot-prop.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-map.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-error.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-time.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-other.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-rxdb-version.js", "../../../../../node_modules/rxdb/dist/esm/plugins/utils/utils-global.js", "../../../../../node_modules/rxdb/dist/esm/overwritable.js", "../../../../../node_modules/@babel/runtime/helpers/esm/typeof.js", "../../../../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js", "../../../../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js", "../../../../../node_modules/@babel/runtime/helpers/esm/createClass.js", "../../../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js", "../../../../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js", "../../../../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js", "../../../../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js", "../../../../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js", "../../../../../node_modules/@babel/runtime/helpers/esm/construct.js", "../../../../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js", "../../../../../node_modules/rxdb/dist/esm/rx-error.js", "../../../../../node_modules/rxdb/dist/esm/hooks.js", "../../../../../node_modules/rxdb/dist/esm/rx-schema-helper.js", "../../../../../node_modules/rxdb/dist/esm/rx-change-event.js", "../../../../../node_modules/rxdb/dist/esm/query-planner.js", "../../../../../node_modules/mingo/dist/esm/types.js", "../../../../../node_modules/mingo/dist/esm/util.js", "../../../../../node_modules/mingo/dist/esm/core.js", "../../../../../node_modules/mingo/dist/esm/lazy.js", "../../../../../node_modules/mingo/dist/esm/aggregator.js", "../../../../../node_modules/mingo/dist/esm/cursor.js", "../../../../../node_modules/mingo/dist/esm/query.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/date/_internal.js", "../../../../../node_modules/mingo/dist/esm/operators/window/_internal.js", "../../../../../node_modules/mingo/dist/esm/operators/pipeline/sort.js", "../../../../../node_modules/mingo/dist/esm/operators/_predicates.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/array/nin.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/bitwise/_internal.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/bitwise/bitAnd.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/bitwise/bitOr.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/bitwise/bitXor.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/eq.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/gt.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/gte.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/lt.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/lte.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/comparison/ne.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/date/dateFromString.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/_internal.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/acos.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/acosh.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/asin.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/asinh.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/atan.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/atanh.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/cos.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/cosh.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/degreesToRadians.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/radiansToDegrees.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/sin.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/sinh.js", "../../../../../node_modules/mingo/dist/esm/operators/expression/trignometry/tan.js", "../../../../../node_modules/mingo/dist/esm/operators/pipeline/project.js", "../../../../../node_modules/mingo/dist/esm/operators/query/logical/and.js", "../../../../../node_modules/mingo/dist/esm/operators/query/logical/or.js", "../../../../../node_modules/mingo/dist/esm/operators/query/logical/nor.js", "../../../../../node_modules/mingo/dist/esm/operators/query/logical/not.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/eq.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/gt.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/gte.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/in.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/lt.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/lte.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/ne.js", "../../../../../node_modules/mingo/dist/esm/operators/query/comparison/nin.js", "../../../../../node_modules/mingo/dist/esm/operators/query/evaluation/mod.js", "../../../../../node_modules/mingo/dist/esm/operators/query/evaluation/regex.js", "../../../../../node_modules/mingo/dist/esm/operators/query/array/all.js", "../../../../../node_modules/mingo/dist/esm/operators/query/array/elemMatch.js", "../../../../../node_modules/mingo/dist/esm/operators/query/array/size.js", "../../../../../node_modules/mingo/dist/esm/operators/query/element/exists.js", "../../../../../node_modules/mingo/dist/esm/operators/query/element/type.js", "../../../../../node_modules/rxdb/dist/esm/rx-query-mingo.js", "../../../../../node_modules/rxdb/dist/esm/rx-query-helper.js", "../../../../../node_modules/rxdb/dist/esm/query-cache.js", "../../../../../node_modules/rxdb/dist/esm/doc-cache.js", "../../../../../node_modules/rxdb/dist/esm/rx-query-single-result.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/util.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/states/state-resolver.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/states/index.js", "../../../../../node_modules/array-push-at-sort-position/dist/esm/index.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/actions/action-functions.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/actions/index.js", "../../../../../node_modules/binary-decision-diagram/dist/esm/src/minimal-string/string-format.js", "../../../../../node_modules/binary-decision-diagram/dist/esm/src/util.js", "../../../../../node_modules/binary-decision-diagram/dist/esm/src/minimal-string/minimal-string-to-simple-bdd.js", "../../../../../node_modules/binary-decision-diagram/dist/esm/src/minimal-string/resolve-with-simple-bdd.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/bdd/bdd.generated.js", "../../../../../node_modules/event-reduce-js/dist/esm/src/index.js", "../../../../../node_modules/rxdb/dist/esm/event-reduce.js", "../../../../../node_modules/rxdb/dist/esm/rx-query.js"],
  "sourcesContent": ["export function lastOfArray(ar) {\n  return ar[ar.length - 1];\n}\n\n/**\n * shuffle the given array\n */\nexport function shuffleArray(arr) {\n  return arr.slice(0).sort(() => Math.random() - 0.5);\n}\nexport function randomOfArray(arr) {\n  var randomElement = arr[Math.floor(Math.random() * arr.length)];\n  return randomElement;\n}\nexport function toArray(input) {\n  return Array.isArray(input) ? input.slice(0) : [input];\n}\n\n/**\n * Split array with items into smaller arrays with items\n * @link https://stackoverflow.com/a/7273794/3443137\n */\nexport function batchArray(array, batchSize) {\n  array = array.slice(0);\n  var ret = [];\n  while (array.length) {\n    var batch = array.splice(0, batchSize);\n    ret.push(batch);\n  }\n  return ret;\n}\n\n/**\n * @link https://stackoverflow.com/a/15996017\n */\nexport function removeOneFromArrayIfMatches(ar, condition) {\n  ar = ar.slice();\n  var i = ar.length;\n  var done = false;\n  while (i-- && !done) {\n    if (condition(ar[i])) {\n      done = true;\n      ar.splice(i, 1);\n    }\n  }\n  return ar;\n}\n\n/**\n * returns true if the supplied argument is either an Array<T> or a Readonly<Array<T>>\n */\nexport function isMaybeReadonlyArray(x) {\n  // While this looks strange, it's a workaround for an issue in TypeScript:\n  // https://github.com/microsoft/TypeScript/issues/17002\n  //\n  // The problem is that `Array.isArray` as a type guard returns `false` for a readonly array,\n  // but at runtime the object is an array and the runtime call to `Array.isArray` would return `true`.\n  // The type predicate here allows for both `Array<T>` and `Readonly<Array<T>>` to pass a type check while\n  // still performing runtime type inspection.\n  return Array.isArray(x);\n}\nexport function isOneItemOfArrayInOtherArray(ar1, ar2) {\n  for (var i = 0; i < ar1.length; i++) {\n    var el = ar1[i];\n    var has = ar2.includes(el);\n    if (has) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Use this in array.filter() to remove all empty slots\n * and have the correct typings afterwards.\n * @link https://stackoverflow.com/a/46700791/3443137\n */\nexport function arrayFilterNotEmpty(value) {\n  if (value === null || value === undefined) {\n    return false;\n  }\n  return true;\n}\nexport function countUntilNotMatching(ar, matchingFn) {\n  var count = 0;\n  var idx = -1;\n  for (var item of ar) {\n    idx = idx + 1;\n    var matching = matchingFn(item, idx);\n    if (matching) {\n      count = count + 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\nexport async function asyncFilter(array, predicate) {\n  var filters = await Promise.all(array.map(predicate));\n  return array.filter((...[, index]) => filters[index]);\n}\n\n/**\n * @link https://stackoverflow.com/a/3762735\n */\nexport function sumNumberArray(array) {\n  var count = 0;\n  for (var i = array.length; i--;) {\n    count += array[i];\n  }\n  return count;\n}\nexport function maxOfNumbers(arr) {\n  return Math.max(...arr);\n}\n\n/**\n * Appends the given documents to the given array.\n * This will mutate the first given array.\n * Mostly used as faster alternative to Array.concat()\n * because .concat() is so slow.\n * @link https://www.measurethat.net/Benchmarks/Show/4223/0/array-concat-vs-spread-operator-vs-push#latest_results_block\n */\nexport function appendToArray(ar, add) {\n  var amount = add.length;\n  for (var i = 0; i < amount; ++i) {\n    var element = add[i];\n    ar.push(element);\n  }\n}\n\n/**\n * @link https://gist.github.com/telekosmos/3b62a31a5c43f40849bb\n */\nexport function uniqueArray(arrArg) {\n  return arrArg.filter(function (elem, pos, arr) {\n    return arr.indexOf(elem) === pos;\n  });\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : it => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = src => src.replace(/=/g, '').replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_');\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n    c0,\n    c1,\n    c2,\n    asc = '';\n  const pad = bin.length % 3;\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = u => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = src => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n        offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n    bin = '',\n    r1,\n    r2;\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = a => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = src => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = src => {\n  if (typeof src !== 'string') return false;\n  const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n  return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  isValid: isValid,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };", "/**\n * NO! We cannot just use btoa() and atob()\n * because they do not work correctly with binary data.\n * @link https://stackoverflow.com/q/30106476/3443137\n */\nimport { encode, decode } from 'js-base64';\n\n/**\n * atob() and btoa() do not work well with non ascii chars,\n * so we have to use these helper methods instead.\n * @link https://stackoverflow.com/a/30106551/3443137\n */\n// Encoding UTF8 -> base64\nexport function b64EncodeUnicode(str) {\n  return encode(str);\n}\n\n// Decoding base64 -> UTF8\nexport function b64DecodeUnicode(str) {\n  return decode(str);\n}\n\n/**\n * @link https://stackoverflow.com/a/9458996/3443137\n */\nexport function arrayBufferToBase64(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var len = bytes.byteLength;\n  for (var i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\n/**\n * @link https://stackoverflow.com/a/21797381\n */\nexport function base64ToArrayBuffer(base64) {\n  var binary_string = atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n", "import { arrayBufferToBase64 } from \"./utils-base64.js\";\n\n/**\n * Since RxDB 13.0.0 we only use Blob instead of falling back to Buffer,\n * because Node.js >18 supports Blobs anyway.\n */\n/**\n * depending if we are on node or browser,\n * we have to use Buffer(node) or Blob(browser)\n */\nexport function createBlob(data, type) {\n  var blob = new Blob([data], {\n    type\n  });\n  return blob;\n}\nexport async function createBlobFromBase64(base64String, type) {\n  var base64Response = await fetch(\"data:\" + type + \";base64,\" + base64String);\n  var blob = await base64Response.blob();\n  return blob;\n}\nexport function blobToString(blob) {\n  /**\n   * in the electron-renderer we have a typed array instead of a blob\n   * so we have to transform it.\n   * @link https://github.com/pubkey/rxdb/issues/1371\n   */\n  var blobType = Object.prototype.toString.call(blob);\n  if (blobType === '[object Uint8Array]') {\n    blob = new Blob([blob]);\n  }\n  if (typeof blob === 'string') {\n    return Promise.resolve(blob);\n  }\n  return blob.text();\n}\nexport async function blobToBase64String(blob) {\n  if (typeof blob === 'string') {\n    return blob;\n  }\n\n  /**\n   * in the electron-renderer we have a typed array instead of a blob\n   * so we have to transform it.\n   * @link https://github.com/pubkey/rxdb/issues/1371\n   */\n  var blobType = Object.prototype.toString.call(blob);\n  if (blobType === '[object Uint8Array]') {\n    blob = new Blob([blob]);\n  }\n  var arrayBuffer = await blob.arrayBuffer();\n  return arrayBufferToBase64(arrayBuffer);\n}\nexport function getBlobSize(blob) {\n  return blob.size;\n}\n", "/**\n * Parses the full revision.\n * Do NOT use this if you only need the revision height,\n * then use getHeightOfRevision() instead which is faster.\n */\nexport function parseRevision(revision) {\n  var split = revision.split('-');\n  if (split.length !== 2) {\n    throw new Error('malformatted revision: ' + revision);\n  }\n  return {\n    height: parseInt(split[0], 10),\n    hash: split[1]\n  };\n}\n\n/**\n * @hotPath Performance is very important here\n * because we need to parse the revision height very often.\n * Do not use `parseInt(revision.split('-')[0], 10)` because\n * only fetching the start-number chars is faster.\n */\nexport function getHeightOfRevision(revision) {\n  var useChars = '';\n  for (var index = 0; index < revision.length; index++) {\n    var char = revision[index];\n    if (char === '-') {\n      return parseInt(useChars, 10);\n    }\n    useChars += char;\n  }\n  throw new Error('malformatted revision: ' + revision);\n}\n\n/**\n * Creates the next write revision for a given document.\n */\nexport function createRevision(databaseInstanceToken, previousDocData) {\n  var newRevisionHeight = !previousDocData ? 1 : getHeightOfRevision(previousDocData._rev) + 1;\n  return newRevisionHeight + '-' + databaseInstanceToken;\n}\n", "export function deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (Object.prototype.hasOwnProperty.call(o, prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n\n/**\n * To get specific nested path values from objects,\n * RxDB normally uses the 'dot-prop' npm module.\n * But when performance is really relevant, this is not fast enough.\n * Instead we use a monad that can prepare some stuff up front\n * and we can reuse the generated function.\n */\n\nexport function objectPathMonad(objectPath) {\n  var split = objectPath.split('.');\n\n  // reuse this variable for better performance.\n  var splitLength = split.length;\n\n  /**\n   * Performance shortcut,\n   * if no nested path is used,\n   * directly return the field of the object.\n   */\n  if (splitLength === 1) {\n    return obj => obj[objectPath];\n  }\n  return obj => {\n    var currentVal = obj;\n    for (var i = 0; i < splitLength; ++i) {\n      var subPath = split[i];\n      currentVal = currentVal[subPath];\n      if (typeof currentVal === 'undefined') {\n        return currentVal;\n      }\n    }\n    return currentVal;\n  };\n}\nexport function getFromObjectOrThrow(obj, key) {\n  var val = obj[key];\n  if (!val) {\n    throw new Error('missing value from object ' + key);\n  }\n  return val;\n}\n\n/**\n * returns a flattened object\n * @link https://gist.github.com/penguinboy/762197\n */\nexport function flattenObject(ob) {\n  var toReturn = {};\n  for (var i in ob) {\n    if (!Object.prototype.hasOwnProperty.call(ob, i)) continue;\n    if (typeof ob[i] === 'object') {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!Object.prototype.hasOwnProperty.call(flatObject, x)) continue;\n        toReturn[i + '.' + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n}\n\n/**\n * does a flat copy on the objects,\n * is about 3 times faster then using deepClone\n * @link https://jsperf.com/object-rest-spread-vs-clone/2\n */\nexport function flatClone(obj) {\n  return Object.assign({}, obj);\n}\n\n/**\n * @link https://stackoverflow.com/a/11509718/3443137\n */\nexport function firstPropertyNameOfObject(obj) {\n  return Object.keys(obj)[0];\n}\nexport function firstPropertyValueOfObject(obj) {\n  var key = Object.keys(obj)[0];\n  return obj[key];\n}\n\n/**\n * deep-sort an object so its attributes are in lexical order.\n * Also sorts the arrays inside of the object if no-array-sort not set\n */\nexport function sortObject(obj, noArraySort = false) {\n  if (!obj) return obj; // do not sort null, false or undefined\n\n  // array\n  if (!noArraySort && Array.isArray(obj)) {\n    return obj.sort((a, b) => {\n      if (typeof a === 'string' && typeof b === 'string') return a.localeCompare(b);\n      if (typeof a === 'object') return 1;else return -1;\n    }).map(i => sortObject(i, noArraySort));\n  }\n\n  // object\n  // array is also of type object\n  if (typeof obj === 'object' && !Array.isArray(obj)) {\n    var out = {};\n    Object.keys(obj).sort((a, b) => a.localeCompare(b)).forEach(key => {\n      out[key] = sortObject(obj[key], noArraySort);\n    });\n    return out;\n  }\n\n  // everything else\n  return obj;\n}\n\n/**\n * Deep clone a plain json object.\n * Does not work with recursive stuff\n * or non-plain-json.\n * IMPORTANT: Performance of this is very important,\n * do not change it without running performance tests!\n *\n * @link https://github.com/zxdong262/deep-copy/blob/master/src/index.ts\n */\nfunction deepClone(src) {\n  if (!src) {\n    return src;\n  }\n  if (src === null || typeof src !== 'object') {\n    return src;\n  }\n  if (Array.isArray(src)) {\n    var ret = new Array(src.length);\n    var i = ret.length;\n    while (i--) {\n      ret[i] = deepClone(src[i]);\n    }\n    return ret;\n  }\n  var dest = {};\n  // eslint-disable-next-line guard-for-in\n  for (var key in src) {\n    dest[key] = deepClone(src[key]);\n  }\n  return dest;\n}\nexport var clone = deepClone;\n\n/**\n * overwrites the getter with the actual value\n * Mostly used for caching stuff on the first run\n */\nexport function overwriteGetterForCaching(obj, getterName, value) {\n  Object.defineProperty(obj, getterName, {\n    get: function () {\n      return value;\n    }\n  });\n  return value;\n}\nexport function hasDeepProperty(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return true;\n  }\n  if (Array.isArray(obj)) {\n    var has = !!obj.find(item => hasDeepProperty(item, property));\n    return has;\n  }\n\n  // Recursively check for property in nested objects\n  for (var key in obj) {\n    if (typeof obj[key] === 'object' && obj[key] !== null) {\n      if (hasDeepProperty(obj[key], property)) {\n        return true;\n      }\n    }\n  }\n\n  // Return false if 'foobar' is not found at any level\n  return false;\n}\n", "import { flatClone } from \"./utils-object.js\";\n/**\n * We use 1 as minimum so that the value is never falsy.\n * This const is used in several places because querying\n * with a value lower then the minimum could give false results.\n */\nexport var RX_META_LWT_MINIMUM = 1;\nexport function getDefaultRxDocumentMeta() {\n  return {\n    /**\n     * Set this to 1 to not waste performance\n     * while calling new Date()..\n     * The storage wrappers will anyway update\n     * the lastWrite time while calling transformDocumentDataFromRxDBToRxStorage()\n     */\n    lwt: RX_META_LWT_MINIMUM\n  };\n}\n\n/**\n * Returns a revision that is not valid.\n * Use this to have correct typings\n * while the storage wrapper anyway will overwrite the revision.\n */\nexport function getDefaultRevision() {\n  /**\n   * Use a non-valid revision format,\n   * to ensure that the RxStorage will throw\n   * when the revision is not replaced downstream.\n   */\n  return '';\n}\nexport function stripMetaDataFromDocument(docData) {\n  return Object.assign({}, docData, {\n    _meta: undefined,\n    _deleted: undefined,\n    _rev: undefined\n  });\n}\n\n/**\n * Faster way to check the equality of document lists\n * compared to doing a deep-equal.\n * Here we only check the ids and revisions.\n */\nexport function areRxDocumentArraysEqual(primaryPath, ar1, ar2) {\n  if (ar1.length !== ar2.length) {\n    return false;\n  }\n  var i = 0;\n  var len = ar1.length;\n  while (i < len) {\n    var row1 = ar1[i];\n    var row2 = ar2[i];\n    i++;\n    if (row1._rev !== row2._rev || row1[primaryPath] !== row2[primaryPath]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function getSortDocumentsByLastWriteTimeComparator(primaryPath) {\n  return (a, b) => {\n    if (a._meta.lwt === b._meta.lwt) {\n      if (b[primaryPath] < a[primaryPath]) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else {\n      return a._meta.lwt - b._meta.lwt;\n    }\n  };\n}\nexport function sortDocumentsByLastWriteTime(primaryPath, docs) {\n  return docs.sort(getSortDocumentsByLastWriteTimeComparator(primaryPath));\n}\nexport function toWithDeleted(docData) {\n  docData = flatClone(docData);\n  docData._deleted = !!docData._deleted;\n  return Object.assign(docData, {\n    _attachments: undefined,\n    _meta: undefined,\n    _rev: undefined\n  });\n}\n", "const defaults = Object.freeze({\n  ignoreUnknown: false,\n  respectType: false,\n  respectFunctionNames: false,\n  respectFunctionProperties: false,\n  unorderedObjects: true,\n  unorderedArrays: false,\n  unorderedSets: false,\n  excludeKeys: void 0,\n  excludeValues: void 0,\n  replacer: void 0\n});\nfunction objectHash(object, options) {\n  if (options) {\n    options = {\n      ...defaults,\n      ...options\n    };\n  } else {\n    options = defaults;\n  }\n  const hasher = createHasher(options);\n  hasher.dispatch(object);\n  return hasher.toString();\n}\nconst defaultPrototypesKeys = Object.freeze([\"prototype\", \"__proto__\", \"constructor\"]);\nfunction createHasher(options) {\n  let buff = \"\";\n  let context = /* @__PURE__ */new Map();\n  const write = str => {\n    buff += str;\n  };\n  return {\n    toString() {\n      return buff;\n    },\n    getContext() {\n      return context;\n    },\n    dispatch(value) {\n      if (options.replacer) {\n        value = options.replacer(value);\n      }\n      const type = value === null ? \"null\" : typeof value;\n      return this[type](value);\n    },\n    object(object) {\n      if (object && typeof object.toJSON === \"function\") {\n        return this.object(object.toJSON());\n      }\n      const objString = Object.prototype.toString.call(object);\n      let objType = \"\";\n      const objectLength = objString.length;\n      if (objectLength < 10) {\n        objType = \"unknown:[\" + objString + \"]\";\n      } else {\n        objType = objString.slice(8, objectLength - 1);\n      }\n      objType = objType.toLowerCase();\n      let objectNumber = null;\n      if ((objectNumber = context.get(object)) === void 0) {\n        context.set(object, context.size);\n      } else {\n        return this.dispatch(\"[CIRCULAR:\" + objectNumber + \"]\");\n      }\n      if (typeof Buffer !== \"undefined\" && Buffer.isBuffer && Buffer.isBuffer(object)) {\n        write(\"buffer:\");\n        return write(object.toString(\"utf8\"));\n      }\n      if (objType !== \"object\" && objType !== \"function\" && objType !== \"asyncfunction\") {\n        if (this[objType]) {\n          this[objType](object);\n        } else if (!options.ignoreUnknown) {\n          this.unkown(object, objType);\n        }\n      } else {\n        let keys = Object.keys(object);\n        if (options.unorderedObjects) {\n          keys = keys.sort();\n        }\n        let extraKeys = [];\n        if (options.respectType !== false && !isNativeFunction(object)) {\n          extraKeys = defaultPrototypesKeys;\n        }\n        if (options.excludeKeys) {\n          keys = keys.filter(key => {\n            return !options.excludeKeys(key);\n          });\n          extraKeys = extraKeys.filter(key => {\n            return !options.excludeKeys(key);\n          });\n        }\n        write(\"object:\" + (keys.length + extraKeys.length) + \":\");\n        const dispatchForKey = key => {\n          this.dispatch(key);\n          write(\":\");\n          if (!options.excludeValues) {\n            this.dispatch(object[key]);\n          }\n          write(\",\");\n        };\n        for (const key of keys) {\n          dispatchForKey(key);\n        }\n        for (const key of extraKeys) {\n          dispatchForKey(key);\n        }\n      }\n    },\n    array(arr, unordered) {\n      unordered = unordered === void 0 ? options.unorderedArrays !== false : unordered;\n      write(\"array:\" + arr.length + \":\");\n      if (!unordered || arr.length <= 1) {\n        for (const entry of arr) {\n          this.dispatch(entry);\n        }\n        return;\n      }\n      const contextAdditions = /* @__PURE__ */new Map();\n      const entries = arr.map(entry => {\n        const hasher = createHasher(options);\n        hasher.dispatch(entry);\n        for (const [key, value] of hasher.getContext()) {\n          contextAdditions.set(key, value);\n        }\n        return hasher.toString();\n      });\n      context = contextAdditions;\n      entries.sort();\n      return this.array(entries, false);\n    },\n    date(date) {\n      return write(\"date:\" + date.toJSON());\n    },\n    symbol(sym) {\n      return write(\"symbol:\" + sym.toString());\n    },\n    unkown(value, type) {\n      write(type);\n      if (!value) {\n        return;\n      }\n      write(\":\");\n      if (value && typeof value.entries === \"function\") {\n        return this.array(Array.from(value.entries()), true\n        /* ordered */);\n      }\n    },\n    error(err) {\n      return write(\"error:\" + err.toString());\n    },\n    boolean(bool) {\n      return write(\"bool:\" + bool);\n    },\n    string(string) {\n      write(\"string:\" + string.length + \":\");\n      write(string);\n    },\n    function(fn) {\n      write(\"fn:\");\n      if (isNativeFunction(fn)) {\n        this.dispatch(\"[native]\");\n      } else {\n        this.dispatch(fn.toString());\n      }\n      if (options.respectFunctionNames !== false) {\n        this.dispatch(\"function-name:\" + String(fn.name));\n      }\n      if (options.respectFunctionProperties) {\n        this.object(fn);\n      }\n    },\n    number(number) {\n      return write(\"number:\" + number);\n    },\n    xml(xml) {\n      return write(\"xml:\" + xml.toString());\n    },\n    null() {\n      return write(\"Null\");\n    },\n    undefined() {\n      return write(\"Undefined\");\n    },\n    regexp(regex) {\n      return write(\"regex:\" + regex.toString());\n    },\n    uint8array(arr) {\n      write(\"uint8array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    uint8clampedarray(arr) {\n      write(\"uint8clampedarray:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    int8array(arr) {\n      write(\"int8array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    uint16array(arr) {\n      write(\"uint16array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    int16array(arr) {\n      write(\"int16array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    uint32array(arr) {\n      write(\"uint32array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    int32array(arr) {\n      write(\"int32array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    float32array(arr) {\n      write(\"float32array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    float64array(arr) {\n      write(\"float64array:\");\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    arraybuffer(arr) {\n      write(\"arraybuffer:\");\n      return this.dispatch(new Uint8Array(arr));\n    },\n    url(url) {\n      return write(\"url:\" + url.toString());\n    },\n    map(map) {\n      write(\"map:\");\n      const arr = [...map];\n      return this.array(arr, options.unorderedSets !== false);\n    },\n    set(set) {\n      write(\"set:\");\n      const arr = [...set];\n      return this.array(arr, options.unorderedSets !== false);\n    },\n    file(file) {\n      write(\"file:\");\n      return this.dispatch([file.name, file.size, file.type, file.lastModfied]);\n    },\n    blob() {\n      if (options.ignoreUnknown) {\n        return write(\"[blob]\");\n      }\n      throw new Error('Hashing Blob objects is currently not supported\\nUse \"options.replacer\" or \"options.ignoreUnknown\"\\n');\n    },\n    domwindow() {\n      return write(\"domwindow\");\n    },\n    bigint(number) {\n      return write(\"bigint:\" + number.toString());\n    },\n    /* Node.js standard native objects */\n    process() {\n      return write(\"process\");\n    },\n    timer() {\n      return write(\"timer\");\n    },\n    pipe() {\n      return write(\"pipe\");\n    },\n    tcp() {\n      return write(\"tcp\");\n    },\n    udp() {\n      return write(\"udp\");\n    },\n    tty() {\n      return write(\"tty\");\n    },\n    statwatcher() {\n      return write(\"statwatcher\");\n    },\n    securecontext() {\n      return write(\"securecontext\");\n    },\n    connection() {\n      return write(\"connection\");\n    },\n    zlib() {\n      return write(\"zlib\");\n    },\n    context() {\n      return write(\"context\");\n    },\n    nodescript() {\n      return write(\"nodescript\");\n    },\n    httpparser() {\n      return write(\"httpparser\");\n    },\n    dataview() {\n      return write(\"dataview\");\n    },\n    signal() {\n      return write(\"signal\");\n    },\n    fsevent() {\n      return write(\"fsevent\");\n    },\n    tlswrap() {\n      return write(\"tlswrap\");\n    }\n  };\n}\nconst nativeFunc = \"[native code] }\";\nconst nativeFuncLength = nativeFunc.length;\nfunction isNativeFunction(f) {\n  if (typeof f !== \"function\") {\n    return false;\n  }\n  return Function.prototype.toString.call(f).slice(-nativeFuncLength) === nativeFunc;\n}\nclass WordArray {\n  constructor(words, sigBytes) {\n    words = this.words = words || [];\n    this.sigBytes = sigBytes === void 0 ? words.length * 4 : sigBytes;\n  }\n  toString(encoder) {\n    return (encoder || Hex).stringify(this);\n  }\n  concat(wordArray) {\n    this.clamp();\n    if (this.sigBytes % 4) {\n      for (let i = 0; i < wordArray.sigBytes; i++) {\n        const thatByte = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n        this.words[this.sigBytes + i >>> 2] |= thatByte << 24 - (this.sigBytes + i) % 4 * 8;\n      }\n    } else {\n      for (let j = 0; j < wordArray.sigBytes; j += 4) {\n        this.words[this.sigBytes + j >>> 2] = wordArray.words[j >>> 2];\n      }\n    }\n    this.sigBytes += wordArray.sigBytes;\n    return this;\n  }\n  clamp() {\n    this.words[this.sigBytes >>> 2] &= 4294967295 << 32 - this.sigBytes % 4 * 8;\n    this.words.length = Math.ceil(this.sigBytes / 4);\n  }\n  clone() {\n    return new WordArray([...this.words]);\n  }\n}\nconst Hex = {\n  stringify(wordArray) {\n    const hexChars = [];\n    for (let i = 0; i < wordArray.sigBytes; i++) {\n      const bite = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n      hexChars.push((bite >>> 4).toString(16), (bite & 15).toString(16));\n    }\n    return hexChars.join(\"\");\n  }\n};\nconst Base64 = {\n  stringify(wordArray) {\n    const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const base64Chars = [];\n    for (let i = 0; i < wordArray.sigBytes; i += 3) {\n      const byte1 = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n      const byte2 = wordArray.words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;\n      const byte3 = wordArray.words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;\n      const triplet = byte1 << 16 | byte2 << 8 | byte3;\n      for (let j = 0; j < 4 && i * 8 + j * 6 < wordArray.sigBytes * 8; j++) {\n        base64Chars.push(keyStr.charAt(triplet >>> 6 * (3 - j) & 63));\n      }\n    }\n    return base64Chars.join(\"\");\n  }\n};\nconst Latin1 = {\n  parse(latin1Str) {\n    const latin1StrLength = latin1Str.length;\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i++) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;\n    }\n    return new WordArray(words, latin1StrLength);\n  }\n};\nconst Utf8 = {\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n};\nclass BufferedBlockAlgorithm {\n  constructor() {\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n    this._minBufferSize = 0;\n    this.blockSize = 512 / 32;\n  }\n  reset() {\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n  _append(data) {\n    if (typeof data === \"string\") {\n      data = Utf8.parse(data);\n    }\n    this._data.concat(data);\n    this._nDataBytes += data.sigBytes;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _doProcessBlock(_dataWords, _offset) {}\n  _process(doFlush) {\n    let processedWords;\n    let nBlocksReady = this._data.sigBytes / (this.blockSize * 4);\n    if (doFlush) {\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n    const nWordsReady = nBlocksReady * this.blockSize;\n    const nBytesReady = Math.min(nWordsReady * 4, this._data.sigBytes);\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += this.blockSize) {\n        this._doProcessBlock(this._data.words, offset);\n      }\n      processedWords = this._data.words.splice(0, nWordsReady);\n      this._data.sigBytes -= nBytesReady;\n    }\n    return new WordArray(processedWords, nBytesReady);\n  }\n}\nclass Hasher extends BufferedBlockAlgorithm {\n  update(messageUpdate) {\n    this._append(messageUpdate);\n    this._process();\n    return this;\n  }\n  finalize(messageUpdate) {\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n  }\n}\nconst H = [1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225];\nconst K = [1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998];\nconst W = [];\nclass SHA256 extends Hasher {\n  constructor() {\n    super(...arguments);\n    this._hash = new WordArray([...H]);\n  }\n  reset() {\n    super.reset();\n    this._hash = new WordArray([...H]);\n  }\n  _doProcessBlock(M, offset) {\n    const H2 = this._hash.words;\n    let a = H2[0];\n    let b = H2[1];\n    let c = H2[2];\n    let d = H2[3];\n    let e = H2[4];\n    let f = H2[5];\n    let g = H2[6];\n    let h = H2[7];\n    for (let i = 0; i < 64; i++) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W[i - 15];\n        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        const gamma1x = W[i - 2];\n        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n      const ch = e & f ^ ~e & g;\n      const maj = a & b ^ a & c ^ b & c;\n      const sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      const sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n    H2[0] = H2[0] + a | 0;\n    H2[1] = H2[1] + b | 0;\n    H2[2] = H2[2] + c | 0;\n    H2[3] = H2[3] + d | 0;\n    H2[4] = H2[4] + e | 0;\n    H2[5] = H2[5] + f | 0;\n    H2[6] = H2[6] + g | 0;\n    H2[7] = H2[7] + h | 0;\n  }\n  finalize(messageUpdate) {\n    super.finalize(messageUpdate);\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = this._data.sigBytes * 8;\n    this._data.words[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;\n    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);\n    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n    this._data.sigBytes = this._data.words.length * 4;\n    this._process();\n    return this._hash;\n  }\n}\nfunction sha256(message) {\n  return new SHA256().finalize(message).toString();\n}\nfunction sha256base64(message) {\n  return new SHA256().finalize(message).toString(Base64);\n}\nfunction hash(object, options = {}) {\n  const hashed = typeof object === \"string\" ? object : objectHash(object, options);\n  return sha256base64(hashed).slice(0, 10);\n}\nfunction murmurHash(key, seed = 0) {\n  if (typeof key === \"string\") {\n    key = createBuffer(key);\n  }\n  let i = 0;\n  let h1 = seed;\n  let k1;\n  let h1b;\n  const remainder = key.length & 3;\n  const bytes = key.length - remainder;\n  const c1 = 3432918353;\n  const c2 = 461845907;\n  while (i < bytes) {\n    k1 = key[i] & 255 | (key[++i] & 255) << 8 | (key[++i] & 255) << 16 | (key[++i] & 255) << 24;\n    ++i;\n    k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;\n    h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);\n  }\n  k1 = 0;\n  switch (remainder) {\n    case 3:\n      {\n        k1 ^= (key[i + 2] & 255) << 16;\n        break;\n      }\n    case 2:\n      {\n        k1 ^= (key[i + 1] & 255) << 8;\n        break;\n      }\n    case 1:\n      {\n        k1 ^= key[i] & 255;\n        k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n        h1 ^= k1;\n      }\n  }\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n}\nfunction createBuffer(val) {\n  return new TextEncoder().encode(val);\n}\nfunction isEqual(object1, object2, hashOptions = {}) {\n  if (object1 === object2) {\n    return true;\n  }\n  if (objectHash(object1, hashOptions) === objectHash(object2, hashOptions)) {\n    return true;\n  }\n  return false;\n}\nfunction diff(obj1, obj2, opts = {}) {\n  const h1 = _toHashedObject(obj1, opts);\n  const h2 = _toHashedObject(obj2, opts);\n  return _diff(h1, h2, opts);\n}\nfunction _diff(h1, h2, opts = {}) {\n  const diffs = [];\n  const allProps = /* @__PURE__ */new Set([...Object.keys(h1.props || {}), ...Object.keys(h2.props || {})]);\n  if (h1.props && h2.props) {\n    for (const prop of allProps) {\n      const p1 = h1.props[prop];\n      const p2 = h2.props[prop];\n      if (p1 && p2) {\n        diffs.push(..._diff(h1.props?.[prop], h2.props?.[prop], opts));\n      } else if (p1 || p2) {\n        diffs.push(new DiffEntry((p2 || p1).key, p1 ? \"removed\" : \"added\", p2, p1));\n      }\n    }\n  }\n  if (allProps.size === 0 && h1.hash !== h2.hash) {\n    diffs.push(new DiffEntry((h2 || h1).key, \"changed\", h2, h1));\n  }\n  return diffs;\n}\nfunction _toHashedObject(obj, opts, key = \"\") {\n  if (obj && typeof obj !== \"object\") {\n    return new DiffHashedObject(key, obj, objectHash(obj, opts));\n  }\n  const props = {};\n  const hashes = [];\n  for (const _key in obj) {\n    props[_key] = _toHashedObject(obj[_key], opts, key ? `${key}.${_key}` : _key);\n    hashes.push(props[_key].hash);\n  }\n  return new DiffHashedObject(key, obj, `{${hashes.join(\":\")}}`, props);\n}\nclass DiffEntry {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(key, type, newValue, oldValue) {\n    this.key = key;\n    this.type = type;\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n  toString() {\n    return this.toJSON();\n  }\n  toJSON() {\n    switch (this.type) {\n      case \"added\":\n        {\n          return `Added   \\`${this.key}\\``;\n        }\n      case \"removed\":\n        {\n          return `Removed \\`${this.key}\\``;\n        }\n      case \"changed\":\n        {\n          return `Changed \\`${this.key}\\` from \\`${this.oldValue?.toString() || \"-\"}\\` to \\`${this.newValue.toString()}\\``;\n        }\n    }\n  }\n}\nclass DiffHashedObject {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(key, value, hash, props) {\n    this.key = key;\n    this.value = value;\n    this.hash = hash;\n    this.props = props;\n  }\n  toString() {\n    if (this.props) {\n      return `{${Object.keys(this.props).join(\",\")}}`;\n    } else {\n      return JSON.stringify(this.value);\n    }\n  }\n  toJSON() {\n    const k = this.key || \".\";\n    if (this.props) {\n      return `${k}({${Object.keys(this.props).join(\",\")}})`;\n    }\n    return `${k}(${this.value})`;\n  }\n}\nexport { diff, hash, isEqual, murmurHash, objectHash, sha256, sha256base64 };", "import { sha256 } from 'ohash';\n/**\n * TODO in the future we should no longer provide a\n * fallback to crypto.subtle.digest.\n * Instead users without crypto.subtle.digest support, should have to provide their own\n * hash function.\n */\nexport function jsSha256(input) {\n  return Promise.resolve(sha256(input));\n}\nexport async function nativeSha256(input) {\n  var data = new TextEncoder().encode(input);\n  var hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  /**\n   * @link https://jameshfisher.com/2017/10/30/web-cryptography-api-hello-world/\n   */\n  var hash = Array.prototype.map.call(new Uint8Array(hashBuffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n  return hash;\n}\nexport var canUseCryptoSubtle = typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined' && typeof crypto.subtle.digest === 'function';\n\n/**\n * Default hash method used to hash\n * strings and do equal comparisons.\n *\n * IMPORTANT: Changing the default hashing method\n * requires a BREAKING change!\n */\n\nexport var defaultHashSha256 = canUseCryptoSubtle ? nativeSha256 : jsSha256;\nexport function hashStringToNumber(str) {\n  var nr = 0;\n  var len = str.length;\n  for (var i = 0; i < len; i++) {\n    nr = nr + str.charCodeAt(i);\n    nr |= 0; // Convert to 32bit integer, improves performance\n  }\n  return nr;\n}\n", "/**\n * returns a promise that resolves on the next tick\n */\nexport function nextTick() {\n  return new Promise(res => setTimeout(res, 0));\n}\nexport function promiseWait(ms = 0) {\n  return new Promise(res => setTimeout(res, ms));\n}\nexport function toPromise(maybePromise) {\n  if (maybePromise && typeof maybePromise.then === 'function') {\n    // is promise\n    return maybePromise;\n  } else {\n    return Promise.resolve(maybePromise);\n  }\n}\n\n/**\n * returns true if promise is given\n */\nexport function isPromise(value) {\n  if (typeof value !== 'undefined' && typeof value.then === 'function') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Reusing resolved promises has a better\n * performance than creating new ones each time.\n */\nexport var PROMISE_RESOLVE_TRUE = Promise.resolve(true);\nexport var PROMISE_RESOLVE_FALSE = Promise.resolve(false);\nexport var PROMISE_RESOLVE_NULL = Promise.resolve(null);\nexport var PROMISE_RESOLVE_VOID = Promise.resolve();\nexport function requestIdlePromiseNoQueue(\n/**\n * We always set a timeout!\n * RxDB might be used on the server side where the\n * server runs 24/4 on 99% CPU. So without a timeout\n * this would never resolve which could cause a memory leak.\n */\ntimeout = 10000) {\n  /**\n   * Do not use window.requestIdleCallback\n   * because some javascript runtimes like react-native,\n   * do not have a window object, but still have a global\n   * requestIdleCallback function.\n   * @link https://github.com/pubkey/rxdb/issues/4804\n  */\n  if (typeof requestIdleCallback === 'function') {\n    return new Promise(res => {\n      requestIdleCallback(() => res(), {\n        timeout\n      });\n    });\n  } else {\n    return promiseWait(0);\n  }\n}\n\n/**\n * If multiple operations wait for an requestIdlePromise\n * we do not want them to resolve all at the same time.\n * So we have to queue the calls.\n */\nvar idlePromiseQueue = PROMISE_RESOLVE_VOID;\nexport function requestIdlePromise(timeout = undefined) {\n  idlePromiseQueue = idlePromiseQueue.then(() => {\n    return requestIdlePromiseNoQueue(timeout);\n  });\n  return idlePromiseQueue;\n}\n\n/**\n * run the callback if requestIdleCallback available\n * do nothing if not\n * @link https://developer.mozilla.org/de/docs/Web/API/Window/requestIdleCallback\n */\nexport function requestIdleCallbackIfAvailable(fun) {\n  /**\n   * Do not use window.requestIdleCallback\n   * because some javascript runtimes like react-native,\n   * do not have a window object, but still have a global\n   * requestIdleCallback function.\n   * @link https://github.com/pubkey/rxdb/issues/4804\n  */\n  if (typeof requestIdleCallback === 'function') {\n    requestIdleCallback(() => {\n      fun();\n    });\n  }\n}\n\n/**\n * like Promise.all() but runs in series instead of parallel\n * @link https://github.com/egoist/promise.series/blob/master/index.js\n * @param tasks array with functions that return a promise\n */\nexport function promiseSeries(tasks, initial) {\n  return tasks.reduce((current, next) => current.then(next), Promise.resolve(initial));\n}\n", "export var REGEX_ALL_DOTS = /\\./g;\nexport var REGEX_ALL_PIPES = /\\|/g;\n", "var COUCH_NAME_CHARS = 'abcdefghijklmnopqrstuvwxyz';\n/**\n * get a random string which can be used with couchdb\n * @link http://stackoverflow.com/a/1349426/3443137\n */\nexport function randomCouchString(length = 10) {\n  var text = '';\n  for (var i = 0; i < length; i++) {\n    text += COUCH_NAME_CHARS.charAt(Math.floor(Math.random() * COUCH_NAME_CHARS.length));\n  }\n  return text;\n}\n\n/**\n * A random string that is never inside of any storage\n */\nexport var RANDOM_STRING = 'Fz7SZXPmYJujkzjY1rpXWvlWBqoGAfAX';\n\n/**\n * uppercase first char\n */\nexport function ucfirst(str) {\n  str += '';\n  var f = str.charAt(0).toUpperCase();\n  return f + str.substr(1);\n}\n\n/**\n * removes trailing and ending dots from the string\n */\nexport function trimDots(str) {\n  // start\n  while (str.charAt(0) === '.') {\n    str = str.substr(1);\n  }\n\n  // end\n  while (str.slice(-1) === '.') {\n    str = str.slice(0, -1);\n  }\n  return str;\n}\n\n/**\n * @link https://stackoverflow.com/a/44950500/3443137\n */\nexport function lastCharOfString(str) {\n  return str.charAt(str.length - 1);\n}\n\n/**\n * returns true if the given name is likely a folder path\n */\nexport function isFolderPath(name) {\n  // do not check, if foldername is given\n  if (name.includes('/') ||\n  // unix\n  name.includes('\\\\') // windows\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @link https://gist.github.com/andreburgaud/6f73fd2d690b629346b8\n * @link https://stackoverflow.com/a/76240378/3443137\n */\nexport function arrayBufferToString(arrayBuffer) {\n  var chunkSize = 8192;\n  var str = '';\n  var len = arrayBuffer.byteLength;\n  for (var i = 0; i < len; i += chunkSize) {\n    var chunk = new Uint8Array(arrayBuffer, i, Math.min(chunkSize, len - i));\n    str += String.fromCharCode.apply(null, chunk);\n  }\n  return str;\n}\nexport function stringToArrayBuffer(str) {\n  var buf = new ArrayBuffer(str.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\nexport function normalizeString(str) {\n  return str.trim().replace(/[\\n\\s]+/g, '');\n}\n", "/**\n * Copied from the fast-deep-equal package\n * because it does not support es modules and causes optimization bailouts.\n * TODO use the npm package again when this is merged:\n * @link https://github.com/epoberezkin/fast-deep-equal/pull/105\n */\nexport function deepEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length;\n    var i;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0;) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    var keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n", "/**\n * Copied from\n * @link https://github.com/sindresorhus/dot-prop/blob/main/index.js\n * because it is currently an esm only module.\n * TODO use the npm package again when RxDB is also fully esm.\n */\n\nvar isObject = value => {\n  var type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n};\nvar disallowedKeys = new Set(['__proto__', 'prototype', 'constructor']);\nvar digits = new Set('0123456789');\nfunction getPathSegments(path) {\n  var parts = [];\n  var currentSegment = '';\n  var currentPart = 'start';\n  var isIgnoring = false;\n  for (var character of path) {\n    switch (character) {\n      case '\\\\':\n        {\n          if (currentPart === 'index') {\n            throw new Error('Invalid character in an index');\n          }\n          if (currentPart === 'indexEnd') {\n            throw new Error('Invalid character after an index');\n          }\n          if (isIgnoring) {\n            currentSegment += character;\n          }\n          currentPart = 'property';\n          isIgnoring = !isIgnoring;\n          break;\n        }\n      case '.':\n        {\n          if (currentPart === 'index') {\n            throw new Error('Invalid character in an index');\n          }\n          if (currentPart === 'indexEnd') {\n            currentPart = 'property';\n            break;\n          }\n          if (isIgnoring) {\n            isIgnoring = false;\n            currentSegment += character;\n            break;\n          }\n          if (disallowedKeys.has(currentSegment)) {\n            return [];\n          }\n          parts.push(currentSegment);\n          currentSegment = '';\n          currentPart = 'property';\n          break;\n        }\n      case '[':\n        {\n          if (currentPart === 'index') {\n            throw new Error('Invalid character in an index');\n          }\n          if (currentPart === 'indexEnd') {\n            currentPart = 'index';\n            break;\n          }\n          if (isIgnoring) {\n            isIgnoring = false;\n            currentSegment += character;\n            break;\n          }\n          if (currentPart === 'property') {\n            if (disallowedKeys.has(currentSegment)) {\n              return [];\n            }\n            parts.push(currentSegment);\n            currentSegment = '';\n          }\n          currentPart = 'index';\n          break;\n        }\n      case ']':\n        {\n          if (currentPart === 'index') {\n            parts.push(Number.parseInt(currentSegment, 10));\n            currentSegment = '';\n            currentPart = 'indexEnd';\n            break;\n          }\n          if (currentPart === 'indexEnd') {\n            throw new Error('Invalid character after an index');\n          }\n\n          // Falls through\n        }\n      default:\n        {\n          if (currentPart === 'index' && !digits.has(character)) {\n            throw new Error('Invalid character in an index');\n          }\n          if (currentPart === 'indexEnd') {\n            throw new Error('Invalid character after an index');\n          }\n          if (currentPart === 'start') {\n            currentPart = 'property';\n          }\n          if (isIgnoring) {\n            isIgnoring = false;\n            currentSegment += '\\\\';\n          }\n          currentSegment += character;\n        }\n    }\n  }\n  if (isIgnoring) {\n    currentSegment += '\\\\';\n  }\n  switch (currentPart) {\n    case 'property':\n      {\n        if (disallowedKeys.has(currentSegment)) {\n          return [];\n        }\n        parts.push(currentSegment);\n        break;\n      }\n    case 'index':\n      {\n        throw new Error('Index was not closed');\n      }\n    case 'start':\n      {\n        parts.push('');\n        break;\n      }\n    // No default\n  }\n  return parts;\n}\nfunction isStringIndex(object, key) {\n  if (typeof key !== 'number' && Array.isArray(object)) {\n    var index = Number.parseInt(key, 10);\n    return Number.isInteger(index) && object[index] === object[key];\n  }\n  return false;\n}\nfunction assertNotStringIndex(object, key) {\n  if (isStringIndex(object, key)) {\n    throw new Error('Cannot use string index');\n  }\n}\n\n/**\n * TODO we need some performance tests and improvements here.\n */\nexport function getProperty(object, path, value) {\n  if (Array.isArray(path)) {\n    path = path.join('.');\n  }\n\n  /**\n   * Performance shortcut.\n   * In most cases we just have a simple property name\n   * so we can directly return it.\n   */\n  if (!path.includes('.') && !path.includes('[')) {\n    return object[path];\n  }\n  if (!isObject(object) || typeof path !== 'string') {\n    return value === undefined ? object : value;\n  }\n  var pathArray = getPathSegments(path);\n  if (pathArray.length === 0) {\n    return value;\n  }\n  for (var index = 0; index < pathArray.length; index++) {\n    var key = pathArray[index];\n    if (isStringIndex(object, key)) {\n      object = index === pathArray.length - 1 ? undefined : null;\n    } else {\n      object = object[key];\n    }\n    if (object === undefined || object === null) {\n      // `object` is either `undefined` or `null` so we want to stop the loop, and\n      // if this is not the last bit of the path, and\n      // if it didn't return `undefined`\n      // it would return `null` if `object` is `null`\n      // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`\n      if (index !== pathArray.length - 1) {\n        return value;\n      }\n      break;\n    }\n  }\n  return object === undefined ? value : object;\n}\nexport function setProperty(object, path, value) {\n  if (Array.isArray(path)) {\n    path = path.join('.');\n  }\n  if (!isObject(object) || typeof path !== 'string') {\n    return object;\n  }\n  var root = object;\n  var pathArray = getPathSegments(path);\n  for (var index = 0; index < pathArray.length; index++) {\n    var key = pathArray[index];\n    assertNotStringIndex(object, key);\n    if (index === pathArray.length - 1) {\n      object[key] = value;\n    } else if (!isObject(object[key])) {\n      object[key] = typeof pathArray[index + 1] === 'number' ? [] : {};\n    }\n    object = object[key];\n  }\n  return root;\n}\nexport function deleteProperty(object, path) {\n  if (!isObject(object) || typeof path !== 'string') {\n    return false;\n  }\n  var pathArray = getPathSegments(path);\n  for (var index = 0; index < pathArray.length; index++) {\n    var key = pathArray[index];\n    assertNotStringIndex(object, key);\n    if (index === pathArray.length - 1) {\n      delete object[key];\n      return true;\n    }\n    object = object[key];\n    if (!isObject(object)) {\n      return false;\n    }\n  }\n}\nexport function hasProperty(object, path) {\n  if (!isObject(object) || typeof path !== 'string') {\n    return false;\n  }\n  var pathArray = getPathSegments(path);\n  if (pathArray.length === 0) {\n    return false;\n  }\n  for (var key of pathArray) {\n    if (!isObject(object) || !(key in object) || isStringIndex(object, key)) {\n      return false;\n    }\n    object = object[key];\n  }\n  return true;\n}\n\n// TODO: Backslashes with no effect should not be escaped\nfunction escapePath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return path.replace(/[\\\\.[]/g, '\\\\$&');\n}\n\n// The keys returned by Object.entries() for arrays are strings\nfunction entries(value) {\n  if (Array.isArray(value)) {\n    return value.map((v, index) => [index, v]);\n  }\n  return Object.entries(value);\n}\nfunction stringifyPath(pathSegments) {\n  var result = '';\n\n  // eslint-disable-next-line prefer-const\n  for (var [index, segment] of entries(pathSegments)) {\n    if (typeof segment === 'number') {\n      result += \"[\" + segment + \"]\";\n    } else {\n      segment = escapePath(segment);\n      result += index === 0 ? segment : \".\" + segment;\n    }\n  }\n  return result;\n}\nfunction* deepKeysIterator(object, currentPath = []) {\n  if (!isObject(object)) {\n    if (currentPath.length > 0) {\n      yield stringifyPath(currentPath);\n    }\n    return;\n  }\n  for (var [key, value] of entries(object)) {\n    yield* deepKeysIterator(value, [...currentPath, key]);\n  }\n}\nexport function deepKeys(object) {\n  return [...deepKeysIterator(object)];\n}\n", "export function getFromMapOrThrow(map, key) {\n  var val = map.get(key);\n  if (typeof val === 'undefined') {\n    throw new Error('missing value from map ' + key);\n  }\n  return val;\n}\nexport function getFromMapOrCreate(map, index, creator, ifWasThere) {\n  var value = map.get(index);\n  if (typeof value === 'undefined') {\n    value = creator();\n    map.set(index, value);\n  } else if (ifWasThere) {\n    ifWasThere(value);\n  }\n  return value;\n}\n", "import { ucfirst } from \"./utils-string.js\";\n\n/**\n * Returns an error that indicates that a plugin is missing\n * We do not throw a RxError because this should not be handled\n * programmatically but by using the correct import\n */\nexport function pluginMissing(pluginKey) {\n  var keyParts = pluginKey.split('-');\n  var pluginName = 'RxDB';\n  keyParts.forEach(part => {\n    pluginName += ucfirst(part);\n  });\n  pluginName += 'Plugin';\n  return new Error(\"You are using a function which must be overwritten by a plugin.\\n        You should either prevent the usage of this function or add the plugin via:\\n            import { \" + pluginName + \" } from 'rxdb/plugins/\" + pluginKey + \"';\\n            addRxPlugin(\" + pluginName + \");\\n        \");\n}\nexport function errorToPlainJson(err) {\n  var ret = {\n    name: err.name,\n    message: err.message,\n    rxdb: err.rxdb,\n    parameters: err.parameters,\n    extensions: err.extensions,\n    code: err.code,\n    url: err.url,\n    /**\n     * stack must be last to make it easier to read the json in a console.\n     * Also we ensure that each linebreak is spaced so that the chrome devtools\n     * shows urls to the source code that can be clicked to inspect\n     * the correct place in the code.\n     */\n    stack: !err.stack ? undefined : err.stack.replace(/\\n/g, ' \\n ')\n  };\n  return ret;\n}\n", "/**\n * Returns the current unix time in milliseconds (with two decimals!)\n * Because the accuracy of getTime() in javascript is bad,\n * and we cannot rely on performance.now() on all platforms,\n * this method implements a way to never return the same value twice.\n * This ensures that when now() is called often, we do not loose the information\n * about which call came first and which came after.\n *\n * We had to move from having no decimals, to having two decimal\n * because it turned out that some storages are such fast that\n * calling this method too often would return 'the future'.\n */\nvar _lastNow = 0;\n/**\n * Returns the current time in milliseconds,\n * also ensures to not return the same value twice.\n */\nexport function now() {\n  var ret = Date.now();\n  ret = ret + 0.01;\n  if (ret <= _lastNow) {\n    ret = _lastNow + 0.01;\n  }\n\n  /**\n   * Strip the returned number to max two decimals.\n   * In theory we would not need this but\n   * in practice JavaScript has no such good number precision\n   * so rounding errors could add another decimal place.\n   */\n  var twoDecimals = parseFloat(ret.toFixed(2));\n  _lastNow = twoDecimals;\n  return twoDecimals;\n}\n", "export function runXTimes(xTimes, fn) {\n  new Array(xTimes).fill(0).forEach((_v, idx) => fn(idx));\n}\nexport function ensureNotFalsy(obj, message) {\n  if (!obj) {\n    if (!message) {\n      message = '';\n    }\n    throw new Error('ensureNotFalsy() is falsy: ' + message);\n  }\n  return obj;\n}\nexport function ensureInteger(obj) {\n  if (!Number.isInteger(obj)) {\n    throw new Error('ensureInteger() is falsy');\n  }\n  return obj;\n}\n\n/**\n * Using shareReplay() without settings will not unsubscribe\n * if there are no more subscribers.\n * So we use these defaults.\n * @link https://cartant.medium.com/rxjs-whats-changed-with-sharereplay-65c098843e95\n */\nexport var RXJS_SHARE_REPLAY_DEFAULTS = {\n  bufferSize: 1,\n  refCount: true\n};\n", "/**\n * This file is replaced in the 'npm run build:version' script.\n */\nexport var RXDB_VERSION = '15.24.0';\n", "/**\n * Can be used by some plugins to have a \"global\" object that\n * can be imported and mutated at will.\n */\nexport var RXDB_UTILS_GLOBAL = {};\nexport var PREMIUM_FLAG_HASH = '6da4936d1425ff3a5c44c02342c6daf791d266be3ae8479b8ec59e261df41b93';\n", "/**\n * functions that can or should be overwritten by plugins\n * IMPORTANT: Do not import any big stuff from RxDB here!\n * An 'overwritable' can be used inside WebWorkers for RxStorage only,\n * and we do not want to have the full RxDB lib bundled in them.\n */\n\nexport var overwritable = {\n  /**\n   * if this method is overwritten with one\n   * that returns true, we do additional checks\n   * which help the developer but have bad performance\n   */\n  isDevMode() {\n    return false;\n  },\n  /**\n   * Deep freezes and object when in dev-mode.\n   * Deep-Freezing has the same performance as deep-cloning, so we only do that in dev-mode.\n   * Also, we can ensure the readonly state via typescript\n   * @link https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n   */\n  deepFreezeWhenDevMode(obj) {\n    return obj;\n  },\n  /**\n   * overwritten to map error-codes to text-messages\n   */\n  tunnelErrorMessage(message) {\n    return \"RxDB Error-Code \" + message + \".\\n        Error messages are not included in RxDB core to reduce build size.\\n        \";\n  }\n};\n", "function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };", "import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };", "import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };", "import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };", "function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };", "import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };", "function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };", "function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };", "function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };", "import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };", "import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };", "import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n/**\n * here we use custom errors with the additional field 'parameters'\n */\n\nimport { overwritable } from \"./overwritable.js\";\n/**\n * transform an object of parameters to a presentable string\n */\nfunction parametersToString(parameters) {\n  var ret = '';\n  if (Object.keys(parameters).length === 0) return ret;\n  ret += 'Given parameters: {\\n';\n  ret += Object.keys(parameters).map(k => {\n    var paramStr = '[object Object]';\n    try {\n      if (k === 'errors') {\n        paramStr = parameters[k].map(err => JSON.stringify(err, Object.getOwnPropertyNames(err)));\n      } else {\n        paramStr = JSON.stringify(parameters[k], function (_k, v) {\n          return v === undefined ? null : v;\n        }, 2);\n      }\n    } catch (e) {}\n    return k + ':' + paramStr;\n  }).join('\\n');\n  ret += '}';\n  return ret;\n}\nfunction messageForError(message, code, parameters) {\n  return 'RxError (' + code + '):' + '\\n' + message + '\\n' + parametersToString(parameters);\n}\nexport var RxError = /*#__PURE__*/function (_Error) {\n  // always true, use this to detect if its an rxdb-error\n\n  function RxError(code, message, parameters = {}) {\n    var _this;\n    var mes = messageForError(message, code, parameters);\n    _this = _Error.call(this, mes) || this;\n    _this.code = code;\n    _this.message = mes;\n    _this.url = getErrorUrl(code);\n    _this.parameters = parameters;\n    _this.rxdb = true; // tag them as internal\n    return _this;\n  }\n  _inheritsLoose(RxError, _Error);\n  var _proto = RxError.prototype;\n  _proto.toString = function toString() {\n    return this.message;\n  };\n  return _createClass(RxError, [{\n    key: \"name\",\n    get: function () {\n      return 'RxError (' + this.code + ')';\n    }\n  }, {\n    key: \"typeError\",\n    get: function () {\n      return false;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexport var RxTypeError = /*#__PURE__*/function (_TypeError) {\n  // always true, use this to detect if its an rxdb-error\n\n  function RxTypeError(code, message, parameters = {}) {\n    var _this2;\n    var mes = messageForError(message, code, parameters);\n    _this2 = _TypeError.call(this, mes) || this;\n    _this2.code = code;\n    _this2.message = mes;\n    _this2.url = getErrorUrl(code);\n    _this2.parameters = parameters;\n    _this2.rxdb = true; // tag them as internal\n    return _this2;\n  }\n  _inheritsLoose(RxTypeError, _TypeError);\n  var _proto2 = RxTypeError.prototype;\n  _proto2.toString = function toString() {\n    return this.message;\n  };\n  return _createClass(RxTypeError, [{\n    key: \"name\",\n    get: function () {\n      return 'RxTypeError (' + this.code + ')';\n    }\n  }, {\n    key: \"typeError\",\n    get: function () {\n      return true;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\nexport function getErrorUrl(code) {\n  return 'https://rxdb.info/errors.html?console=errors#' + code;\n}\nexport function errorUrlHint(code) {\n  return '\\n You can find out more about this error here: ' + getErrorUrl(code) + ' ';\n}\nexport function newRxError(code, parameters) {\n  return new RxError(code, overwritable.tunnelErrorMessage(code) + errorUrlHint(code), parameters);\n}\nexport function newRxTypeError(code, parameters) {\n  return new RxTypeError(code, overwritable.tunnelErrorMessage(code) + errorUrlHint(code), parameters);\n}\n\n/**\n * Returns the error if it is a 409 conflict,\n * return false if it is another error.\n */\nexport function isBulkWriteConflictError(err) {\n  if (err && err.status === 409) {\n    return err;\n  } else {\n    return false;\n  }\n}\nvar STORAGE_WRITE_ERROR_CODE_TO_MESSAGE = {\n  409: 'document write conflict',\n  422: 'schema validation error',\n  510: 'attachment data missing'\n};\nexport function rxStorageWriteErrorToRxError(err) {\n  return newRxError('COL20', {\n    name: STORAGE_WRITE_ERROR_CODE_TO_MESSAGE[err.status],\n    document: err.documentId,\n    writeError: err\n  });\n}\n", "/**\n * hook-functions that can be extended by the plugin\n */\nexport var HOOKS = {\n  /**\n   * Runs before a plugin is added.\n   * Use this to block the usage of non-compatible plugins.\n   */\n  preAddRxPlugin: [],\n  /**\n   * functions that run before the database is created\n   */\n  preCreateRxDatabase: [],\n  /**\n   * runs after the database is created and prepared\n   * but before the instance is returned to the user\n   * @async\n   */\n  createRxDatabase: [],\n  preCreateRxCollection: [],\n  createRxCollection: [],\n  createRxState: [],\n  /**\n  * runs at the end of the destroy-process of a collection\n  * @async\n  */\n  postDestroyRxCollection: [],\n  /**\n   * Runs after a collection is removed.\n   * @async\n   */\n  postRemoveRxCollection: [],\n  /**\n    * functions that get the json-schema as input\n    * to do additionally checks/manipulation\n    */\n  preCreateRxSchema: [],\n  /**\n   * functions that run after the RxSchema is created\n   * gets RxSchema as attribute\n   */\n  createRxSchema: [],\n  preCreateRxQuery: [],\n  /**\n   * Runs before a query is send to the\n   * prepareQuery function of the storage engine.\n   */\n  prePrepareQuery: [],\n  createRxDocument: [],\n  /**\n   * runs after a RxDocument is created,\n   * cannot be async\n   */\n  postCreateRxDocument: [],\n  /**\n   * Runs before a RxStorageInstance is created\n   * gets the params of createStorageInstance()\n   * as attribute so you can manipulate them.\n   * Notice that you have to clone stuff before mutating the inputs.\n   */\n  preCreateRxStorageInstance: [],\n  preStorageWrite: [],\n  /**\n   * runs on the document-data before the document is migrated\n   * {\n   *   doc: Object, // original doc-data\n   *   migrated: // migrated doc-data after run through migration-strategies\n   * }\n   */\n  preMigrateDocument: [],\n  /**\n   * runs after the migration of a document has been done\n   */\n  postMigrateDocument: [],\n  /**\n   * runs at the beginning of the destroy-process of a database\n   */\n  preDestroyRxDatabase: [],\n  /**\n   * runs after a database has been removed\n   * @async\n   */\n  postRemoveRxDatabase: [],\n  /**\n   * runs before the replication writes the rows to master\n   * but before the rows have been modified\n   * @async\n   */\n  preReplicationMasterWrite: [],\n  /**\n   * runs after the replication has been sent to the server\n   * but before the new documents have been handled\n   * @async\n   */\n  preReplicationMasterWriteDocumentsHandle: []\n};\nexport function runPluginHooks(hookKey, obj) {\n  if (HOOKS[hookKey].length > 0) {\n    HOOKS[hookKey].forEach(fun => fun(obj));\n  }\n}\n\n/**\n * TODO\n * we should not run the hooks in parallel\n * this makes stuff unpredictable.\n */\nexport function runAsyncPluginHooks(hookKey, obj) {\n  return Promise.all(HOOKS[hookKey].map(fun => fun(obj)));\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type, fun) {\n  HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}\n", "import { newRxError } from \"./rx-error.js\";\nimport { appendToArray, ensureNotFalsy, flatClone, getProperty, isMaybeReadonlyArray, REGEX_ALL_DOTS, RX_META_LWT_MINIMUM, sortObject, trimDots } from \"./plugins/utils/index.js\";\n/**\n * Helper function to create a valid RxJsonSchema\n * with a given version.\n */\nexport function getPseudoSchemaForVersion(version, primaryKey) {\n  var pseudoSchema = fillWithDefaultSettings({\n    version,\n    type: 'object',\n    primaryKey: primaryKey,\n    properties: {\n      [primaryKey]: {\n        type: 'string',\n        maxLength: 100\n      }\n    },\n    indexes: [[primaryKey]],\n    required: [primaryKey]\n  });\n  return pseudoSchema;\n}\n\n/**\n * Returns the sub-schema for a given path\n */\nexport function getSchemaByObjectPath(rxJsonSchema, path) {\n  var usePath = path;\n  usePath = usePath.replace(REGEX_ALL_DOTS, '.properties.');\n  usePath = 'properties.' + usePath;\n  usePath = trimDots(usePath);\n  var ret = getProperty(rxJsonSchema, usePath);\n  return ret;\n}\nexport function fillPrimaryKey(primaryPath, jsonSchema, documentData) {\n  // optimization shortcut.\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData;\n  }\n  var newPrimary = getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData);\n  var existingPrimary = documentData[primaryPath];\n  if (existingPrimary && existingPrimary !== newPrimary) {\n    throw newRxError('DOC19', {\n      args: {\n        documentData,\n        existingPrimary,\n        newPrimary\n      },\n      schema: jsonSchema\n    });\n  }\n  documentData[primaryPath] = newPrimary;\n  return documentData;\n}\nexport function getPrimaryFieldOfPrimaryKey(primaryKey) {\n  if (typeof primaryKey === 'string') {\n    return primaryKey;\n  } else {\n    return primaryKey.key;\n  }\n}\nexport function getLengthOfPrimaryKey(schema) {\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n  var schemaPart = getSchemaByObjectPath(schema, primaryPath);\n  return ensureNotFalsy(schemaPart.maxLength);\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData) {\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData[jsonSchema.primaryKey];\n  }\n  var compositePrimary = jsonSchema.primaryKey;\n  return compositePrimary.fields.map(field => {\n    var value = getProperty(documentData, field);\n    if (typeof value === 'undefined') {\n      throw newRxError('DOC18', {\n        args: {\n          field,\n          documentData\n        }\n      });\n    }\n    return value;\n  }).join(compositePrimary.separator);\n}\n\n/**\n * Normalize the RxJsonSchema.\n * We need this to ensure everything is set up properly\n * and we have the same hash on schemas that represent the same value but\n * have different json.\n *\n * - Orders the schemas attributes by alphabetical order\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\n * - We need this for deterministic sort order on all queries, which is required for event-reduce to work.\n *\n * @return RxJsonSchema - ordered and filled\n */\nexport function normalizeRxJsonSchema(jsonSchema) {\n  var normalizedSchema = sortObject(jsonSchema, true);\n  return normalizedSchema;\n}\n\n/**\n * If the schema does not specify any index,\n * we add this index so we at least can run RxQuery()\n * and only select non-deleted fields.\n */\nexport function getDefaultIndex(primaryPath) {\n  return ['_deleted', primaryPath];\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings(schemaObj) {\n  schemaObj = flatClone(schemaObj);\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\n  schemaObj.properties = flatClone(schemaObj.properties);\n\n  // additionalProperties is always false\n  schemaObj.additionalProperties = false;\n\n  // fill with key-compression-state ()\n  if (!Object.prototype.hasOwnProperty.call(schemaObj, 'keyCompression')) {\n    schemaObj.keyCompression = false;\n  }\n\n  // indexes must be array\n  schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\n\n  // required must be array\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n\n  // encrypted must be array\n  schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\n\n  // add _rev\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  };\n\n  // add attachments\n  schemaObj.properties._attachments = {\n    type: 'object'\n  };\n\n  // add deleted flag\n  schemaObj.properties._deleted = {\n    type: 'boolean'\n  };\n\n  // add meta property\n  schemaObj.properties._meta = RX_META_SCHEMA;\n\n  /**\n   * meta fields are all required\n   */\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n  schemaObj.required.push('_deleted');\n  schemaObj.required.push('_rev');\n  schemaObj.required.push('_meta');\n  schemaObj.required.push('_attachments');\n\n  // final fields are always required\n  var finalFields = getFinalFields(schemaObj);\n  appendToArray(schemaObj.required, finalFields);\n  schemaObj.required = schemaObj.required.filter(field => !field.includes('.')).filter((elem, pos, arr) => arr.indexOf(elem) === pos); // unique;\n\n  // version is 0 by default\n  schemaObj.version = schemaObj.version || 0;\n  var useIndexes = schemaObj.indexes.map(index => {\n    var arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n    /**\n     * Append primary key to indexes that do not contain the primaryKey.\n     * All indexes must have the primaryKey to ensure a deterministic sort order.\n     */\n    if (!arIndex.includes(primaryPath)) {\n      arIndex.push(primaryPath);\n    }\n\n    // add _deleted flag to all indexes so we can query only non-deleted fields\n    // in RxDB itself\n    if (arIndex[0] !== '_deleted') {\n      arIndex.unshift('_deleted');\n    }\n    return arIndex;\n  });\n  if (useIndexes.length === 0) {\n    useIndexes.push(getDefaultIndex(primaryPath));\n  }\n\n  // we need this index for the getChangedDocumentsSince() method\n  useIndexes.push(['_meta.lwt', primaryPath]);\n\n  // also add the internalIndexes\n  if (schemaObj.internalIndexes) {\n    schemaObj.internalIndexes.map(idx => {\n      useIndexes.push(idx);\n    });\n  }\n\n  // make indexes unique\n  var hasIndex = new Set();\n  useIndexes.filter(index => {\n    var indexStr = index.join(',');\n    if (hasIndex.has(indexStr)) {\n      return false;\n    } else {\n      hasIndex.add(indexStr);\n      return true;\n    }\n  });\n  schemaObj.indexes = useIndexes;\n  return schemaObj;\n}\nexport var RX_META_SCHEMA = {\n  type: 'object',\n  properties: {\n    /**\n     * The last-write time.\n     * Unix time in milliseconds.\n     */\n    lwt: {\n      type: 'number',\n      /**\n       * We use 1 as minimum so that the value is never falsy.\n       */\n      minimum: RX_META_LWT_MINIMUM,\n      maximum: 1000000000000000,\n      multipleOf: 0.01\n    }\n  },\n  /**\n   * Additional properties are allowed\n   * and can be used by plugins to set various flags.\n   */\n  additionalProperties: true,\n  required: ['lwt']\n};\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(key => jsonSchema.properties[key].final);\n\n  // primary is also final\n  var primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n  ret.push(primaryPath);\n\n  // fields of composite primary are final\n  if (typeof jsonSchema.primaryKey !== 'string') {\n    jsonSchema.primaryKey.fields.forEach(field => ret.push(field));\n  }\n  return ret;\n}\n\n/**\n * fills all unset fields with default-values if set\n * @hotPath\n */\nexport function fillObjectWithDefaults(rxSchema, obj) {\n  var defaultKeys = Object.keys(rxSchema.defaultValues);\n  for (var i = 0; i < defaultKeys.length; ++i) {\n    var key = defaultKeys[i];\n    if (!Object.prototype.hasOwnProperty.call(obj, key) || typeof obj[key] === 'undefined') {\n      obj[key] = rxSchema.defaultValues[key];\n    }\n  }\n  return obj;\n}\nexport var DEFAULT_CHECKPOINT_SCHEMA = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    lwt: {\n      type: 'number'\n    }\n  },\n  required: ['id', 'lwt'],\n  additionalProperties: false\n};\n", "/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\n\nimport { overwritable } from \"./overwritable.js\";\nimport { appendToArray } from \"./plugins/utils/index.js\";\nexport function getDocumentDataOfRxChangeEvent(rxChangeEvent) {\n  if (rxChangeEvent.documentData) {\n    return rxChangeEvent.documentData;\n  } else {\n    return rxChangeEvent.previousDocumentData;\n  }\n}\n\n/**\n * Might return null which means an\n * already deleted document got modified but still is deleted.\n * These kind of events are not relevant for the event-reduce algorithm\n * and must be filtered out.\n */\nexport function rxChangeEventToEventReduceChangeEvent(rxChangeEvent) {\n  switch (rxChangeEvent.operation) {\n    case 'INSERT':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: rxChangeEvent.documentData,\n        previous: null\n      };\n    case 'UPDATE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: overwritable.deepFreezeWhenDevMode(rxChangeEvent.documentData),\n        previous: rxChangeEvent.previousDocumentData ? rxChangeEvent.previousDocumentData : 'UNKNOWN'\n      };\n    case 'DELETE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: null,\n        previous: rxChangeEvent.previousDocumentData\n      };\n  }\n}\n\n/**\n * Flattens the given events into a single array of events.\n * Used mostly in tests.\n */\nexport function flattenEvents(input) {\n  var output = [];\n  if (Array.isArray(input)) {\n    input.forEach(inputItem => {\n      var add = flattenEvents(inputItem);\n      appendToArray(output, add);\n    });\n  } else {\n    if (input.id && input.events) {\n      // is bulk\n      input.events.forEach(ev => output.push(ev));\n    } else {\n      output.push(input);\n    }\n  }\n  var usedIds = new Set();\n  var nonDuplicate = [];\n  function getEventId(ev) {\n    return [ev.documentId, ev.documentData ? ev.documentData._rev : '', ev.previousDocumentData ? ev.previousDocumentData._rev : ''].join('|');\n  }\n  output.forEach(ev => {\n    var eventId = getEventId(ev);\n    if (!usedIds.has(eventId)) {\n      usedIds.add(eventId);\n      nonDuplicate.push(ev);\n    }\n  });\n  return nonDuplicate;\n}\n", "import { countUntilNotMatching } from \"./plugins/utils/index.js\";\nimport { newRxError } from \"./rx-error.js\";\nimport { getSchemaByObjectPath } from \"./rx-schema-helper.js\";\nexport var INDEX_MAX = String.fromCharCode(65535);\n\n/**\n * Do not use -Infinity here because it would be\n * transformed to null on JSON.stringify() which can break things\n * when the query plan is send to the storage as json.\n * @link https://stackoverflow.com/a/16644751\n * Notice that for IndexedDB IDBKeyRange we have\n * to transform the value back to -Infinity\n * before we can use it in IDBKeyRange.bound.\n */\nexport var INDEX_MIN = Number.MIN_SAFE_INTEGER;\n\n/**\n * Returns the query plan which contains\n * information about how to run the query\n * and which indexes to use.\n *\n * This is used in some storage like Memory, dexie.js and IndexedDB.\n */\nexport function getQueryPlan(schema, query) {\n  var selector = query.selector;\n  var indexes = schema.indexes ? schema.indexes.slice(0) : [];\n  if (query.index) {\n    indexes = [query.index];\n  }\n\n  /**\n   * Most storages do not support descending indexes\n   * so having a 'desc' in the sorting, means we always have to re-sort the results.\n   */\n  var hasDescSorting = !!query.sort.find(sortField => Object.values(sortField)[0] === 'desc');\n\n  /**\n   * Some fields can be part of the selector while not being relevant for sorting\n   * because their selector operators specify that in all cases all matching docs\n   * would have the same value.\n   * For example the boolean field _deleted.\n   * TODO similar thing could be done for enums.\n   */\n  var sortIrrelevevantFields = new Set();\n  Object.keys(selector).forEach(fieldName => {\n    var schemaPart = getSchemaByObjectPath(schema, fieldName);\n    if (schemaPart && schemaPart.type === 'boolean' && Object.prototype.hasOwnProperty.call(selector[fieldName], '$eq')) {\n      sortIrrelevevantFields.add(fieldName);\n    }\n  });\n  var optimalSortIndex = query.sort.map(sortField => Object.keys(sortField)[0]);\n  var optimalSortIndexCompareString = optimalSortIndex.filter(f => !sortIrrelevevantFields.has(f)).join(',');\n  var currentBestQuality = -1;\n  var currentBestQueryPlan;\n\n  /**\n   * Calculate one query plan for each index\n   * and then test which of the plans is best.\n   */\n  indexes.forEach(index => {\n    var inclusiveEnd = true;\n    var inclusiveStart = true;\n    var opts = index.map(indexField => {\n      var matcher = selector[indexField];\n      var operators = matcher ? Object.keys(matcher) : [];\n      var matcherOpts = {};\n      if (!matcher || !operators.length) {\n        var startKey = inclusiveStart ? INDEX_MIN : INDEX_MAX;\n        matcherOpts = {\n          startKey,\n          endKey: inclusiveEnd ? INDEX_MAX : INDEX_MIN,\n          inclusiveStart: true,\n          inclusiveEnd: true\n        };\n      } else {\n        operators.forEach(operator => {\n          if (LOGICAL_OPERATORS.has(operator)) {\n            var operatorValue = matcher[operator];\n            var partialOpts = getMatcherQueryOpts(operator, operatorValue);\n            matcherOpts = Object.assign(matcherOpts, partialOpts);\n          }\n        });\n      }\n\n      // fill missing attributes\n      if (typeof matcherOpts.startKey === 'undefined') {\n        matcherOpts.startKey = INDEX_MIN;\n      }\n      if (typeof matcherOpts.endKey === 'undefined') {\n        matcherOpts.endKey = INDEX_MAX;\n      }\n      if (typeof matcherOpts.inclusiveStart === 'undefined') {\n        matcherOpts.inclusiveStart = true;\n      }\n      if (typeof matcherOpts.inclusiveEnd === 'undefined') {\n        matcherOpts.inclusiveEnd = true;\n      }\n      if (inclusiveStart && !matcherOpts.inclusiveStart) {\n        inclusiveStart = false;\n      }\n      if (inclusiveEnd && !matcherOpts.inclusiveEnd) {\n        inclusiveEnd = false;\n      }\n      return matcherOpts;\n    });\n    var startKeys = opts.map(opt => opt.startKey);\n    var endKeys = opts.map(opt => opt.endKey);\n    var queryPlan = {\n      index,\n      startKeys,\n      endKeys,\n      inclusiveEnd,\n      inclusiveStart,\n      sortSatisfiedByIndex: !hasDescSorting && optimalSortIndexCompareString === index.filter(f => !sortIrrelevevantFields.has(f)).join(','),\n      selectorSatisfiedByIndex: isSelectorSatisfiedByIndex(index, query.selector, startKeys, endKeys)\n    };\n    var quality = rateQueryPlan(schema, query, queryPlan);\n    if (quality >= currentBestQuality || query.index) {\n      currentBestQuality = quality;\n      currentBestQueryPlan = queryPlan;\n    }\n  });\n\n  /**\n   * In all cases and index must be found\n   */\n  if (!currentBestQueryPlan) {\n    throw newRxError('SNH', {\n      query\n    });\n  }\n  return currentBestQueryPlan;\n}\nexport var LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte', '$lt', '$lte']);\nexport var LOWER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$gt', '$gte']);\nexport var UPPER_BOUND_LOGICAL_OPERATORS = new Set(['$eq', '$lt', '$lte']);\nexport function isSelectorSatisfiedByIndex(index, selector, startKeys, endKeys) {\n  /**\n   * Not satisfied if one or more operators are non-logical\n   * operators that can never be satisfied by an index.\n   */\n  var selectorEntries = Object.entries(selector);\n  var hasNonMatchingOperator = selectorEntries.find(([fieldName, operation]) => {\n    if (!index.includes(fieldName)) {\n      return true;\n    }\n    var hasNonLogicOperator = Object.entries(operation).find(([op, _value]) => !LOGICAL_OPERATORS.has(op));\n    return hasNonLogicOperator;\n  });\n  if (hasNonMatchingOperator) {\n    return false;\n  }\n\n  /**\n   * Not satisfied if contains $and or $or operations.\n   */\n  if (selector.$and || selector.$or) {\n    return false;\n  }\n\n  // ensure all lower bound in index\n  var satisfieldLowerBound = [];\n  var lowerOperatorFieldNames = new Set();\n  for (var [fieldName, operation] of Object.entries(selector)) {\n    if (!index.includes(fieldName)) {\n      return false;\n    }\n\n    // If more then one logic op on the same field, we have to selector-match.\n    var lowerLogicOps = Object.keys(operation).filter(key => LOWER_BOUND_LOGICAL_OPERATORS.has(key));\n    if (lowerLogicOps.length > 1) {\n      return false;\n    }\n    var hasLowerLogicOp = lowerLogicOps[0];\n    if (hasLowerLogicOp) {\n      lowerOperatorFieldNames.add(fieldName);\n    }\n    if (hasLowerLogicOp !== '$eq') {\n      if (satisfieldLowerBound.length > 0) {\n        return false;\n      } else {\n        satisfieldLowerBound.push(hasLowerLogicOp);\n      }\n    }\n  }\n\n  // ensure all upper bound in index\n  var satisfieldUpperBound = [];\n  var upperOperatorFieldNames = new Set();\n  for (var [_fieldName, _operation] of Object.entries(selector)) {\n    if (!index.includes(_fieldName)) {\n      return false;\n    }\n\n    // If more then one logic op on the same field, we have to selector-match.\n    var upperLogicOps = Object.keys(_operation).filter(key => UPPER_BOUND_LOGICAL_OPERATORS.has(key));\n    if (upperLogicOps.length > 1) {\n      return false;\n    }\n    var hasUperLogicOp = upperLogicOps[0];\n    if (hasUperLogicOp) {\n      upperOperatorFieldNames.add(_fieldName);\n    }\n    if (hasUperLogicOp !== '$eq') {\n      if (satisfieldUpperBound.length > 0) {\n        return false;\n      } else {\n        satisfieldUpperBound.push(hasUperLogicOp);\n      }\n    }\n  }\n\n  /**\n   * If the index contains a non-relevant field between\n   * the relevant fields, then the index is not satisfying.\n   */\n  var i = 0;\n  for (var _fieldName2 of index) {\n    for (var set of [lowerOperatorFieldNames, upperOperatorFieldNames]) {\n      if (!set.has(_fieldName2) && set.size > 0) {\n        return false;\n      }\n      set.delete(_fieldName2);\n    }\n    var startKey = startKeys[i];\n    var endKey = endKeys[i];\n    if (startKey !== endKey && lowerOperatorFieldNames.size > 0 && upperOperatorFieldNames.size > 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\nexport function getMatcherQueryOpts(operator, operatorValue) {\n  switch (operator) {\n    case '$eq':\n      return {\n        startKey: operatorValue,\n        endKey: operatorValue,\n        inclusiveEnd: true,\n        inclusiveStart: true\n      };\n    case '$lte':\n      return {\n        endKey: operatorValue,\n        inclusiveEnd: true\n      };\n    case '$gte':\n      return {\n        startKey: operatorValue,\n        inclusiveStart: true\n      };\n    case '$lt':\n      return {\n        endKey: operatorValue,\n        inclusiveEnd: false\n      };\n    case '$gt':\n      return {\n        startKey: operatorValue,\n        inclusiveStart: false\n      };\n    default:\n      throw new Error('SNH');\n  }\n}\n\n/**\n * Returns a number that determines the quality of the query plan.\n * Higher number means better query plan.\n */\nexport function rateQueryPlan(schema, query, queryPlan) {\n  var quality = 0;\n  var addQuality = value => {\n    if (value > 0) {\n      quality = quality + value;\n    }\n  };\n  var pointsPerMatchingKey = 10;\n  var nonMinKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MIN && keyValue !== INDEX_MAX);\n  addQuality(nonMinKeyCount * pointsPerMatchingKey);\n  var nonMaxKeyCount = countUntilNotMatching(queryPlan.startKeys, keyValue => keyValue !== INDEX_MAX && keyValue !== INDEX_MIN);\n  addQuality(nonMaxKeyCount * pointsPerMatchingKey);\n  var equalKeyCount = countUntilNotMatching(queryPlan.startKeys, (keyValue, idx) => {\n    if (keyValue === queryPlan.endKeys[idx]) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  addQuality(equalKeyCount * pointsPerMatchingKey * 1.5);\n  var pointsIfNoReSortMustBeDone = queryPlan.sortSatisfiedByIndex ? 5 : 0;\n  addQuality(pointsIfNoReSortMustBeDone);\n  return quality;\n}\n", "/** Represents an error reported by the mingo library. */\nexport class MingoError extends Error {}", "/**\n * Utility constants and functions\n */\nimport { MingoError } from \"./types\";\nexport const MAX_INT = 2147483647;\nexport const MIN_INT = -2147483648;\nexport const MAX_LONG = Number.MAX_SAFE_INTEGER;\nexport const MIN_LONG = Number.MIN_SAFE_INTEGER;\n// special value to identify missing items. treated differently from undefined\nconst MISSING = Symbol(\"missing\");\nconst CYCLE_FOUND_ERROR = Object.freeze(new Error(\"mingo: cycle detected while processing object/array\"));\nconst ARRAY_PROTO = Object.getPrototypeOf([]);\nconst OBJECT_PROTO = Object.getPrototypeOf({});\nconst OBJECT_TAG = \"[object Object]\";\nconst OBJECT_TYPE_RE = /^\\[object ([a-zA-Z0-9]+)\\]$/;\nclass Null {}\nclass Undefined {}\nconst getConstructor = v => {\n  if (v === null) return Null;\n  if (v === undefined) return Undefined;\n  return v.constructor;\n};\n/**\n * Uses the simple hash method as described in Effective Java.\n * @see https://stackoverflow.com/a/113600/1370481\n * @param value The value to hash\n * @returns {number}\n */\nconst DEFAULT_HASH_FUNCTION = value => {\n  const s = stringify(value);\n  let hash = 0;\n  let i = s.length;\n  while (i) hash = (hash << 5) - hash ^ s.charCodeAt(--i);\n  return hash >>> 0;\n};\n// no array, object, or function types\nconst JS_SIMPLE_TYPES = new Set([\"null\", \"undefined\", \"boolean\", \"number\", \"string\", \"date\", \"regexp\"]);\nconst IMMUTABLE_TYPES_SET = new Set([Undefined, Null, Boolean, String, Number]);\n/** Convert simple value to string representation. */\nconst toString = v => v.toString(); // eslint-disable-line @typescript-eslint/no-base-to-string\n/** Convert a typed array to string representation. */\nconst typedArrayToString = v => `${getConstructor(v).name}[${v.toString()}]`; // eslint-disable-line @typescript-eslint/no-base-to-string\n/** Map of constructors to string converter functions */\nconst STRING_CONVERTERS = new Map([[Number, toString], [Boolean, toString], [RegExp, toString], [Function, toString], [Symbol, toString], [Date, d => d.toISOString()], [String, JSON.stringify], [Null, _ => \"null\"], [Undefined, _ => \"undefined\"], [Int8Array, typedArrayToString], [Uint8Array, typedArrayToString], [Uint8ClampedArray, typedArrayToString], [Int16Array, typedArrayToString], [Uint16Array, typedArrayToString], [Int32Array, typedArrayToString], [Uint32Array, typedArrayToString], [Float32Array, typedArrayToString], [Float64Array, typedArrayToString]]);\n/**\n * Some types like BigInt are not available on more exotic\n * JavaScript runtimes like ReactNative or QuickJS.\n * So we fill them in only if they exist so that it does not throw an error.\n */\nif (typeof BigInt !== \"undefined\") {\n  STRING_CONVERTERS.set(BigInt, n => \"0x\" + n.toString(16));\n}\nif (typeof BigInt64Array !== \"undefined\") {\n  STRING_CONVERTERS.set(BigInt64Array, typedArrayToString);\n}\nif (typeof BigUint64Array !== \"undefined\") {\n  STRING_CONVERTERS.set(BigUint64Array, typedArrayToString);\n}\n/** MongoDB sort comparison order. https://www.mongodb.com/docs/manual/reference/bson-type-comparison-order */\nconst SORT_ORDER_BY_TYPE = {\n  null: 0,\n  undefined: 0,\n  number: 1,\n  string: 2,\n  object: 3,\n  array: 4,\n  boolean: 5,\n  date: 6,\n  regexp: 7,\n  function: 8\n};\n/**\n * Compare function which adheres to MongoDB comparison order.\n *\n * @param a The first value\n * @param b The second value\n * @returns {Number}\n */\nexport const compare = (a, b) => {\n  if (a === MISSING) a = undefined;\n  if (b === MISSING) b = undefined;\n  const [u, v] = [a, b].map(n => SORT_ORDER_BY_TYPE[getType(n).toLowerCase()]);\n  if (u !== v) return u - v;\n  // number | string | date\n  if (u === 1 || u === 2 || u === 6) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  }\n  // check for equivalence equality\n  if (isEqual(a, b)) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  // if we get here we are comparing a type that does not make sense.\n  return 0;\n};\nexport function assert(condition, message) {\n  if (!condition) throw new MingoError(message);\n}\nconst isTypedArray = v => {\n  const proto = Object.getPrototypeOf(getConstructor(v));\n  return proto && proto.name === \"TypedArray\";\n};\n/**\n * Deep clone an object. Value types and immutable objects are returned as is.\n */\nexport const cloneDeep = obj => {\n  if (IMMUTABLE_TYPES_SET.has(getConstructor(obj))) return obj;\n  const cycle = new Set();\n  const clone = val => {\n    if (cycle.has(val)) throw CYCLE_FOUND_ERROR;\n    const ctor = getConstructor(val);\n    if (IMMUTABLE_TYPES_SET.has(ctor)) return val;\n    try {\n      // arrays\n      if (isArray(val)) {\n        cycle.add(val);\n        return val.map(clone);\n      }\n      // object literals\n      if (isObject(val)) {\n        cycle.add(val);\n        const res = {};\n        for (const k in val) res[k] = clone(val[k]);\n        return res;\n      }\n    } finally {\n      cycle.delete(val);\n    }\n    // dates, regex, typed arrays\n    if (ctor === Date || ctor === RegExp || isTypedArray(val)) {\n      return new ctor(val);\n    }\n    return val;\n  };\n  return clone(obj);\n};\n/**\n * Returns the name of type as specified in the tag returned by a call to Object.prototype.toString\n * @param v A value\n */\nexport const getType = v => OBJECT_TYPE_RE.exec(Object.prototype.toString.call(v))[1];\nexport const isBoolean = v => typeof v === \"boolean\";\nexport const isString = v => typeof v === \"string\";\nexport const isSymbol = v => typeof v === \"symbol\";\nexport const isNumber = v => !isNaN(v) && typeof v === \"number\";\nexport const isBigInt = v => !isNaN(v) && typeof v === \"bigint\";\nexport const isNotNaN = v => !(isNaN(v) && typeof v === \"number\");\nexport const isArray = Array.isArray;\nexport const isObject = v => {\n  if (!v) return false;\n  const proto = Object.getPrototypeOf(v);\n  return (proto === OBJECT_PROTO || proto === null) && OBJECT_TAG === Object.prototype.toString.call(v);\n};\n//  objects, arrays, functions, date, custom object\nexport const isObjectLike = v => v === Object(v);\nexport const isDate = v => v instanceof Date;\nexport const isRegExp = v => v instanceof RegExp;\nexport const isFunction = v => typeof v === \"function\";\nexport const isNil = v => v === null || v === undefined;\nexport const inArray = (arr, item) => arr.includes(item);\nexport const notInArray = (arr, item) => !inArray(arr, item);\nexport const truthy = (arg, strict = true) => !!arg || strict && arg === \"\";\nexport const isEmpty = x => isNil(x) || isString(x) && !x || x instanceof Array && x.length === 0 || isObject(x) && Object.keys(x).length === 0;\nexport const isMissing = v => v === MISSING;\n/** ensure a value is an array or wrapped within one. */\nexport const ensureArray = x => x instanceof Array ? x : [x];\nexport const has = (obj, prop) => !!obj && Object.prototype.hasOwnProperty.call(obj, prop);\nconst mergeable = (left, right) => isObject(left) && isObject(right) || isArray(left) && isArray(right);\n/**\n * Deep merge objects or arrays.\n * When the inputs have unmergeable types, the  right hand value is returned.\n * If inputs are arrays and options.flatten is set, elements in the same position are merged together. Remaining elements are appended to the target object.\n * If options.flatten is false, the right hand value is just appended to the left-hand value.\n * @param target {Object|Array} the target to merge into\n * @param obj {Object|Array} the source object\n */\nexport function merge(target, obj, options) {\n  // default options\n  options = options || {\n    flatten: false\n  };\n  // take care of missing inputs\n  if (isMissing(target) || isNil(target)) return obj;\n  if (isMissing(obj) || isNil(obj)) return target;\n  // fail only on initial input.\n  if (!mergeable(target, obj)) {\n    if (options.skipValidation) return obj || target;\n    throw Error(\"mismatched types. must both be array or object\");\n  }\n  // skip validation after initial input.\n  options.skipValidation = true;\n  if (isArray(target)) {\n    const result = target;\n    const input = obj;\n    if (options.flatten) {\n      let i = 0;\n      let j = 0;\n      while (i < result.length && j < input.length) {\n        result[i] = merge(result[i++], input[j++], options);\n      }\n      while (j < input.length) {\n        result.push(obj[j++]);\n      }\n    } else {\n      into(result, input);\n    }\n  } else {\n    for (const k in obj) {\n      target[k] = merge(target[k], obj[k], options);\n    }\n  }\n  return target;\n}\nfunction buildHashIndex(arr, hashFunction = DEFAULT_HASH_FUNCTION) {\n  const map = new Map();\n  arr.forEach((o, i) => {\n    const h = hashCode(o, hashFunction);\n    if (map.has(h)) {\n      if (!map.get(h).some(j => isEqual(arr[j], o))) {\n        map.get(h).push(i);\n      }\n    } else {\n      map.set(h, [i]);\n    }\n  });\n  return map;\n}\n/**\n * Returns the intersection of multiple arrays.\n *\n * @param  {Array} input An array of arrays from which to find intersection.\n * @param  {Function} hashFunction Custom function to hash values, default the hashCode method\n * @return {Array} Array of intersecting values.\n */\nexport function intersection(input, hashFunction = DEFAULT_HASH_FUNCTION) {\n  // if any array is empty, there is no intersection\n  if (input.some(arr => arr.length == 0)) return [];\n  if (input.length === 1) return Array.from(input);\n  // sort input arrays by to get smallest array\n  // const sorted = sortBy(input, (a: RawArray) => a.length) as RawArray[];\n  const sortedIndex = sortBy(input.map((a, i) => [i, a.length]), a => a[1]);\n  // get the smallest\n  const smallest = input[sortedIndex[0][0]];\n  // get hash index of smallest array\n  const map = buildHashIndex(smallest, hashFunction);\n  // hashIndex for remaining arrays.\n  const rmap = new Map();\n  // final intersection results and index of first occurrence.\n  const results = new Array();\n  map.forEach((v, k) => {\n    const lhs = v.map(j => smallest[j]);\n    const res = lhs.map(_ => 0);\n    // used to track first occurence of value in order of the original input array.\n    const stable = lhs.map(_ => [sortedIndex[0][0], 0]);\n    let found = false;\n    for (let i = 1; i < input.length; i++) {\n      const [currIndex, _] = sortedIndex[i];\n      const arr = input[currIndex];\n      if (!rmap.has(i)) rmap.set(i, buildHashIndex(arr));\n      // we found a match. let's confirm.\n      if (rmap.get(i).has(k)) {\n        const rhs = rmap.get(i).get(k).map(j => arr[j]);\n        // confirm the intersection with an equivalence check.\n        found = lhs.map((s, n) => rhs.some((t, m) => {\n          // we expect only one to match here since these are just collisions.\n          const p = res[n];\n          if (isEqual(s, t)) {\n            res[n]++;\n            // track position of value ordering for stability.\n            if (currIndex < stable[n][0]) {\n              stable[n] = [currIndex, rmap.get(i).get(k)[m]];\n            }\n          }\n          return p < res[n];\n        })).some(Boolean);\n      }\n      // found nothing, so exclude value. this was just a hash collision.\n      if (!found) return;\n    }\n    // extract value into result if we found an intersection.\n    // we find an intersection if the frequency counter matches the count of the remaining arrays.\n    if (found) {\n      into(results, res.map((n, i) => {\n        return n === input.length - 1 ? [lhs[i], stable[i]] : MISSING;\n      }).filter(n => n !== MISSING));\n    }\n  });\n  return results.sort((a, b) => {\n    const [_i, [u, m]] = a;\n    const [_j, [v, n]] = b;\n    const r = compare(u, v);\n    if (r !== 0) return r;\n    return compare(m, n);\n  }).map(v => v[0]);\n}\n/**\n * Flatten the array\n *\n * @param {Array} xs The array to flatten\n * @param {Number} depth The number of nested lists to iterate\n */\nexport function flatten(xs, depth = 0) {\n  const arr = new Array();\n  function flatten2(ys, n) {\n    for (let i = 0, len = ys.length; i < len; i++) {\n      if (isArray(ys[i]) && (n > 0 || n < 0)) {\n        flatten2(ys[i], Math.max(-1, n - 1));\n      } else {\n        arr.push(ys[i]);\n      }\n    }\n  }\n  flatten2(xs, depth);\n  return arr;\n}\n/** Returns all members of the value in an object literal. */\nconst getMembersOf = value => {\n  let [proto, names] = [Object.getPrototypeOf(value), Object.getOwnPropertyNames(value)];\n  // save effective prototype\n  let activeProto = proto;\n  // traverse the prototype hierarchy until we get property names or hit the bottom prototype.\n  while (!names.length && proto !== OBJECT_PROTO && proto !== ARRAY_PROTO) {\n    activeProto = proto;\n    names = Object.getOwnPropertyNames(proto);\n    proto = Object.getPrototypeOf(proto);\n  }\n  const o = {};\n  names.forEach(k => o[k] = value[k]);\n  return [o, activeProto];\n};\n/**\n * Determine whether two values are the same or strictly equivalent.\n * Checking whether values are the same only applies to built in objects.\n * For user-defined objects this checks for only referential equality so\n * two different instances with the same values are not equal.\n *\n * @param  {*}  a The first value\n * @param  {*}  b The second value\n * @return {Boolean}   Result of comparison\n */\nexport function isEqual(a, b) {\n  const args = [[a, b]];\n  while (args.length > 0) {\n    [a, b] = args.pop();\n    // strictly equal must be equal. matches referentially equal values.\n    if (a === b) continue;\n    // unequal types and functions (unless referentially equivalent) cannot be equal.\n    const ctor = getConstructor(a);\n    if (ctor !== getConstructor(b) || isFunction(a)) return false;\n    // string convertable types\n    if (STRING_CONVERTERS.has(ctor)) {\n      const str = STRING_CONVERTERS.get(ctor);\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      if (str(a) !== str(b)) return false;\n      // values are equal, so move next\n      continue;\n    }\n    // handle array and object types\n    if (ctor === Array || ctor === Object) {\n      const ka = Object.keys(a);\n      const kb = Object.keys(b);\n      if (ka.length !== kb.length) return false;\n      if (new Set(ka.concat(kb)).size != ka.length) return false;\n      for (const k of ka) args.push([a[k], b[k]]);\n      // move next\n      continue;\n    }\n    // user-defined type detected.\n    // we don't try to compare user-defined types (even though we could...shhhh).\n    return false;\n  }\n  // nothing left to compare\n  return !args.length;\n}\n/**\n * Return a new unique version of the collection\n * @param  {Array} input The input collection\n * @return {Array}\n */\nexport function unique(input, hashFunction = DEFAULT_HASH_FUNCTION) {\n  const result = input.map(_ => MISSING);\n  buildHashIndex(input, hashFunction).forEach((v, _) => {\n    v.forEach(i => result[i] = input[i]);\n  });\n  return result.filter(v => v !== MISSING);\n}\n/**\n * Encode value to string using a simple non-colliding stable scheme.\n * Handles user-defined types by processing keys on first non-empty prototype.\n * If a user-defined type provides a \"toJSON\" function, it is used.\n *\n * @param value The value to convert to a string representation.\n * @returns {String}\n */\nexport function stringify(value) {\n  const cycle = new Set();\n  // stringify with cycle check\n  const str = v => {\n    const ctor = getConstructor(v);\n    // string convertable types\n    if (STRING_CONVERTERS.has(ctor)) {\n      return STRING_CONVERTERS.get(ctor)(v);\n    }\n    const tag = ctor === Object ? \"\" : ctor.name;\n    // handle JSONable objects.\n    if (isFunction(v[\"toJSON\"])) {\n      return `${tag}(${JSON.stringify(v)})`;\n    }\n    // handle cycles\n    if (cycle.has(v)) throw CYCLE_FOUND_ERROR;\n    cycle.add(v);\n    try {\n      // handle array\n      if (ctor === Array) {\n        return \"[\" + v.map(str).join(\",\") + \"]\";\n      }\n      // handle user-defined object\n      if (ctor !== Object) {\n        // handle user-defined types or object literals.\n        const [members, _] = getMembersOf(v);\n        // custom type derived from array.\n        if (isArray(v)) {\n          // include other members as part of array elements.\n          return `${tag}${str([...v, members])}`;\n        }\n        // get members as literal\n        v = members;\n      }\n      const objKeys = Object.keys(v);\n      objKeys.sort();\n      return `${tag}{` + objKeys.map(k => `${k}:${str(v[k])}`).join(\",\") + \"}\";\n    } finally {\n      cycle.delete(v);\n    }\n  };\n  // convert to string\n  return str(value);\n}\n/**\n * Generate hash code\n * This selected function is the result of benchmarking various hash functions.\n * This version performs well and can hash 10^6 documents in ~3s with on average 100 collisions.\n *\n * @param value\n * @returns {number|null}\n */\nexport function hashCode(value, hashFunction) {\n  hashFunction = hashFunction || DEFAULT_HASH_FUNCTION;\n  if (isNil(value)) return null;\n  return hashFunction(value).toString();\n}\n/**\n * Returns a (stably) sorted copy of list, ranked in ascending order by the results of running each value through iteratee\n *\n * This implementation treats null/undefined sort keys as less than every other type\n *\n * @param {Array}   collection\n * @param {Function} keyFn The sort key function used to resolve sort keys\n * @param {Function} comparator The comparator function to use for comparing keys. Defaults to standard comparison via `compare(...)`\n * @return {Array} Returns a new sorted array by the given key and comparator function\n */\nexport function sortBy(collection, keyFn, comparator = compare) {\n  if (isEmpty(collection)) return collection;\n  const sorted = new Array();\n  const result = new Array();\n  for (let i = 0; i < collection.length; i++) {\n    const obj = collection[i];\n    const key = keyFn(obj, i);\n    if (isNil(key)) {\n      result.push(obj);\n    } else {\n      sorted.push([key, obj]);\n    }\n  }\n  // use native array sorting but enforce stableness\n  sorted.sort((a, b) => comparator(a[0], b[0]));\n  return into(result, sorted.map(o => o[1]));\n}\n/**\n * Groups the collection into sets by the returned key\n *\n * @param collection\n * @param keyFn {Function} to compute the group key of an item in the collection\n * @returns {GroupByOutput}\n */\nexport function groupBy(collection, keyFn, hashFunction = DEFAULT_HASH_FUNCTION) {\n  if (collection.length < 1) return new Map();\n  // map of hash to collided values\n  const lookup = new Map();\n  // map of raw key values to objects.\n  const result = new Map();\n  for (let i = 0; i < collection.length; i++) {\n    const obj = collection[i];\n    const key = keyFn(obj, i);\n    const hash = hashCode(key, hashFunction);\n    if (hash === null) {\n      if (result.has(null)) {\n        result.get(null).push(obj);\n      } else {\n        result.set(null, [obj]);\n      }\n    } else {\n      // find if we can match a hash for which the value is equivalent.\n      // this is used to deal with collisions.\n      const existingKey = lookup.has(hash) ? lookup.get(hash).find(k => isEqual(k, key)) : null;\n      // collision detected or first time seeing key\n      if (isNil(existingKey)) {\n        // collision detected or first entry so we create a new group.\n        result.set(key, [obj]);\n        // upload the lookup with the collided key\n        if (lookup.has(hash)) {\n          lookup.get(hash).push(key);\n        } else {\n          lookup.set(hash, [key]);\n        }\n      } else {\n        // key exists\n        result.get(existingKey).push(obj);\n      }\n    }\n  }\n  return result;\n}\n// max elements to push.\n// See argument limit https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\nconst MAX_ARRAY_PUSH = 50000;\n/**\n * Merge elements into the dest\n *\n * @param {*} target The target object\n * @param {*} rest The array of elements to merge into dest\n */\nexport function into(target, ...rest) {\n  if (target instanceof Array) {\n    return rest.reduce((acc, arr) => {\n      // push arrary in batches to handle large inputs\n      let i = Math.ceil(arr.length / MAX_ARRAY_PUSH);\n      let begin = 0;\n      while (i-- > 0) {\n        Array.prototype.push.apply(acc, arr.slice(begin, begin + MAX_ARRAY_PUSH));\n        begin += MAX_ARRAY_PUSH;\n      }\n      return acc;\n    }, target);\n  } else {\n    // merge objects. same behaviour as Object.assign\n    return rest.filter(isObjectLike).reduce((acc, item) => {\n      Object.assign(acc, item);\n      return acc;\n    }, target);\n  }\n}\n/**\n * This is a generic memoization function\n *\n * This implementation uses a cache independent of the function being memoized\n * to allow old values to be garbage collected when the memoized function goes out of scope.\n *\n * @param {*} fn The function object to memoize\n */\nexport function memoize(fn, hashFunction = DEFAULT_HASH_FUNCTION) {\n  return (memo => {\n    return (...args) => {\n      const key = hashCode(args, hashFunction) || \"\";\n      if (!has(memo, key)) {\n        memo[key] = fn.apply(this, args);\n      }\n      return memo[key];\n    };\n  })({\n    /* storage */\n  });\n}\n// mingo internal\n/**\n * Retrieve the value of a given key on an object\n * @param obj\n * @param key\n * @returns {*}\n * @private\n */\nfunction getValue(obj, key) {\n  return isObjectLike(obj) ? obj[key] : undefined;\n}\n/**\n * Unwrap a single element array to specified depth\n * @param {Array} arr\n * @param {Number} depth\n */\nfunction unwrap(arr, depth) {\n  if (depth < 1) return arr;\n  while (depth-- && arr.length === 1) arr = arr[0];\n  return arr;\n}\n/**\n * Resolve the value of the field (dot separated) on the given object\n * @param obj {Object} the object context\n * @param selector {String} dot separated path to field\n * @returns {*}\n */\nexport function resolve(obj, selector, options) {\n  let depth = 0;\n  function resolve2(o, path) {\n    let value = o;\n    for (let i = 0; i < path.length; i++) {\n      const field = path[i];\n      const isText = /^\\d+$/.exec(field) === null;\n      // using instanceof to aid typescript compiler\n      if (isText && value instanceof Array) {\n        // On the first iteration, we check if we received a stop flag.\n        // If so, we stop to prevent iterating over a nested array value\n        // on consecutive object keys in the selector.\n        if (i === 0 && depth > 0) break;\n        depth += 1;\n        // only look at the rest of the path\n        const subpath = path.slice(i);\n        value = value.reduce((acc, item) => {\n          const v = resolve2(item, subpath);\n          if (v !== undefined) acc.push(v);\n          return acc;\n        }, []);\n        break;\n      } else {\n        value = getValue(value, field);\n      }\n      if (value === undefined) break;\n    }\n    return value;\n  }\n  const result = JS_SIMPLE_TYPES.has(getType(obj).toLowerCase()) ? obj : resolve2(obj, selector.split(\".\"));\n  return result instanceof Array && (options === null || options === void 0 ? void 0 : options.unwrapArray) ? unwrap(result, depth) : result;\n}\n/**\n * Returns the full object to the resolved value given by the selector.\n * This function excludes empty values as they aren't practically useful.\n *\n * @param obj {Object} the object context\n * @param selector {String} dot separated path to field\n */\nexport function resolveGraph(obj, selector, options) {\n  const names = selector.split(\".\");\n  const key = names[0];\n  // get the next part of the selector\n  const next = names.slice(1).join(\".\");\n  const isIndex = /^\\d+$/.exec(key) !== null;\n  const hasNext = names.length > 1;\n  let result;\n  let value;\n  if (obj instanceof Array) {\n    if (isIndex) {\n      result = getValue(obj, Number(key));\n      if (hasNext) {\n        result = resolveGraph(result, next, options);\n      }\n      result = [result];\n    } else {\n      result = [];\n      for (const item of obj) {\n        value = resolveGraph(item, selector, options);\n        if (options === null || options === void 0 ? void 0 : options.preserveMissing) {\n          if (value === undefined) {\n            value = MISSING;\n          }\n          result.push(value);\n        } else if (value !== undefined) {\n          result.push(value);\n        }\n      }\n    }\n  } else {\n    value = getValue(obj, key);\n    if (hasNext) {\n      value = resolveGraph(value, next, options);\n    }\n    if (value === undefined) return undefined;\n    result = (options === null || options === void 0 ? void 0 : options.preserveKeys) ? Object.assign({}, obj) : {};\n    result[key] = value;\n  }\n  return result;\n}\n/**\n * Filter out all MISSING values from the object in-place\n *\n * @param obj The object to filter\n */\nexport function filterMissing(obj) {\n  if (obj instanceof Array) {\n    for (let i = obj.length - 1; i >= 0; i--) {\n      if (obj[i] === MISSING) {\n        obj.splice(i, 1);\n      } else {\n        filterMissing(obj[i]);\n      }\n    }\n  } else if (isObject(obj)) {\n    for (const k in obj) {\n      if (has(obj, k)) {\n        filterMissing(obj[k]);\n      }\n    }\n  }\n}\nconst NUMBER_RE = /^\\d+$/;\n/**\n * Walk the object graph and execute the given transform function\n *\n * @param  {Object|Array} obj   The object to traverse.\n * @param  {String} selector    The selector to navigate.\n * @param  {Callback} fn Callback to execute for value at the end the traversal.\n * @param  {WalkOptions} options The opetions to use for the function.\n * @return {*}\n */\nexport function walk(obj, selector, fn, options) {\n  const names = selector.split(\".\");\n  const key = names[0];\n  const next = names.slice(1).join(\".\");\n  if (names.length === 1) {\n    if (isObject(obj) || isArray(obj) && NUMBER_RE.test(key)) {\n      fn(obj, key);\n    }\n  } else {\n    // force the rest of the graph while traversing\n    if ((options === null || options === void 0 ? void 0 : options.buildGraph) && isNil(obj[key])) {\n      obj[key] = {};\n    }\n    // get the next item\n    const item = obj[key];\n    // nothing more to do\n    if (!item) return;\n    // we peek to see if next key is an array index.\n    const isNextArrayIndex = !!(names.length > 1 && NUMBER_RE.test(names[1]));\n    // if we have an array value but the next key is not an index and the 'descendArray' option is set,\n    // we walk each item in the array separately. This allows for handling traversing keys for objects\n    // nested within an array.\n    //\n    // Eg: Given { array: [ {k:1}, {k:2}, {k:3} ] }\n    //  - individual objecs can be traversed with \"array.k\"\n    //  - a specific object can be traversed with \"array.1\"\n    if (item instanceof Array && (options === null || options === void 0 ? void 0 : options.descendArray) && !isNextArrayIndex) {\n      item.forEach(e => walk(e, next, fn, options));\n    } else {\n      walk(item, next, fn, options);\n    }\n  }\n}\n/**\n * Set the value of the given object field\n *\n * @param obj {Object|Array} the object context\n * @param selector {String} path to field\n * @param value {*} the value to set. if it is function, it is invoked with the old value and must return the new value.\n */\nexport function setValue(obj, selector, value) {\n  walk(obj, selector, (item, key) => {\n    item[key] = isFunction(value) ? value(item[key]) : value;\n  }, {\n    buildGraph: true\n  });\n}\n/**\n * Removes an element from the container.\n * If the selector resolves to an array and the leaf is a non-numeric key,\n * the remove operation will be performed on objects of the array.\n *\n * @param obj {ArrayOrObject} object or array\n * @param selector {String} dot separated path to element to remove\n */\nexport function removeValue(obj, selector, options) {\n  walk(obj, selector, (item, key) => {\n    if (item instanceof Array) {\n      if (/^\\d+$/.test(key)) {\n        item.splice(parseInt(key), 1);\n      } else if (options && options.descendArray) {\n        for (const elem of item) {\n          if (isObject(elem)) {\n            delete elem[key];\n          }\n        }\n      }\n    } else if (isObject(item)) {\n      delete item[key];\n    }\n  }, options);\n}\nconst OPERATOR_NAME_PATTERN = /^\\$[a-zA-Z0-9_]+$/;\n/**\n * Check whether the given name passes for an operator. We assume AnyVal field name starting with '$' is an operator.\n * This is cheap and safe to do since keys beginning with '$' should be reserved for internal use.\n * @param {String} name\n */\nexport function isOperator(name) {\n  return OPERATOR_NAME_PATTERN.test(name);\n}\n/**\n * Simplify expression for easy evaluation with query operators map\n * @param expr\n * @returns {*}\n */\nexport function normalize(expr) {\n  // normalized primitives\n  if (JS_SIMPLE_TYPES.has(getType(expr).toLowerCase())) {\n    return isRegExp(expr) ? {\n      $regex: expr\n    } : {\n      $eq: expr\n    };\n  }\n  // normalize object expression. using ObjectLike handles custom types\n  if (isObjectLike(expr)) {\n    const exprObj = expr;\n    // no valid query operator found, so we do simple comparison\n    if (!Object.keys(exprObj).some(isOperator)) {\n      return {\n        $eq: expr\n      };\n    }\n    // ensure valid regex\n    if (has(expr, \"$regex\")) {\n      const newExpr = Object.assign({}, expr);\n      newExpr[\"$regex\"] = new RegExp(expr[\"$regex\"], expr[\"$options\"]);\n      delete newExpr[\"$options\"];\n      return newExpr;\n    }\n  }\n  return expr;\n}\n/**\n * Find the insert index for the given key in a sorted array.\n *\n * @param {*} sorted The sorted array to search\n * @param {*} item The search key\n */\nexport function findInsertIndex(sorted, item) {\n  // uses binary search\n  let lo = 0;\n  let hi = sorted.length - 1;\n  while (lo <= hi) {\n    const mid = Math.round(lo + (hi - lo) / 2);\n    if (compare(item, sorted[mid]) < 0) {\n      hi = mid - 1;\n    } else if (compare(item, sorted[mid]) > 0) {\n      lo = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n  return lo;\n}", "import { MingoError } from \"./types\";\nimport { assert, has, isArray, isFunction, isNil, isObject, isObjectLike, isOperator, isString, resolve } from \"./util\";\n/**\n * This controls how input and output documents are processed to meet different application needs.\n * Each mode has different trade offs for; immutability, reference sharing, and performance.\n */\nexport var ProcessingMode;\n(function (ProcessingMode) {\n  /**\n   * Clone inputs prior to processing, and the outputs if some objects graphs may be shared.\n   * Use this option to keep input collection immutable and to get distinct output objects.\n   *\n   * Note: This option is expensive and reduces performance.\n   */\n  ProcessingMode[\"CLONE_ALL\"] = \"CLONE_ALL\";\n  /**\n   * Clones inputs prior to processing.\n   * This option will return output objects with shared graphs in their path if specific operators are used.\n   * Use this option to keep the input collection immutable.\n   *\n   */\n  ProcessingMode[\"CLONE_INPUT\"] = \"CLONE_INPUT\";\n  /**\n   * Clones the output to return distinct objects with no shared paths.\n   * This option modifies the input collection and during processing.\n   */\n  ProcessingMode[\"CLONE_OUTPUT\"] = \"CLONE_OUTPUT\";\n  /**\n   * Turn off cloning and modifies the input collection as needed.\n   * This option will also return output objects with shared paths in their graph when specific operators are used.\n   * This option provides the greatest speedup for the biggest tradeoff.\n   * When using the aggregation pipeline, you can use the \"$out\" operator to collect immutable intermediate results.\n   *\n   * @default\n   */\n  ProcessingMode[\"CLONE_OFF\"] = \"CLONE_OFF\";\n})(ProcessingMode || (ProcessingMode = {}));\n/** Custom type to facilitate type checking for global options */\nexport class ComputeOptions {\n  constructor(_opts, /** Reference to the root object when processing subgraphs of the object. */\n  _root, _local, /** The current time in milliseconds. Remains the same throughout all stages of the aggregation pipeline. */\n  timestamp = Date.now()) {\n    this._opts = _opts;\n    this._root = _root;\n    this._local = _local;\n    this.timestamp = timestamp;\n    this.update(_root, _local);\n  }\n  /**\n   * Initialize new ComputeOptions.\n   *\n   * @param options\n   * @param root\n   * @param local\n   * @returns {ComputeOptions}\n   */\n  static init(options, root, local) {\n    return options instanceof ComputeOptions ? new ComputeOptions(options._opts, isNil(options.root) ? root : options.root, Object.assign({}, options.local, local)) : new ComputeOptions(options, root, local);\n  }\n  /** Updates the internal mutable state. */\n  update(root, local) {\n    var _a;\n    // NOTE: this is done for efficiency to avoid creating too many intermediate options objects.\n    this._root = root;\n    this._local = local ? Object.assign({}, local, {\n      variables: Object.assign({}, (_a = this._local) === null || _a === void 0 ? void 0 : _a.variables, local === null || local === void 0 ? void 0 : local.variables)\n    }) : local;\n    return this;\n  }\n  getOptions() {\n    return Object.freeze(Object.assign(Object.assign({}, this._opts), {\n      context: Context.from(this._opts.context)\n    }));\n  }\n  get root() {\n    return this._root;\n  }\n  get local() {\n    return this._local;\n  }\n  get idKey() {\n    return this._opts.idKey;\n  }\n  get collation() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.collation;\n  }\n  get processingMode() {\n    var _a;\n    return ((_a = this._opts) === null || _a === void 0 ? void 0 : _a.processingMode) || ProcessingMode.CLONE_OFF;\n  }\n  get useStrictMode() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.useStrictMode;\n  }\n  get scriptEnabled() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.scriptEnabled;\n  }\n  get useGlobalContext() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.useGlobalContext;\n  }\n  get hashFunction() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.hashFunction;\n  }\n  get collectionResolver() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.collectionResolver;\n  }\n  get jsonSchemaValidator() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.jsonSchemaValidator;\n  }\n  get variables() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.variables;\n  }\n  get context() {\n    var _a;\n    return (_a = this._opts) === null || _a === void 0 ? void 0 : _a.context;\n  }\n}\n/**\n * Creates an Option from another where required keys are initialized.\n * @param options Options\n */\nexport function initOptions(options) {\n  return options instanceof ComputeOptions ? options.getOptions() : Object.freeze(Object.assign(Object.assign({\n    idKey: \"_id\",\n    scriptEnabled: true,\n    useStrictMode: true,\n    useGlobalContext: true,\n    processingMode: ProcessingMode.CLONE_OFF\n  }, options), {\n    context: (options === null || options === void 0 ? void 0 : options.context) ? Context.from(options === null || options === void 0 ? void 0 : options.context) : Context.init({})\n  }));\n}\n/**\n * The different groups of operators\n */\nexport var OperatorType;\n(function (OperatorType) {\n  OperatorType[\"ACCUMULATOR\"] = \"accumulator\";\n  OperatorType[\"EXPRESSION\"] = \"expression\";\n  OperatorType[\"PIPELINE\"] = \"pipeline\";\n  OperatorType[\"PROJECTION\"] = \"projection\";\n  OperatorType[\"QUERY\"] = \"query\";\n  OperatorType[\"WINDOW\"] = \"window\";\n})(OperatorType || (OperatorType = {}));\nexport class Context {\n  constructor(ops) {\n    this.operators = {\n      [OperatorType.ACCUMULATOR]: {},\n      [OperatorType.EXPRESSION]: {},\n      [OperatorType.PIPELINE]: {},\n      [OperatorType.PROJECTION]: {},\n      [OperatorType.QUERY]: {},\n      [OperatorType.WINDOW]: {}\n    };\n    for (const [type, operators] of Object.entries(ops)) {\n      this.addOperators(type, operators);\n    }\n  }\n  static init(ops = {}) {\n    return new Context(ops);\n  }\n  static from(ctx) {\n    return new Context(ctx.operators);\n  }\n  addOperators(type, ops) {\n    for (const [name, fn] of Object.entries(ops)) {\n      if (!this.getOperator(type, name)) {\n        this.operators[type][name] = fn;\n      }\n    }\n    return this;\n  }\n  // register\n  addAccumulatorOps(ops) {\n    return this.addOperators(OperatorType.ACCUMULATOR, ops);\n  }\n  addExpressionOps(ops) {\n    return this.addOperators(OperatorType.EXPRESSION, ops);\n  }\n  addQueryOps(ops) {\n    return this.addOperators(OperatorType.QUERY, ops);\n  }\n  addPipelineOps(ops) {\n    return this.addOperators(OperatorType.PIPELINE, ops);\n  }\n  addProjectionOps(ops) {\n    return this.addOperators(OperatorType.PROJECTION, ops);\n  }\n  addWindowOps(ops) {\n    return this.addOperators(OperatorType.WINDOW, ops);\n  }\n  // getters\n  getOperator(type, name) {\n    return type in this.operators ? this.operators[type][name] || null : null;\n  }\n}\n// global context\nconst GLOBAL_CONTEXT = Context.init();\n/**\n * Register fully specified operators for the given operator class.\n *\n * @param type The operator type\n * @param operators Map of the operators\n */\nexport function useOperators(type, operators) {\n  for (const [name, fn] of Object.entries(operators)) {\n    assert(isFunction(fn) && isOperator(name), `'${name}' is not a valid operator`);\n    const currentFn = getOperator(type, name, null);\n    assert(!currentFn || fn === currentFn, `${name} already exists for '${type}' operators. Cannot change operator function once registered.`);\n  }\n  // toss the operator salad :)\n  switch (type) {\n    case OperatorType.ACCUMULATOR:\n      GLOBAL_CONTEXT.addAccumulatorOps(operators);\n      break;\n    case OperatorType.EXPRESSION:\n      GLOBAL_CONTEXT.addExpressionOps(operators);\n      break;\n    case OperatorType.PIPELINE:\n      GLOBAL_CONTEXT.addPipelineOps(operators);\n      break;\n    case OperatorType.PROJECTION:\n      GLOBAL_CONTEXT.addProjectionOps(operators);\n      break;\n    case OperatorType.QUERY:\n      GLOBAL_CONTEXT.addQueryOps(operators);\n      break;\n    case OperatorType.WINDOW:\n      GLOBAL_CONTEXT.addWindowOps(operators);\n      break;\n  }\n}\n/**\n * Overrides the current global context with this new one.\n *\n * @param context The new context to override the global one with.\n */\n// export const setGlobalContext = (context: Context): void => {\n//   GLOBAL_CONTEXT = context;\n// };\n/**\n * Returns the operator function or undefined if it is not found\n * @param type Type of operator\n * @param operator Name of the operator\n */\nexport function getOperator(type, operator, options) {\n  const {\n    context: ctx,\n    useGlobalContext: fallback\n  } = options || {};\n  const fn = ctx ? ctx.getOperator(type, operator) : null;\n  return !fn && fallback ? GLOBAL_CONTEXT.getOperator(type, operator) : fn;\n}\n/* eslint-disable unused-imports/no-unused-vars-ts */\n/**\n * Implementation of system variables\n * @type {Object}\n */\nconst systemVariables = {\n  $$ROOT(_obj, _expr, options) {\n    return options.root;\n  },\n  $$CURRENT(obj, _expr, _options) {\n    return obj;\n  },\n  $$REMOVE(_obj, _expr, _options) {\n    return undefined;\n  },\n  $$NOW(_obj, _expr, options) {\n    return new Date(options.timestamp);\n  }\n};\n/**\n * Implementation of $redact variables\n *\n * Each function accepts 3 arguments (obj, expr, options)\n *\n * @type {Object}\n */\nconst redactVariables = {\n  $$KEEP(obj, _expr, _options) {\n    return obj;\n  },\n  $$PRUNE(_obj, _expr, _options) {\n    return undefined;\n  },\n  $$DESCEND(obj, expr, options) {\n    // traverse nested documents iff there is a $cond\n    if (!has(expr, \"$cond\")) return obj;\n    let result;\n    for (const [key, current] of Object.entries(obj)) {\n      if (isObjectLike(current)) {\n        if (current instanceof Array) {\n          const array = [];\n          for (let elem of current) {\n            if (isObject(elem)) {\n              elem = redact(elem, expr, options.update(elem));\n            }\n            if (!isNil(elem)) {\n              array.push(elem);\n            }\n          }\n          result = array;\n        } else {\n          result = redact(current, expr, options.update(current));\n        }\n        if (isNil(result)) {\n          delete obj[key]; // pruned result\n        } else {\n          obj[key] = result;\n        }\n      }\n    }\n    return obj;\n  }\n};\n/* eslint-enable unused-imports/no-unused-vars-ts */\n/**\n * Computes the value of the expression on the object for the given operator\n *\n * @param obj the current object from the collection\n * @param expr the expression for the given field\n * @param operator the operator to resolve the field with\n * @param options {Object} extra options\n * @returns {*}\n */\nexport function computeValue(obj, expr, operator, options) {\n  var _a;\n  // ensure valid options exist on first invocation\n  const copts = ComputeOptions.init(options, obj);\n  operator = operator || \"\";\n  if (isOperator(operator)) {\n    // if the field of the object is a valid operator\n    const callExpression = getOperator(OperatorType.EXPRESSION, operator, options);\n    if (callExpression) return callExpression(obj, expr, copts);\n    // we also handle $group accumulator operators\n    const callAccumulator = getOperator(OperatorType.ACCUMULATOR, operator, options);\n    if (callAccumulator) {\n      // if object is not an array, first try to compute using the expression\n      if (!(obj instanceof Array)) {\n        obj = computeValue(obj, expr, null, copts);\n        expr = null;\n      }\n      // validate that we have an array\n      assert(obj instanceof Array, `'${operator}' target must be an array.`);\n      // for accumulators, we use the global options since the root is specific to each element within array.\n      return callAccumulator(obj, expr,\n      // reset the root object for accumulators.\n      copts.update(null, copts.local));\n    }\n    // operator was not found\n    throw new MingoError(`operator '${operator}' is not registered`);\n  }\n  // if expr is a string and begins with \"$$\", then we have a variable.\n  //  this can be one of; redact variable, system variable, user-defined variable.\n  //  we check and process them in that order.\n  //\n  // if expr begins only a single \"$\", then it is a path to a field on the object.\n  if (isString(expr) && expr.length > 0 && expr[0] === \"$\") {\n    // we return redact variables as literals\n    if (has(redactVariables, expr)) {\n      return expr;\n    }\n    // default to root for resolving path.\n    let context = copts.root;\n    // handle selectors with explicit prefix\n    const arr = expr.split(\".\");\n    if (has(systemVariables, arr[0])) {\n      // set 'root' only the first time it is required to be used for all subsequent calls\n      // if it already available on the options, it will be used\n      context = systemVariables[arr[0]](obj, null, copts);\n      expr = expr.slice(arr[0].length + 1); //  +1 for '.'\n    } else if (arr[0].slice(0, 2) === \"$$\") {\n      // handle user-defined variables\n      context = Object.assign({}, copts.variables,\n      // global vars\n      // current item is added before local variables because the binding may be changed.\n      {\n        this: obj\n      }, (_a = copts.local) === null || _a === void 0 ? void 0 : _a.variables // local vars\n      );\n      const prefix = arr[0].slice(2);\n      assert(has(context, prefix), `Use of undefined variable: ${prefix}`);\n      expr = expr.slice(2);\n    } else {\n      // 'expr' is a path to a field on the object.\n      expr = expr.slice(1);\n    }\n    if (expr === \"\") return context;\n    return resolve(context, expr);\n  }\n  // check and return value if already in a resolved state\n  if (isArray(expr)) {\n    return expr.map(item => computeValue(obj, item, null, copts));\n  } else if (isObject(expr)) {\n    const result = {};\n    for (const [key, val] of Object.entries(expr)) {\n      result[key] = computeValue(obj, val, key, copts);\n      // must run ONLY one aggregate operator per expression\n      // if so, return result of the computed value\n      if ([OperatorType.EXPRESSION, OperatorType.ACCUMULATOR].some(t => !!getOperator(t, key, options))) {\n        // there should be only one operator\n        assert(Object.keys(expr).length === 1, \"Invalid aggregation expression '\" + JSON.stringify(expr) + \"'\");\n        return result[key];\n      }\n    }\n    return result;\n  }\n  return expr;\n}\n/**\n * Redact an object\n * @param  {Object} obj The object to redact\n * @param  {*} expr The redact expression\n * @param  {*} options  Options for value\n * @return {*} returns the result of the redacted object\n */\nexport function redact(obj, expr, options) {\n  const result = computeValue(obj, expr, null, options);\n  return has(redactVariables, result) ? redactVariables[result](obj, expr, options) : result;\n}", "import { MingoError } from \"./types\";\n/**\n * Returns an iterator\n * @param {*} source An iterable source (Array, Function, Generator, or Iterator)\n */\nexport function Lazy(source) {\n  return source instanceof Iterator ? source : new Iterator(source);\n}\nexport function compose(...iterators) {\n  let index = 0;\n  return Lazy(() => {\n    while (index < iterators.length) {\n      const o = iterators[index].next();\n      if (!o.done) return o;\n      index++;\n    }\n    return {\n      done: true\n    };\n  });\n}\n/**\n * Checks whether the given object is compatible with a generator i.e Object{next:Function}\n * @param {*} o An object\n */\nfunction isGenerator(o) {\n  return !!o && typeof o === \"object\" && (o === null || o === void 0 ? void 0 : o.next) instanceof Function;\n}\nfunction dropItem(array, i) {\n  const rest = array.slice(i + 1);\n  array.splice(i);\n  Array.prototype.push.apply(array, rest);\n}\n// stop iteration error\nconst DONE = new Error();\n// Lazy function actions\nvar Action;\n(function (Action) {\n  Action[Action[\"MAP\"] = 0] = \"MAP\";\n  Action[Action[\"FILTER\"] = 1] = \"FILTER\";\n  Action[Action[\"TAKE\"] = 2] = \"TAKE\";\n  Action[Action[\"DROP\"] = 3] = \"DROP\";\n})(Action || (Action = {}));\nfunction createCallback(nextFn, iteratees, buffer) {\n  let done = false;\n  let index = -1;\n  let bufferIndex = 0; // index for the buffer\n  return function (storeResult) {\n    // special hack to collect all values into buffer\n    try {\n      outer: while (!done) {\n        let o = nextFn();\n        index++;\n        let i = -1;\n        const size = iteratees.length;\n        let innerDone = false;\n        while (++i < size) {\n          const r = iteratees[i];\n          switch (r.action) {\n            case Action.MAP:\n              o = r.func(o, index);\n              break;\n            case Action.FILTER:\n              if (!r.func(o, index)) continue outer;\n              break;\n            case Action.TAKE:\n              --r.count;\n              if (!r.count) innerDone = true;\n              break;\n            case Action.DROP:\n              --r.count;\n              if (!r.count) dropItem(iteratees, i);\n              continue outer;\n            default:\n              break outer;\n          }\n        }\n        done = innerDone;\n        if (storeResult) {\n          buffer[bufferIndex++] = o;\n        } else {\n          return {\n            value: o,\n            done: false\n          };\n        }\n      }\n    } catch (e) {\n      if (e !== DONE) throw e;\n    }\n    done = true;\n    return {\n      done\n    };\n  };\n}\n/**\n * A lazy collection iterator yields a single value at a time upon request.\n */\nexport class Iterator {\n  /**\n   * @param {*} source An iterable object or function.\n   *    Array - return one element per cycle\n   *    Object{next:Function} - call next() for the next value (this also handles generator functions)\n   *    Function - call to return the next value\n   * @param {Function} fn An optional transformation function\n   */\n  constructor(source) {\n    this.iteratees = [];\n    this.yieldedValues = [];\n    this.isDone = false;\n    let nextVal;\n    if (source instanceof Function) {\n      // make iterable\n      source = {\n        next: source\n      };\n    }\n    if (isGenerator(source)) {\n      const src = source;\n      nextVal = () => {\n        const o = src.next();\n        if (o.done) throw DONE;\n        return o.value;\n      };\n    } else if (source instanceof Array) {\n      const data = source;\n      const size = data.length;\n      let index = 0;\n      nextVal = () => {\n        if (index < size) return data[index++];\n        throw DONE;\n      };\n    } else if (!(source instanceof Function)) {\n      throw new MingoError(`Lazy must be initialized with an array, generator, or function.`);\n    }\n    // create next function\n    this.getNext = createCallback(nextVal, this.iteratees, this.yieldedValues);\n  }\n  /**\n   * Add an iteratee to this lazy sequence\n   */\n  push(action, value) {\n    if (typeof value === \"function\") {\n      this.iteratees.push({\n        action,\n        func: value\n      });\n    } else if (typeof value === \"number\") {\n      this.iteratees.push({\n        action,\n        count: value\n      });\n    }\n    return this;\n  }\n  next() {\n    return this.getNext();\n  }\n  // Iteratees methods\n  /**\n   * Transform each item in the sequence to a new value\n   * @param {Function} f\n   */\n  map(f) {\n    return this.push(Action.MAP, f);\n  }\n  /**\n   * Select only items matching the given predicate\n   * @param {Function} pred\n   */\n  filter(predicate) {\n    return this.push(Action.FILTER, predicate);\n  }\n  /**\n   * Take given numbe for values from sequence\n   * @param {Number} n A number greater than 0\n   */\n  take(n) {\n    return n > 0 ? this.push(Action.TAKE, n) : this;\n  }\n  /**\n   * Drop a number of values from the sequence\n   * @param {Number} n Number of items to drop greater than 0\n   */\n  drop(n) {\n    return n > 0 ? this.push(Action.DROP, n) : this;\n  }\n  // Transformations\n  /**\n   * Returns a new lazy object with results of the transformation\n   * The entire sequence is realized.\n   *\n   * @param {Callback<Source, RawArray>} fn Tranform function of type (Array) => (Any)\n   */\n  transform(fn) {\n    const self = this;\n    let iter;\n    return Lazy(() => {\n      if (!iter) {\n        iter = Lazy(fn(self.value()));\n      }\n      return iter.next();\n    });\n  }\n  // Terminal methods\n  /**\n   * Returns the fully realized values of the iterators.\n   * The return value will be an array unless `lazy.first()` was used.\n   * The realized values are cached for subsequent calls.\n   */\n  value() {\n    if (!this.isDone) {\n      this.isDone = this.getNext(true).done;\n    }\n    return this.yieldedValues;\n  }\n  /**\n   * Execute the funcion for each value. Will stop when an execution returns false.\n   * @param {Function} f\n   * @returns {Boolean} false iff `f` return false for AnyVal execution, otherwise true\n   */\n  each(f) {\n    for (;;) {\n      const o = this.next();\n      if (o.done) break;\n      if (f(o.value) === false) return false;\n    }\n    return true;\n  }\n  /**\n   * Returns the reduction of sequence according the reducing function\n   *\n   * @param {*} f a reducing function\n   * @param {*} initialValue\n   */\n  reduce(f, initialValue) {\n    let o = this.next();\n    if (initialValue === undefined && !o.done) {\n      initialValue = o.value;\n      o = this.next();\n    }\n    while (!o.done) {\n      initialValue = f(initialValue, o.value);\n      o = this.next();\n    }\n    return initialValue;\n  }\n  /**\n   * Returns the number of matched items in the sequence\n   */\n  size() {\n    return this.reduce((acc, _) => ++acc, 0);\n  }\n  [Symbol.iterator]() {\n    /* eslint-disable @typescript-eslint/no-unsafe-return */\n    return this;\n  }\n}", "import { getOperator, initOptions, OperatorType, ProcessingMode } from \"./core\";\nimport { Lazy } from \"./lazy\";\nimport { assert, cloneDeep, intersection, isEmpty } from \"./util\";\n/**\n * Provides functionality for the mongoDB aggregation pipeline\n *\n * @param pipeline an Array of pipeline operators\n * @param options An optional Options to pass the aggregator\n * @constructor\n */\nexport class Aggregator {\n  constructor(pipeline, options) {\n    this.pipeline = pipeline;\n    this.options = initOptions(options);\n  }\n  /**\n   * Returns an `Lazy` iterator for processing results of pipeline\n   *\n   * @param {*} collection An array or iterator object\n   * @returns {Iterator} an iterator object\n   */\n  stream(collection) {\n    let iterator = Lazy(collection);\n    const mode = this.options.processingMode;\n    if (mode == ProcessingMode.CLONE_ALL || mode == ProcessingMode.CLONE_INPUT) {\n      iterator.map(cloneDeep);\n    }\n    const pipelineOperators = new Array();\n    if (!isEmpty(this.pipeline)) {\n      // run aggregation pipeline\n      for (const operator of this.pipeline) {\n        const operatorKeys = Object.keys(operator);\n        const opName = operatorKeys[0];\n        const call = getOperator(OperatorType.PIPELINE, opName, this.options);\n        assert(operatorKeys.length === 1 && !!call, `invalid pipeline operator ${opName}`);\n        pipelineOperators.push(opName);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        iterator = call(iterator, operator[opName], this.options);\n      }\n    }\n    // operators that may share object graphs of inputs.\n    // we only need to clone the output for these since the objects will already be distinct for other operators.\n    if (mode == ProcessingMode.CLONE_OUTPUT || mode == ProcessingMode.CLONE_ALL && !!intersection([[\"$group\", \"$unwind\"], pipelineOperators]).length) {\n      iterator.map(cloneDeep);\n    }\n    return iterator;\n  }\n  /**\n   * Return the results of the aggregation as an array.\n   *\n   * @param {*} collection\n   * @param {*} query\n   */\n  run(collection) {\n    return this.stream(collection).value();\n  }\n}", "import { Aggregator } from \"./aggregator\";\nimport { compose, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\n/**\n * Cursor to iterate and perform filtering on matched objects.\n * This object must not be used directly. A cursor may be obtaine from calling `find()` on an instance of `Query`.\n *\n * @param collection The input source of the collection\n * @param predicate A predicate function to test documents\n * @param projection A projection criteria\n * @param options Options\n * @constructor\n */\nexport class Cursor {\n  constructor(source, predicate, projection, options) {\n    this.source = source;\n    this.predicate = predicate;\n    this.projection = projection;\n    this.options = options;\n    this.operators = [];\n    this.result = null;\n    this.buffer = [];\n  }\n  /** Returns the iterator from running the query */\n  fetch() {\n    if (this.result) return this.result;\n    // add projection operator\n    if (isObject(this.projection)) {\n      this.operators.push({\n        $project: this.projection\n      });\n    }\n    // filter collection\n    this.result = Lazy(this.source).filter(this.predicate);\n    if (this.operators.length > 0) {\n      this.result = new Aggregator(this.operators, this.options).stream(this.result);\n    }\n    return this.result;\n  }\n  /** Returns an iterator with the buffered data included */\n  fetchAll() {\n    const buffered = Lazy([...this.buffer]);\n    this.buffer = [];\n    return compose(buffered, this.fetch());\n  }\n  /**\n   * Return remaining objects in the cursor as an array. This method exhausts the cursor\n   * @returns {Array}\n   */\n  all() {\n    return this.fetchAll().value();\n  }\n  /**\n   * Returns the number of objects return in the cursor. This method exhausts the cursor\n   * @returns {Number}\n   */\n  count() {\n    return this.all().length;\n  }\n  /**\n   * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n   * @param {Number} n the number of results to skip.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  skip(n) {\n    this.operators.push({\n      $skip: n\n    });\n    return this;\n  }\n  /**\n   * Constrains the size of a cursor's result set.\n   * @param {Number} n the number of results to limit to.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  limit(n) {\n    this.operators.push({\n      $limit: n\n    });\n    return this;\n  }\n  /**\n   * Returns results ordered according to a sort specification.\n   * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  sort(modifier) {\n    this.operators.push({\n      $sort: modifier\n    });\n    return this;\n  }\n  /**\n   * Specifies the collation for the cursor returned by the `mingo.Query.find`\n   * @param {*} spec\n   */\n  collation(spec) {\n    this.options = Object.assign(Object.assign({}, this.options), {\n      collation: spec\n    });\n    return this;\n  }\n  /**\n   * Returns the next document in a cursor.\n   * @returns {Object | Boolean}\n   */\n  next() {\n    // yield value obtains in hasNext()\n    if (this.buffer.length > 0) {\n      return this.buffer.pop();\n    }\n    const o = this.fetch().next();\n    if (o.done) return;\n    return o.value;\n  }\n  /**\n   * Returns true if the cursor has documents and can be iterated.\n   * @returns {boolean}\n   */\n  hasNext() {\n    // there is a value in the buffer\n    if (this.buffer.length > 0) return true;\n    const o = this.fetch().next();\n    if (o.done) return false;\n    this.buffer.push(o.value);\n    return true;\n  }\n  /**\n   * Applies a function to each document in a cursor and collects the return values in an array.\n   * @param fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.all().map(fn);\n  }\n  /**\n   * Applies a JavaScript function for every document in a cursor.\n   * @param fn\n   */\n  forEach(fn) {\n    this.all().forEach(fn);\n  }\n  [Symbol.iterator]() {\n    return this.fetchAll();\n  }\n}", "import { getOperator, initOptions, OperatorType } from \"./core\";\nimport { Cursor } from \"./cursor\";\nimport { MingoError } from \"./types\";\nimport { assert, inArray, isObject, isOperator, normalize } from \"./util\";\n/**\n * An object used to filter input documents\n *\n * @param {Object} condition The condition for constructing predicates\n * @param {Options} options Options for use by operators\n * @constructor\n */\nexport class Query {\n  constructor(condition, options) {\n    this.condition = condition;\n    this.options = initOptions(options);\n    this.compiled = [];\n    this.compile();\n  }\n  compile() {\n    assert(isObject(this.condition), `query criteria must be an object: ${JSON.stringify(this.condition)}`);\n    const whereOperator = {};\n    for (const [field, expr] of Object.entries(this.condition)) {\n      if (\"$where\" === field) {\n        Object.assign(whereOperator, {\n          field: field,\n          expr: expr\n        });\n      } else if (inArray([\"$and\", \"$or\", \"$nor\", \"$expr\", \"$jsonSchema\"], field)) {\n        this.processOperator(field, field, expr);\n      } else {\n        // normalize expression\n        assert(!isOperator(field), `unknown top level operator: ${field}`);\n        for (const [operator, val] of Object.entries(normalize(expr))) {\n          this.processOperator(field, operator, val);\n        }\n      }\n      if (whereOperator.field) {\n        this.processOperator(whereOperator.field, whereOperator.field, whereOperator.expr);\n      }\n    }\n  }\n  processOperator(field, operator, value) {\n    const call = getOperator(OperatorType.QUERY, operator, this.options);\n    if (!call) {\n      throw new MingoError(`unknown query operator ${operator}`);\n    }\n    const fn = call(field, value, this.options);\n    this.compiled.push(fn);\n  }\n  /**\n   * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n   *\n   * @param obj The object to test\n   * @returns {boolean} True or false\n   */\n  test(obj) {\n    for (let i = 0, len = this.compiled.length; i < len; i++) {\n      if (!this.compiled[i](obj)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns a cursor to select matching documents from the input source.\n   *\n   * @param source A source providing a sequence of documents\n   * @param projection An optional projection criteria\n   * @returns {Cursor} A Cursor for iterating over the results\n   */\n  find(collection, projection) {\n    return new Cursor(collection, x => this.test(x), projection || {}, this.options);\n  }\n  /**\n   * Remove matched documents from the collection returning the remainder\n   *\n   * @param collection An array of documents\n   * @returns {Array} A new array with matching elements removed\n   */\n  remove(collection) {\n    return collection.reduce((acc, obj) => {\n      if (!this.test(obj)) acc.push(obj);\n      return acc;\n    }, []);\n  }\n}", "import { computeValue } from \"../../../core\";\nimport { isDate, isNil, isNumber } from \"../../../util\";\nconst COMMON_YEAR_DAYS_OFFSET = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\nconst LEAP_YEAR_DAYS_OFFSET = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n// https://en.wikipedia.org/wiki/ISO_week_date\nconst p = y => (y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400)) % 7;\nconst weeks = y => 52 + Number(p(y) == 4 || p(y - 1) == 3);\nexport const isLeapYear = year => (year & 3) == 0 && (year % 100 != 0 || year % 400 == 0);\nexport const getDayOfYear = d => (isLeapYear(d.getUTCFullYear()) ? LEAP_YEAR_DAYS_OFFSET : COMMON_YEAR_DAYS_OFFSET)[d.getUTCMonth()] + d.getUTCDate();\nexport function isoWeek(d) {\n  // algorithm based on https://en.wikipedia.org/wiki/ISO_week_date\n  const w = Math.floor((10 + getDayOfYear(d) - (d.getUTCDay() || 7)) / 7);\n  if (w < 1) return weeks(d.getUTCFullYear() - 1);\n  if (w > weeks(d.getUTCFullYear())) return 1;\n  return w;\n}\nexport function isoWeekYear(d) {\n  return d.getUTCFullYear() - Number(d.getUTCMonth() == 0 && d.getUTCDate() == 1 && d.getUTCDay() < 1);\n}\nexport const MINUTES_PER_HOUR = 60;\nexport const MILLIS_PER_DAY = 1000 * 60 * 60 * 24;\nexport const DURATION_IN_MILLIS = {\n  week: MILLIS_PER_DAY * 7,\n  day: MILLIS_PER_DAY,\n  hour: 1000 * 60 * 60,\n  minute: 1000 * 60,\n  second: 1000,\n  millisecond: 1\n};\n// default format if unspecified\nexport const DATE_FORMAT = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n// Inclusive interval of date parts\nexport const DATE_PART_INTERVAL = [[\"year\", 0, 9999], [\"month\", 1, 12], [\"day\", 1, 31], [\"hour\", 0, 23], [\"minute\", 0, 59], [\"second\", 0, 59], [\"millisecond\", 0, 999]];\n// used for formatting dates in $dateToString operator\nexport const DATE_SYM_TABLE = {\n  \"%Y\": {\n    name: \"year\",\n    padding: 4,\n    re: /([0-9]{4})/\n  },\n  \"%G\": {\n    name: \"year\",\n    padding: 4,\n    re: /([0-9]{4})/\n  },\n  \"%m\": {\n    name: \"month\",\n    padding: 2,\n    re: /(0[1-9]|1[012])/\n  },\n  \"%d\": {\n    name: \"day\",\n    padding: 2,\n    re: /(0[1-9]|[12][0-9]|3[01])/\n  },\n  \"%H\": {\n    name: \"hour\",\n    padding: 2,\n    re: /([01][0-9]|2[0-3])/\n  },\n  \"%M\": {\n    name: \"minute\",\n    padding: 2,\n    re: /([0-5][0-9])/\n  },\n  \"%S\": {\n    name: \"second\",\n    padding: 2,\n    re: /([0-5][0-9]|60)/\n  },\n  \"%L\": {\n    name: \"millisecond\",\n    padding: 3,\n    re: /([0-9]{3})/\n  },\n  \"%u\": {\n    name: \"weekday\",\n    padding: 1,\n    re: /([1-7])/\n  },\n  \"%U\": {\n    name: \"week\",\n    padding: 2,\n    re: /([1-4][0-9]?|5[0-3]?)/\n  },\n  \"%V\": {\n    name: \"isoWeek\",\n    padding: 2,\n    re: /([1-4][0-9]?|5[0-3]?)/\n  },\n  \"%z\": {\n    name: \"timezone\",\n    padding: 2,\n    re: /(([+-][01][0-9]|2[0-3]):?([0-5][0-9])?)/\n  },\n  \"%Z\": {\n    name: \"minuteOffset\",\n    padding: 3,\n    re: /([+-][0-9]{3})/\n  }\n  // \"%%\": \"%\",\n};\n/**\n * Parse and return the timezone string as a number\n * @param tzstr Timezone string matching '+/-hh[:][mm]'\n */\nexport function parseTimezone(tzstr) {\n  if (isNil(tzstr)) return 0;\n  const m = DATE_SYM_TABLE[\"%z\"].re.exec(tzstr);\n  if (!m) throw Error(`invalid or location-based timezone '${tzstr}' not supported`);\n  const hr = parseInt(m[2]) || 0;\n  const min = parseInt(m[3]) || 0;\n  return (Math.abs(hr * MINUTES_PER_HOUR) + min) * (hr < 0 ? -1 : 1);\n}\n/**\n * Formats the timezone for output\n * @param tz A timezone object\n */\nexport function formatTimezone(minuteOffset) {\n  return (minuteOffset < 0 ? \"-\" : \"+\") + padDigits(Math.abs(Math.floor(minuteOffset / MINUTES_PER_HOUR)), 2) + padDigits(Math.abs(minuteOffset) % MINUTES_PER_HOUR, 2);\n}\n/**\n * Adjust the date by the given timezone\n * @param d Date object\n * @param minuteOffset number\n */\nexport function adjustDate(d, minuteOffset) {\n  d.setUTCMinutes(d.getUTCMinutes() + minuteOffset);\n}\n/**\n * Computes a date expression\n * @param obj The target object\n * @param expr Any value that resolves to a valid date expression. Valid expressions include a number, Date, or Object{date: number|Date, timezone?: string}\n */\nexport function computeDate(obj, expr, options) {\n  const d = computeValue(obj, expr, null, options);\n  if (isDate(d)) return new Date(d);\n  // timestamp is in seconds\n  if (isNumber(d)) return new Date(d * 1000);\n  if (d.date) {\n    const date = isDate(d.date) ? new Date(d.date) : new Date(d.date * 1000);\n    if (d.timezone) {\n      adjustDate(date, parseTimezone(d.timezone));\n    }\n    return date;\n  }\n  throw Error(`cannot convert ${expr === null || expr === void 0 ? void 0 : expr.toString()} to date`);\n}\nexport function padDigits(n, digits) {\n  return new Array(Math.max(digits - String(n).length + 1, 0)).join(\"0\") + n.toString();\n}\nexport function regexQuote(s) {\n  \"^.-*?$\".split(\"\").forEach(c => {\n    s = s.replace(c, `\\\\${c}`);\n  });\n  return s;\n}\nexport function regexStrip(s) {\n  return s.replace(/^\\//, \"\").replace(/\\/$/, \"\");\n}", "import { MingoError } from \"../../types\";\nimport { groupBy, isEqual } from \"../../util\";\nimport { $push } from \"../accumulator\";\nimport { MILLIS_PER_DAY } from \"../expression/date/_internal\";\nimport { isUnbounded } from \"../pipeline/_internal\";\n// millis map to diffirent time units\nexport const MILLIS_PER_UNIT = {\n  week: MILLIS_PER_DAY * 7,\n  day: MILLIS_PER_DAY,\n  hour: MILLIS_PER_DAY / 24,\n  minute: 60000,\n  second: 1000,\n  millisecond: 1\n};\n// internal cache to store precomputed series once to avoid O(N^2) calls to over the collection\nconst memo = new WeakMap();\n/**\n * Caches all computed values in a window sequence for reuse.\n * This is only useful for operations with unbounded documents.\n */\nexport function withMemo(collection, expr, cacheFn, fn) {\n  // no caching done for bounded inputs\n  if (!isUnbounded(expr.parentExpr.output[expr.field].window)) {\n    return fn(cacheFn());\n  }\n  // first time using collection\n  if (!memo.has(collection)) {\n    memo.set(collection, {\n      [expr.field]: cacheFn()\n    });\n  }\n  const data = memo.get(collection);\n  // subsequent computations over the same collection.\n  if (data[expr.field] === undefined) {\n    data[expr.field] = cacheFn();\n  }\n  let failed = false;\n  try {\n    return fn(data[expr.field]);\n  } catch (e) {\n    failed = true;\n  } finally {\n    // cleanup on failure or last element in collection.\n    if (failed || expr.documentNumber === collection.length) {\n      delete data[expr.field];\n      if (Object.keys(data).length === 0) memo.delete(collection);\n    }\n  }\n}\n/** Returns the position of a document in the $setWindowFields stage partition. */\nexport function rank(_, collection, expr, options, dense) {\n  return withMemo(collection, expr, () => {\n    const sortKey = \"$\" + Object.keys(expr.parentExpr.sortBy)[0];\n    const values = $push(collection, sortKey, options);\n    const groups = groupBy(values, (_, n) => values[n], options.hashFunction);\n    return {\n      values,\n      groups\n    };\n  }, input => {\n    const {\n      values,\n      groups: partitions\n    } = input;\n    // same number of paritions as length means all sort keys are unique\n    if (partitions.size == collection.length) {\n      return expr.documentNumber;\n    }\n    const current = values[expr.documentNumber - 1];\n    let i = 0;\n    let offset = 0;\n    // partition keys are already dense so just return the value on match\n    for (const key of partitions.keys()) {\n      if (isEqual(current, key)) {\n        return dense ? i + 1 : offset + 1;\n      }\n      i++;\n      offset += partitions.get(key).length;\n    }\n    // should be unreachable\n    throw new MingoError(\"rank: invalid return value. please submit a bug report.\");\n  });\n}", "import { compare, groupBy, into, isEmpty, isObject, isString, resolve } from \"../../util\";\n/**\n * Takes all input documents and returns them in a stream of sorted documents.\n *\n * @param collection\n * @param sortKeys\n * @param  {Object} options\n * @returns {*}\n */\nexport const $sort = (collection, sortKeys, options) => {\n  if (isEmpty(sortKeys) || !isObject(sortKeys)) return collection;\n  let cmp = compare;\n  // check for collation spec on the options\n  const collationSpec = options.collation;\n  // use collation comparator if provided\n  if (isObject(collationSpec) && isString(collationSpec.locale)) {\n    cmp = collationComparator(collationSpec);\n  }\n  return collection.transform(coll => {\n    const modifiers = Object.keys(sortKeys);\n    for (const key of modifiers.reverse()) {\n      const groups = groupBy(coll, obj => resolve(obj, key), options.hashFunction);\n      const sortedKeys = Array.from(groups.keys()).sort(cmp);\n      if (sortKeys[key] === -1) sortedKeys.reverse();\n      // reuse collection so the data is available for the next iteration of the sort modifiers.\n      coll = [];\n      sortedKeys.reduce((acc, key) => into(acc, groups.get(key)), coll);\n    }\n    return coll;\n  });\n};\n// MongoDB collation strength to JS localeCompare sensitivity mapping.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\nconst COLLATION_STRENGTH = {\n  // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n  1: \"base\",\n  //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.\n  // Examples: a ≠ b, a ≠ á, a = A.\n  2: \"accent\",\n  // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n  // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A\n  3: \"variant\"\n  // case - Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n};\n/**\n * Creates a comparator function for the given collation spec. See https://docs.mongodb.com/manual/reference/collation/\n *\n * @param spec {Object} The MongoDB collation spec.\n * {\n *   locale: string,\n *   caseLevel: boolean,\n *   caseFirst: string,\n *   strength: int,\n *   numericOrdering: boolean,\n *   alternate: string,\n *   maxVariable: never, // unsupported\n *   backwards: never // unsupported\n * }\n */\nfunction collationComparator(spec) {\n  const localeOpt = {\n    sensitivity: COLLATION_STRENGTH[spec.strength || 3],\n    caseFirst: spec.caseFirst === \"off\" ? \"false\" : spec.caseFirst || \"false\",\n    numeric: spec.numericOrdering || false,\n    ignorePunctuation: spec.alternate === \"shifted\"\n  };\n  // when caseLevel is true for strength  1:base and 2:accent, bump sensitivity to the nearest that supports case comparison\n  if ((spec.caseLevel || false) === true) {\n    if (localeOpt.sensitivity === \"base\") localeOpt.sensitivity = \"case\";\n    if (localeOpt.sensitivity === \"accent\") localeOpt.sensitivity = \"variant\";\n  }\n  const collator = new Intl.Collator(spec.locale, localeOpt);\n  return (a, b) => {\n    // non strings\n    if (!isString(a) || !isString(b)) return compare(a, b);\n    // only for strings\n    const i = collator.compare(a, b);\n    if (i < 0) return -1;\n    if (i > 0) return 1;\n    return 0;\n  };\n}", "/**\n * Predicates used for Query and Expression operators.\n */\nimport { computeValue } from \"../core\";\nimport { Query } from \"../query\";\nimport { MingoError } from \"../types\";\nimport { compare as mingoCmp, ensureArray, flatten, getType, inArray, intersection, isArray, isBoolean, isDate, isEmpty, isEqual, isNil, isNumber, isObject, isOperator, isRegExp, isString, MAX_INT, MAX_LONG, MIN_INT, MIN_LONG, resolve, truthy } from \"../util\";\n/**\n * Returns a query operator created from the predicate\n *\n * @param predicate Predicate function\n */\nexport function createQueryOperator(predicate) {\n  const f = (selector, value, options) => {\n    const opts = {\n      unwrapArray: true\n    };\n    const depth = Math.max(1, selector.split(\".\").length - 1);\n    return obj => {\n      // value of field must be fully resolved.\n      const lhs = resolve(obj, selector, opts);\n      return predicate(lhs, value, Object.assign(Object.assign({}, options), {\n        depth\n      }));\n    };\n  };\n  f.op = \"query\";\n  return f; // as QueryOperator;\n}\n/**\n * Returns an expression operator created from the predicate\n *\n * @param predicate Predicate function\n */\nexport function createExpressionOperator(predicate) {\n  return (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    return predicate(...args);\n  };\n}\n/**\n * Checks that two values are equal.\n *\n * @param a         The lhs operand as resolved from the object by the given selector\n * @param b         The rhs operand provided by the user\n * @returns {*}\n */\nexport function $eq(a, b, options) {\n  // start with simple equality check\n  if (isEqual(a, b)) return true;\n  // https://docs.mongodb.com/manual/tutorial/query-for-null-fields/\n  if (isNil(a) && isNil(b)) return true;\n  // check\n  if (a instanceof Array) {\n    const eq = isEqual.bind(null, b);\n    return a.some(eq) || flatten(a, options === null || options === void 0 ? void 0 : options.depth).some(eq);\n  }\n  return false;\n}\n/**\n * Matches all values that are not equal to the value specified in the query.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $ne(a, b, options) {\n  return !$eq(a, b, options);\n}\n/**\n * Matches any of the values that exist in an array specified in the query.\n *\n * @param a\n * @param b\n * @returns {*}\n */\nexport function $in(a, b, options) {\n  // queries for null should be able to find undefined fields\n  if (isNil(a)) return b.some(v => v === null);\n  return intersection([ensureArray(a), b], options === null || options === void 0 ? void 0 : options.hashFunction).length > 0;\n}\n/**\n * Matches values that do not exist in an array specified to the query.\n *\n * @param a\n * @param b\n * @returns {*|boolean}\n */\nexport function $nin(a, b, options) {\n  return !$in(a, b, options);\n}\n/**\n * Matches values that are less than the value specified in the query.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $lt(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) < 0);\n}\n/**\n * Matches values that are less than or equal to the value specified in the query.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $lte(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) <= 0);\n}\n/**\n * Matches values that are greater than the value specified in the query.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $gt(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) > 0);\n}\n/**\n * Matches values that are greater than or equal to the value specified in the query.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $gte(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) >= 0);\n}\n/**\n * Performs a modulo operation on the value of a field and selects documents with a specified result.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $mod(a, b, _options) {\n  return ensureArray(a).some(x => b.length === 2 && x % b[0] === b[1]);\n}\n/**\n * Selects documents where values match a specified regular expression.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $regex(a, b, options) {\n  const lhs = ensureArray(a);\n  const match = x => isString(x) && truthy(b.exec(x), options === null || options === void 0 ? void 0 : options.useStrictMode);\n  return lhs.some(match) || flatten(lhs, 1).some(match);\n}\n/**\n * Matches documents that have the specified field.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $exists(a, b, _options) {\n  return (b === false || b === 0) && a === undefined || (b === true || b === 1) && a !== undefined;\n}\n/**\n * Matches arrays that contain all elements specified in the query.\n *\n * @param values\n * @param queries\n * @returns boolean\n */\nexport function $all(values, queries, options) {\n  if (!isArray(values) || !isArray(queries) || !values.length || !queries.length) {\n    return false;\n  }\n  let matched = true;\n  for (const query of queries) {\n    // no need to check all the queries.\n    if (!matched) break;\n    if (isObject(query) && inArray(Object.keys(query), \"$elemMatch\")) {\n      matched = $elemMatch(values, query[\"$elemMatch\"], options);\n    } else if (query instanceof RegExp) {\n      matched = values.some(s => typeof s === \"string\" && query.test(s));\n    } else {\n      matched = values.some(v => isEqual(query, v));\n    }\n  }\n  return matched;\n}\n/**\n * Selects documents if the array field is a specified size.\n *\n * @param a\n * @param b\n * @returns {*|boolean}\n */\nexport function $size(a, b, _options) {\n  return Array.isArray(a) && a.length === b;\n}\nfunction isNonBooleanOperator(name) {\n  return isOperator(name) && [\"$and\", \"$or\", \"$nor\"].indexOf(name) === -1;\n}\n/**\n * Selects documents if element in the array field matches all the specified $elemMatch condition.\n *\n * @param a {Array} element to match against\n * @param b {Object} subquery\n */\nexport function $elemMatch(a, b, options) {\n  // should return false for non-matching input\n  if (isArray(a) && !isEmpty(a)) {\n    let format = x => x;\n    let criteria = b;\n    // If we find a boolean operator in the subquery, we fake a field to point to it. This is an\n    // attempt to ensure that it is a valid criteria. We cannot make this substitution for operators\n    // like $and/$or/$nor; as otherwise, this faking will break our query.\n    if (Object.keys(b).every(isNonBooleanOperator)) {\n      criteria = {\n        temp: b\n      };\n      format = x => ({\n        temp: x\n      });\n    }\n    const query = new Query(criteria, options);\n    for (let i = 0, len = a.length; i < len; i++) {\n      if (query.test(format(a[i]))) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// helper functions\nconst isNull = a => a === null;\nconst isInt = a => isNumber(a) && a >= MIN_INT && a <= MAX_INT && a.toString().indexOf(\".\") === -1;\nconst isLong = a => isNumber(a) && a >= MIN_LONG && a <= MAX_LONG && a.toString().indexOf(\".\") === -1;\n/** Mapping of type to predicate */\nconst compareFuncs = {\n  array: isArray,\n  bool: isBoolean,\n  boolean: isBoolean,\n  date: isDate,\n  decimal: isNumber,\n  double: isNumber,\n  int: isInt,\n  long: isLong,\n  number: isNumber,\n  null: isNull,\n  object: isObject,\n  regex: isRegExp,\n  regexp: isRegExp,\n  string: isString,\n  // added for completeness\n  undefined: isNil,\n  // deprecated\n  function: _ => {\n    throw new MingoError(\"unsupported type key `function`.\");\n  },\n  // Mongo identifiers\n  1: isNumber,\n  //double\n  2: isString,\n  3: isObject,\n  4: isArray,\n  6: isNil,\n  // deprecated\n  8: isBoolean,\n  9: isDate,\n  10: isNull,\n  11: isRegExp,\n  16: isInt,\n  18: isLong,\n  19: isNumber //decimal\n};\n/**\n * Selects documents if a field is of the specified type.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nfunction compareType(a, b, _) {\n  const f = compareFuncs[b];\n  return f ? f(a) : false;\n}\n/**\n * Selects documents if a field is of the specified type.\n *\n * @param a\n * @param b\n * @returns {boolean}\n */\nexport function $type(a, b, options) {\n  return Array.isArray(b) ? b.findIndex(t => compareType(a, t, options)) >= 0 : compareType(a, b, options);\n}\nfunction compare(a, b, f) {\n  return ensureArray(a).some(x => getType(x) === getType(b) && f(x, b));\n}", "// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { $nin as __nin, createExpressionOperator } from \"../../_predicates\";\n/**\n * Returns a boolean indicating whether a specified value is not an array.\n * Note: This expression operator is missing from the documentation\n *\n * @param {Object} obj\n * @param {Array} expr\n */\nexport const $nin = createExpressionOperator(__nin);", "import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, isNumber } from \"../../../util\";\nexport const bitwise = (op, compute) => (obj, expr, options) => {\n  assert(isArray(expr), `${op}: expression must be an array.`);\n  const nums = computeValue(obj, expr, null, options);\n  if (nums.some(isNil)) return null;\n  assert(nums.every(isNumber), `${op}: expression must evalue to array of numbers.`);\n  return compute(nums);\n};", "// Bitwise Operators: https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitAnd/#mongodb-expression-exp\nimport { bitwise } from \"./_internal\";\n/**\n * Returns the result of a bitwise and operation on an array of int or long values.\n *\n * @param obj RawObject from collection\n * @param expr Right hand side expression of operator\n * @returns {Number}\n */\nexport const $bitAnd = bitwise(\"$bitAnd\", nums => nums.reduce((a, b) => a & b, -1));", "// Bitwise Operators: https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitOr/#mongodb-expression-exp\nimport { bitwise } from \"./_internal\";\n/**\n * Returns the result of a bitwise or operation on an array of int or long values.\n *\n * @param obj RawObject from collection\n * @param expr Right hand side expression of operator\n * @returns {Number}\n */\nexport const $bitOr = bitwise(\"$bitOr\", nums => nums.reduce((a, b) => a | b, 0));", "// Bitwise Operators: https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitNot/#mongodb-expression-exp\nimport { bitwise } from \"./_internal\";\n/**\n * Returns the result of a bitwise xor (exclusive or) operation on an array of int and long values.\n *\n * @param obj RawObject from collection\n * @param expr Right hand side expression of operator\n * @returns {Number}\n */\nexport const $bitXor = bitwise(\"$bitXor\", nums => nums.reduce((a, b) => a ^ b, 0));", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $eq as __eq, createExpressionOperator } from \"../../_predicates\";\n/**\n * Matches values that are equal to a specified value.\n */\nexport const $eq = createExpressionOperator(__eq);", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $gt as __gt, createExpressionOperator } from \"../../_predicates\";\n/**\n * Matches values that are greater than a specified value.\n */\nexport const $gt = createExpressionOperator(__gt);", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $gte as __gte, createExpressionOperator } from \"../../_predicates\";\n/**\n * \tMatches values that are greater than or equal to a specified value.\n */\nexport const $gte = createExpressionOperator(__gte);", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $lt as __lt, createExpressionOperator } from \"../../_predicates\";\n/**\n * Matches values that are less than the value specified in the query.\n */\nexport const $lt = createExpressionOperator(__lt);", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $lte as __lte, createExpressionOperator } from \"../../_predicates\";\n/**\n * Matches values that are less than or equal to the value specified in the query.\n */\nexport const $lte = createExpressionOperator(__lte);", "// Comparison Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#comparison-expression-operators\nimport { $ne as __ne, createExpressionOperator } from \"../../_predicates\";\n/**\n * Matches all values that are not equal to the value specified in the query.\n */\nexport const $ne = createExpressionOperator(__ne);", "// Date Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#date-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject } from \"../../../util\";\nimport { adjustDate, DATE_FORMAT, DATE_SYM_TABLE, MINUTES_PER_HOUR, parseTimezone, regexQuote, regexStrip } from \"./_internal\";\nconst buildMap = (letters, sign) => {\n  const h = {};\n  letters.split(\"\").forEach((v, i) => h[v] = sign * (i + 1));\n  return h;\n};\nconst TZ_LETTER_OFFSETS = Object.assign(Object.assign(Object.assign({}, buildMap(\"ABCDEFGHIKLM\", 1)), buildMap(\"NOPQRSTUVWXY\", -1)), {\n  Z: 0\n});\n/**\n * Converts a date/time string to a date object.\n * @param obj\n * @param expr\n */\nexport const $dateFromString = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  args.format = args.format || DATE_FORMAT;\n  args.onNull = args.onNull || null;\n  let dateString = args.dateString;\n  if (isNil(dateString)) return args.onNull;\n  // collect all separators of the format string\n  const separators = args.format.split(/%[YGmdHMSLuVzZ]/);\n  separators.reverse();\n  const matches = args.format.match(/(%%|%Y|%G|%m|%d|%H|%M|%S|%L|%u|%V|%z|%Z)/g);\n  const dateParts = {};\n  // holds the valid regex of parts that matches input date string\n  let expectedPattern = \"\";\n  for (let i = 0, len = matches.length; i < len; i++) {\n    const formatSpecifier = matches[i];\n    const props = DATE_SYM_TABLE[formatSpecifier];\n    if (isObject(props)) {\n      // get pattern and alias from table\n      const m = props.re.exec(dateString);\n      // get the next separtor\n      const delimiter = separators.pop() || \"\";\n      if (m !== null) {\n        // store and cut out matched part\n        dateParts[props.name] = /^\\d+$/.exec(m[0]) ? parseInt(m[0]) : m[0];\n        dateString = dateString.substr(0, m.index) + dateString.substr(m.index + m[0].length);\n        // construct expected pattern\n        expectedPattern += regexQuote(delimiter) + regexStrip(props.re.toString());\n      } else {\n        dateParts[props.name] = null;\n      }\n    }\n  }\n  // 1. validate all required date parts exists\n  // 2. validate original dateString against expected pattern.\n  if (isNil(dateParts.year) || isNil(dateParts.month) || isNil(dateParts.day) || !new RegExp(\"^\" + expectedPattern + \"[A-Z]?$\").exec(args.dateString)) {\n    return args.onError;\n  }\n  const m = args.dateString.match(/([A-Z])$/);\n  assert(\n  // only one of in-date timeone or timezone argument but not both.\n  !(m && args.timezone), `$dateFromString: you cannot pass in a date/time string with time zone information ('${m && m[0]}') together with a timezone argument`);\n  const minuteOffset = m ? TZ_LETTER_OFFSETS[m[0]] * MINUTES_PER_HOUR : parseTimezone(args.timezone);\n  // create the date. month is 0-based in Date\n  const d = new Date(Date.UTC(dateParts.year, dateParts.month - 1, dateParts.day, 0, 0, 0));\n  if (!isNil(dateParts.hour)) d.setUTCHours(dateParts.hour);\n  if (!isNil(dateParts.minute)) d.setUTCMinutes(dateParts.minute);\n  if (!isNil(dateParts.second)) d.setUTCSeconds(dateParts.second);\n  if (!isNil(dateParts.millisecond)) d.setUTCMilliseconds(dateParts.millisecond);\n  // adjust to the correct represention for UTC\n  adjustDate(d, -minuteOffset);\n  return d;\n};", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { MingoError } from \"../../../types\";\nconst FIXED_POINTS = {\n  undefined: null,\n  null: null,\n  NaN: NaN,\n  Infinity: new Error(),\n  \"-Infinity\": new Error()\n};\n/**\n * Returns an operator for a given trignometric function\n *\n * @param f The trignometric function\n */\nexport function createTrignometryOperator(f, fixedPoints = FIXED_POINTS) {\n  const fp = Object.assign({}, FIXED_POINTS, fixedPoints);\n  const keySet = new Set(Object.keys(fp));\n  return (obj, expr, options) => {\n    const n = computeValue(obj, expr, null, options);\n    if (keySet.has(`${n}`)) {\n      const res = fp[`${n}`];\n      if (res instanceof Error) {\n        throw new MingoError(`cannot apply $${f.name} to -inf, value must in (-inf,inf)`);\n      }\n      return res;\n    }\n    return f(n);\n  };\n}", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse cosine (arc cosine) of a value in radians. */\nexport const $acos = createTrignometryOperator(Math.acos, {\n  Infinity: Infinity,\n  0: new Error()\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse hyperbolic cosine (hyperbolic arc cosine) of a value in radians. */\nexport const $acosh = createTrignometryOperator(Math.acosh, {\n  Infinity: Infinity,\n  0: new Error()\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse sin (arc sine) of a value in radians. */\nexport const $asin = createTrignometryOperator(Math.asin);", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse hyperbolic sine (hyperbolic arc sine) of a value in radians. */\nexport const $asinh = createTrignometryOperator(Math.asinh, {\n  Infinity: Infinity,\n  \"-Infinity\": -Infinity\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse tangent (arc tangent) of a value in radians. */\nexport const $atan = createTrignometryOperator(Math.atan);", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the inverse hyperbolic tangent (hyperbolic arc tangent) of a value in radians. */\nexport const $atanh = createTrignometryOperator(Math.atanh, {\n  1: Infinity,\n  \"-1\": -Infinity\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the cosine of a value that is measured in radians. */\nexport const $cos = createTrignometryOperator(Math.cos);", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the hyperbolic cosine of a value that is measured in radians. */\nexport const $cosh = createTrignometryOperator(Math.cosh, {\n  \"-Infinity\": Infinity,\n  Infinity: Infinity\n  // [Math.PI]: -1,\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\nconst RADIANS_FACTOR = Math.PI / 180;\n/** Converts a value from degrees to radians. */\nexport const $degreesToRadians = createTrignometryOperator(n => n * RADIANS_FACTOR, {\n  Infinity: Infinity,\n  \"-Infinity\": Infinity\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\nconst DEGREES_FACTOR = 180 / Math.PI;\n/** Converts a value from radians to degrees. */\nexport const $radiansToDegrees = createTrignometryOperator(n => n * DEGREES_FACTOR, {\n  Infinity: Infinity,\n  \"-Infinity\": -Infinity\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the sine of a value that is measured in radians. */\nexport const $sin = createTrignometryOperator(Math.sin);", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the hyperbolic sine of a value that is measured in radians. */\nexport const $sinh = createTrignometryOperator(Math.sinh, {\n  \"-Infinity\": -Infinity,\n  Infinity: Infinity\n});", "// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { createTrignometryOperator } from \"./_internal\";\n/** Returns the tangent of a value that is measured in radians. */\nexport const $tan = createTrignometryOperator(Math.tan);", "import { ComputeOptions, computeValue, getOperator, OperatorType } from \"../../core\";\nimport { assert, ensureArray, filterMissing, has, inArray, into, isEmpty, isNil, isNumber, isObject, isOperator, isString, merge, notInArray, removeValue, resolveGraph, setValue } from \"../../util\";\n/**\n * Reshapes a document stream.\n * $project can rename, add, or remove fields as well as create computed values and sub-documents.\n *\n * @param collection\n * @param expr\n * @param opt\n * @returns {Array}\n */\nexport const $project = (collection, expr, options) => {\n  if (isEmpty(expr)) return collection;\n  // result collection\n  let expressionKeys = Object.keys(expr);\n  let idOnlyExcluded = false;\n  // validate inclusion and exclusion\n  validateExpression(expr, options);\n  const ID_KEY = options.idKey;\n  if (inArray(expressionKeys, ID_KEY)) {\n    const id = expr[ID_KEY];\n    if (id === 0 || id === false) {\n      expressionKeys = expressionKeys.filter(notInArray.bind(null, [ID_KEY]));\n      idOnlyExcluded = expressionKeys.length == 0;\n    }\n  } else {\n    // if not specified the add the ID field\n    expressionKeys.push(ID_KEY);\n  }\n  const copts = ComputeOptions.init(options);\n  return collection.map(obj => processObject(obj, expr, copts.update(obj), expressionKeys, idOnlyExcluded));\n};\n/**\n * Process the expression value for $project operators\n *\n * @param {Object} obj The object to use as options\n * @param {Object} expr The experssion object of $project operator\n * @param {Array} expressionKeys The key in the 'expr' object\n * @param {Boolean} idOnlyExcluded Boolean value indicating whether only the ID key is excluded\n */\nfunction processObject(obj, expr, options, expressionKeys, idOnlyExcluded) {\n  let newObj = {};\n  let foundSlice = false;\n  let foundExclusion = false;\n  const dropKeys = [];\n  if (idOnlyExcluded) {\n    dropKeys.push(options.idKey);\n  }\n  for (const key of expressionKeys) {\n    // final computed value of the key\n    let value = undefined;\n    // expression to associate with key\n    const subExpr = expr[key];\n    if (key !== options.idKey && inArray([0, false], subExpr)) {\n      foundExclusion = true;\n    }\n    if (key === options.idKey && isEmpty(subExpr)) {\n      // tiny optimization here to skip over id\n      value = obj[key];\n    } else if (isString(subExpr)) {\n      value = computeValue(obj, subExpr, key, options);\n    } else if (inArray([1, true], subExpr)) {\n      // For direct projections, we use the resolved object value\n    } else if (subExpr instanceof Array) {\n      value = subExpr.map(v => {\n        const r = computeValue(obj, v, null, options);\n        if (isNil(r)) return null;\n        return r;\n      });\n    } else if (isObject(subExpr)) {\n      const subExprObj = subExpr;\n      const subExprKeys = Object.keys(subExpr);\n      const operator = subExprKeys.length == 1 ? subExprKeys[0] : \"\";\n      // first try a projection operator\n      const call = getOperator(OperatorType.PROJECTION, operator, options);\n      if (call) {\n        // apply the projection operator on the operator expression for the key\n        if (operator === \"$slice\") {\n          // $slice is handled differently for aggregation and projection operations\n          if (ensureArray(subExprObj[operator]).every(isNumber)) {\n            // $slice for projection operation\n            value = call(obj, subExprObj[operator], key, options);\n            foundSlice = true;\n          } else {\n            // $slice for aggregation operation\n            value = computeValue(obj, subExprObj, key, options);\n          }\n        } else {\n          value = call(obj, subExprObj[operator], key, options);\n        }\n      } else if (isOperator(operator)) {\n        // compute if operator key\n        value = computeValue(obj, subExprObj[operator], operator, options);\n      } else if (has(obj, key)) {\n        // compute the value for the sub expression for the key\n        validateExpression(subExprObj, options);\n        let target = obj[key];\n        if (target instanceof Array) {\n          value = target.map(o => processObject(o, subExprObj, options, subExprKeys, false));\n        } else {\n          target = isObject(target) ? target : obj;\n          value = processObject(target, subExprObj, options, subExprKeys, false);\n        }\n      } else {\n        // compute the value for the sub expression for the key\n        value = computeValue(obj, subExpr, null, options);\n      }\n    } else {\n      dropKeys.push(key);\n      continue;\n    }\n    // get value with object graph\n    const objPathGraph = resolveGraph(obj, key, {\n      preserveMissing: true\n    });\n    // add the value at the path\n    if (objPathGraph !== undefined) {\n      merge(newObj, objPathGraph, {\n        flatten: true\n      });\n    }\n    // if computed add/or remove accordingly\n    if (notInArray([0, 1, false, true], subExpr)) {\n      if (value === undefined) {\n        removeValue(newObj, key, {\n          descendArray: true\n        });\n      } else {\n        setValue(newObj, key, value);\n      }\n    }\n  }\n  // filter out all missing values preserved to support correct merging\n  filterMissing(newObj);\n  // For the following cases we include all keys on the object that were not explicitly excluded.\n  //\n  // 1. projection included $slice operator\n  // 2. some fields were explicitly excluded\n  // 3. only the id field was excluded\n  if (foundSlice || foundExclusion || idOnlyExcluded) {\n    newObj = into({}, obj, newObj);\n    if (dropKeys.length > 0) {\n      for (const k of dropKeys) {\n        removeValue(newObj, k, {\n          descendArray: true\n        });\n      }\n    }\n  }\n  return newObj;\n}\n/**\n * Validate inclusion and exclusion values in expression\n *\n * @param {Object} expr The expression given for the projection\n */\nfunction validateExpression(expr, options) {\n  const check = [false, false];\n  for (const [k, v] of Object.entries(expr)) {\n    if (k === (options === null || options === void 0 ? void 0 : options.idKey)) return;\n    if (v === 0 || v === false) {\n      check[0] = true;\n    } else if (v === 1 || v === true) {\n      check[1] = true;\n    }\n    assert(!(check[0] && check[1]), \"Projection cannot have a mix of inclusion and exclusion.\");\n  }\n}", "// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\n/**\n * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $and = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression: $and expects value to be an Array.\");\n  const queries = rhs.map(expr => new Query(expr, options));\n  return obj => queries.every(q => q.test(obj));\n};", "// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\n/**\n * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $or = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression. $or expects value to be an Array\");\n  const queries = rhs.map(expr => new Query(expr, options));\n  return obj => queries.some(q => q.test(obj));\n};", "// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\n/**\n * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $nor = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression. $nor expects value to be an array.\");\n  const f = $or(\"$or\", rhs, options);\n  return obj => !f(obj);\n};", "// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { Query } from \"../../../query\";\nimport { normalize } from \"../../../util\";\n/**\n * Inverts the effect of a query expression and returns documents that do not match the query expression.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $not = (selector, rhs, options) => {\n  const criteria = {};\n  criteria[selector] = normalize(rhs);\n  const query = new Query(criteria, options);\n  return obj => !query.test(obj);\n};", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $eq as __eq, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches values that are equal to a specified value.\n */\nexport const $eq = createQueryOperator(__eq);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $gt as __gt, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches values that are greater than a specified value.\n */\nexport const $gt = createQueryOperator(__gt);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $gte as __gte, createQueryOperator } from \"../../_predicates\";\n/**\n * \tMatches values that are greater than or equal to a specified value.\n */\nexport const $gte = createQueryOperator(__gte);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $in as __in, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches any of the values that exist in an array specified in the query.\n */\nexport const $in = createQueryOperator(__in);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $lt as __lt, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches values that are less than the value specified in the query.\n */\nexport const $lt = createQueryOperator(__lt);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $lte as __lte, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches values that are less than or equal to the value specified in the query.\n */\nexport const $lte = createQueryOperator(__lte);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $ne as __ne, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches all values that are not equal to the value specified in the query.\n */\nexport const $ne = createQueryOperator(__ne);", "// Query Comparison Operators: https://docs.mongodb.com/manual/reference/operator/query-comparison/\nimport { $nin as __nin, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches values that do not exist in an array specified to the query.\n */\nexport const $nin = createQueryOperator(__nin);", "// Query Evaluation Operators: https://docs.mongodb.com/manual/reference/operator/query-evaluation/\nimport { $mod as __mod, createQueryOperator } from \"../../_predicates\";\n/**\n * Performs a modulo operation on the value of a field and selects documents with a specified result.\n */\nexport const $mod = createQueryOperator(__mod);", "// Query Evaluation Operators: https://docs.mongodb.com/manual/reference/operator/query-evaluation/\nimport { $regex as __regex, createQueryOperator } from \"../../_predicates\";\n/**\n * Selects documents where values match a specified regular expression.\n */\nexport const $regex = createQueryOperator(__regex);", "// Query Array Operators: https://docs.mongodb.com/manual/reference/operator/query-array/\nimport { $all as __all, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches arrays that contain all elements specified in the query.\n */\nexport const $all = createQueryOperator(__all);", "// Query Array Operators: https://docs.mongodb.com/manual/reference/operator/query-array/\nimport { $elemMatch as __elemMatch, createQueryOperator } from \"../../_predicates\";\n/**\n * Selects documents if element in the array field matches all the specified $elemMatch conditions.\n */\nexport const $elemMatch = createQueryOperator(__elemMatch);", "// Query Array Operators: https://docs.mongodb.com/manual/reference/operator/query-array/\nimport { $size as __size, createQueryOperator } from \"../../_predicates\";\n/**\n * Selects documents if the array field is a specified size.\n */\nexport const $size = createQueryOperator(__size);", "// Query Element Operators: https://docs.mongodb.com/manual/reference/operator/query-element/\nimport { $exists as __exists, createQueryOperator } from \"../../_predicates\";\n/**\n * Matches documents that have the specified field.\n */\nexport const $exists = createQueryOperator(__exists);", "// Query Element Operators: https://docs.mongodb.com/manual/reference/operator/query-element/\nimport { $type as __type, createQueryOperator } from \"../../_predicates\";\n/**\n * Selects documents if a field is of the specified type.\n */\nexport const $type = createQueryOperator(__type);", "import { useOperators, OperatorType } from 'mingo/core';\nimport { Query } from 'mingo/query';\nimport { $project, $sort } from 'mingo/operators/pipeline';\nimport { $and, $not, $or, $nor } from 'mingo/operators/query/logical';\nimport { $eq, $ne, $gt, $gte, $lt, $lte, $nin, $in } from 'mingo/operators/query/comparison';\nimport { $regex, $mod } from 'mingo/operators/query/evaluation';\nimport { $elemMatch, $size } from 'mingo/operators/query/array';\nimport { $exists, $type } from 'mingo/operators/query/element';\nvar mingoInitDone = false;\n\n/**\n * The MongoDB query library is huge and we do not need all the operators.\n * If you add an operator here, make sure that you properly add a test in\n * the file /test/unit/rx-storage-query-correctness.test.ts\n *\n * @link https://github.com/kofrasa/mingo#es6\n */\nexport function getMingoQuery(selector) {\n  if (!mingoInitDone) {\n    useOperators(OperatorType.PIPELINE, {\n      $sort,\n      $project\n    });\n    useOperators(OperatorType.QUERY, {\n      $and,\n      $eq,\n      $elemMatch,\n      $exists,\n      $gt,\n      $gte,\n      $in,\n      $lt,\n      $lte,\n      $ne,\n      $nin,\n      $mod,\n      $nor,\n      $not,\n      $or,\n      $regex,\n      $size,\n      $type\n    });\n    mingoInitDone = true;\n  }\n  return new Query(selector);\n}\n", "import { LOGICAL_OPERATORS } from \"./query-planner.js\";\nimport { getPrimaryFieldOfPrimaryKey } from \"./rx-schema-helper.js\";\nimport { clone, firstPropertyNameOfObject, toArray, isMaybeReadonlyArray, flatClone, objectPathMonad } from \"./plugins/utils/index.js\";\nimport { compare as mingoSortComparator } from 'mingo/util';\nimport { newRxError } from \"./rx-error.js\";\nimport { getMingoQuery } from \"./rx-query-mingo.js\";\n\n/**\n * Normalize the query to ensure we have all fields set\n * and queries that represent the same query logic are detected as equal by the caching.\n */\nexport function normalizeMangoQuery(schema, mangoQuery) {\n  var primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n  mangoQuery = flatClone(mangoQuery);\n  var normalizedMangoQuery = clone(mangoQuery);\n  if (typeof normalizedMangoQuery.skip !== 'number') {\n    normalizedMangoQuery.skip = 0;\n  }\n  if (!normalizedMangoQuery.selector) {\n    normalizedMangoQuery.selector = {};\n  } else {\n    normalizedMangoQuery.selector = normalizedMangoQuery.selector;\n    /**\n     * In mango query, it is possible to have an\n     * equals comparison by directly assigning a value\n     * to a property, without the '$eq' operator.\n     * Like:\n     * selector: {\n     *   foo: 'bar'\n     * }\n     * For normalization, we have to normalize this\n     * so our checks can perform properly.\n     *\n     *\n     * TODO this must work recursive with nested queries that\n     * contain multiple selectors via $and or $or etc.\n     */\n    Object.entries(normalizedMangoQuery.selector).forEach(([field, matcher]) => {\n      if (typeof matcher !== 'object' || matcher === null) {\n        normalizedMangoQuery.selector[field] = {\n          $eq: matcher\n        };\n      }\n    });\n  }\n\n  /**\n   * Ensure that if an index is specified,\n   * the primaryKey is inside of it.\n   */\n  if (normalizedMangoQuery.index) {\n    var indexAr = toArray(normalizedMangoQuery.index);\n    if (!indexAr.includes(primaryKey)) {\n      indexAr.push(primaryKey);\n    }\n    normalizedMangoQuery.index = indexAr;\n  }\n\n  /**\n   * To ensure a deterministic sorting,\n   * we have to ensure the primary key is always part\n   * of the sort query.\n   * Primary sorting is added as last sort parameter,\n   * similar to how we add the primary key to indexes that do not have it.\n   *\n   */\n  if (!normalizedMangoQuery.sort) {\n    /**\n     * If no sort is given at all,\n     * we can assume that the user does not care about sort order at al.\n     *\n     * we cannot just use the primary key as sort parameter\n     * because it would likely cause the query to run over the primary key index\n     * which has a bad performance in most cases.\n     */\n    if (normalizedMangoQuery.index) {\n      normalizedMangoQuery.sort = normalizedMangoQuery.index.map(field => {\n        return {\n          [field]: 'asc'\n        };\n      });\n    } else {\n      /**\n       * Find the index that best matches the fields with the logical operators\n       */\n      if (schema.indexes) {\n        var fieldsWithLogicalOperator = new Set();\n        Object.entries(normalizedMangoQuery.selector).forEach(([field, matcher]) => {\n          var hasLogical = false;\n          if (typeof matcher === 'object' && matcher !== null) {\n            hasLogical = !!Object.keys(matcher).find(operator => LOGICAL_OPERATORS.has(operator));\n          } else {\n            hasLogical = true;\n          }\n          if (hasLogical) {\n            fieldsWithLogicalOperator.add(field);\n          }\n        });\n        var currentFieldsAmount = -1;\n        var currentBestIndexForSort;\n        schema.indexes.forEach(index => {\n          var useIndex = isMaybeReadonlyArray(index) ? index : [index];\n          var firstWrongIndex = useIndex.findIndex(indexField => !fieldsWithLogicalOperator.has(indexField));\n          if (firstWrongIndex > 0 && firstWrongIndex > currentFieldsAmount) {\n            currentFieldsAmount = firstWrongIndex;\n            currentBestIndexForSort = useIndex;\n          }\n        });\n        if (currentBestIndexForSort) {\n          normalizedMangoQuery.sort = currentBestIndexForSort.map(field => {\n            return {\n              [field]: 'asc'\n            };\n          });\n        }\n      }\n\n      /**\n       * Fall back to the primary key as sort order\n       * if no better one has been found\n       */\n      if (!normalizedMangoQuery.sort) {\n        normalizedMangoQuery.sort = [{\n          [primaryKey]: 'asc'\n        }];\n      }\n    }\n  } else {\n    var isPrimaryInSort = normalizedMangoQuery.sort.find(p => firstPropertyNameOfObject(p) === primaryKey);\n    if (!isPrimaryInSort) {\n      normalizedMangoQuery.sort = normalizedMangoQuery.sort.slice(0);\n      normalizedMangoQuery.sort.push({\n        [primaryKey]: 'asc'\n      });\n    }\n  }\n  return normalizedMangoQuery;\n}\n\n/**\n * Returns the sort-comparator,\n * which is able to sort documents in the same way\n * a query over the db would do.\n */\nexport function getSortComparator(schema, query) {\n  if (!query.sort) {\n    throw newRxError('SNH', {\n      query\n    });\n  }\n  var sortParts = [];\n  query.sort.forEach(sortBlock => {\n    var key = Object.keys(sortBlock)[0];\n    var direction = Object.values(sortBlock)[0];\n    sortParts.push({\n      key,\n      direction,\n      getValueFn: objectPathMonad(key)\n    });\n  });\n  var fun = (a, b) => {\n    for (var i = 0; i < sortParts.length; ++i) {\n      var sortPart = sortParts[i];\n      var valueA = sortPart.getValueFn(a);\n      var valueB = sortPart.getValueFn(b);\n      if (valueA !== valueB) {\n        var ret = sortPart.direction === 'asc' ? mingoSortComparator(valueA, valueB) : mingoSortComparator(valueB, valueA);\n        return ret;\n      }\n    }\n  };\n  return fun;\n}\n\n/**\n * Returns a function\n * that can be used to check if a document\n * matches the query.\n */\nexport function getQueryMatcher(_schema, query) {\n  if (!query.sort) {\n    throw newRxError('SNH', {\n      query\n    });\n  }\n  var mingoQuery = getMingoQuery(query.selector);\n  var fun = doc => {\n    return mingoQuery.test(doc);\n  };\n  return fun;\n}\nexport async function runQueryUpdateFunction(rxQuery, fn) {\n  var docs = await rxQuery.exec();\n  if (!docs) {\n    // only findOne() queries can return null\n    return null;\n  }\n  if (Array.isArray(docs)) {\n    return Promise.all(docs.map(doc => fn(doc)));\n  } else {\n    // via findOne()\n    var result = await fn(docs);\n    return result;\n  }\n}\n", "/**\n * the query-cache makes sure that on every query-state, exactly one instance can exist\n * if you use the same mango-query more then once, it will reuse the first RxQuery\n */\n\nimport { getFromMapOrCreate, nextTick, now, requestIdlePromise } from \"./plugins/utils/index.js\";\nexport var QueryCache = /*#__PURE__*/function () {\n  function QueryCache() {\n    this._map = new Map();\n  }\n  var _proto = QueryCache.prototype;\n  /**\n   * check if an equal query is in the cache,\n   * if true, return the cached one,\n   * if false, save the given one and return it\n   */\n  _proto.getByQuery = function getByQuery(rxQuery) {\n    var stringRep = rxQuery.toString();\n    return getFromMapOrCreate(this._map, stringRep, () => rxQuery);\n  };\n  return QueryCache;\n}();\nexport function createQueryCache() {\n  return new QueryCache();\n}\nexport function uncacheRxQuery(queryCache, rxQuery) {\n  rxQuery.uncached = true;\n  var stringRep = rxQuery.toString();\n  queryCache._map.delete(stringRep);\n}\nexport function countRxQuerySubscribers(rxQuery) {\n  return rxQuery.refCount$.observers.length;\n}\nexport var DEFAULT_TRY_TO_KEEP_MAX = 100;\nexport var DEFAULT_UNEXECUTED_LIFETIME = 30 * 1000;\n\n/**\n * The default cache replacement policy\n * See docs-src/query-cache.md to learn how it should work.\n * Notice that this runs often and should block the cpu as less as possible\n * This is a monad which makes it easier to unit test\n */\nexport var defaultCacheReplacementPolicyMonad = (tryToKeepMax, unExecutedLifetime) => (_collection, queryCache) => {\n  if (queryCache._map.size < tryToKeepMax) {\n    return;\n  }\n  var minUnExecutedLifetime = now() - unExecutedLifetime;\n  var maybeUncache = [];\n  var queriesInCache = Array.from(queryCache._map.values());\n  for (var rxQuery of queriesInCache) {\n    // filter out queries with subscribers\n    if (countRxQuerySubscribers(rxQuery) > 0) {\n      continue;\n    }\n    // directly uncache queries that never executed and are older then unExecutedLifetime\n    if (rxQuery._lastEnsureEqual === 0 && rxQuery._creationTime < minUnExecutedLifetime) {\n      uncacheRxQuery(queryCache, rxQuery);\n      continue;\n    }\n    maybeUncache.push(rxQuery);\n  }\n  var mustUncache = maybeUncache.length - tryToKeepMax;\n  if (mustUncache <= 0) {\n    return;\n  }\n  var sortedByLastUsage = maybeUncache.sort((a, b) => a._lastEnsureEqual - b._lastEnsureEqual);\n  var toRemove = sortedByLastUsage.slice(0, mustUncache);\n  toRemove.forEach(rxQuery => uncacheRxQuery(queryCache, rxQuery));\n};\nexport var defaultCacheReplacementPolicy = defaultCacheReplacementPolicyMonad(DEFAULT_TRY_TO_KEEP_MAX, DEFAULT_UNEXECUTED_LIFETIME);\nexport var COLLECTIONS_WITH_RUNNING_CLEANUP = new WeakSet();\n\n/**\n * Triggers the cache replacement policy after waitTime has passed.\n * We do not run this directly because at exactly the time a query is created,\n * we need all CPU to minimize latency.\n * Also this should not be triggered multiple times when waitTime is still waiting.\n */\nexport function triggerCacheReplacement(rxCollection) {\n  if (COLLECTIONS_WITH_RUNNING_CLEANUP.has(rxCollection)) {\n    // already started\n    return;\n  }\n  COLLECTIONS_WITH_RUNNING_CLEANUP.add(rxCollection);\n\n  /**\n   * Do not run directly to not reduce result latency of a new query\n   */\n  nextTick() // wait at least one tick\n  .then(() => requestIdlePromise(200)) // and then wait for the CPU to be idle\n  .then(() => {\n    if (!rxCollection.destroyed) {\n      rxCollection.cacheReplacementPolicy(rxCollection, rxCollection._queryCache);\n    }\n    COLLECTIONS_WITH_RUNNING_CLEANUP.delete(rxCollection);\n  });\n}\n", "import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getFromMapOrThrow, getHeightOfRevision, overwriteGetterForCaching, requestIdlePromiseNoQueue } from \"./plugins/utils/index.js\";\nimport { overwritable } from \"./overwritable.js\";\nimport { getDocumentDataOfRxChangeEvent } from \"./rx-change-event.js\";\n\n/**\n * Because we have to create many cache items,\n * we use an array instead of an object with properties\n * for better performance and less memory usage.\n * @link https://stackoverflow.com/questions/17295056/array-vs-object-efficiency-in-javascript\n */\n\n/**\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n */\n\n/**\n * The DocumentCache stores RxDocument objects\n * by their primary key and revision.\n * This is useful on client side applications where\n * it is not known how much memory can be used, so\n * we de-duplicate RxDocument states to save memory.\n * To not fill up the memory with old document states, the DocumentCache\n * only contains weak references to the RxDocuments themself.\n * @link https://caniuse.com/?search=weakref\n */\nexport var DocumentCache = /*#__PURE__*/function () {\n  /**\n   * Some JavaScript runtimes like QuickJS,\n   * so not have a FinalizationRegistry or WeakRef.\n   * Therefore we need a workaround which might waste a lot of memory,\n   * but at least works.\n   */\n\n  function DocumentCache(primaryPath, changes$,\n  /**\n   * A method that can create a RxDocument by the given document data.\n   */\n  documentCreator) {\n    this.cacheItemByDocId = new Map();\n    this.registry = typeof FinalizationRegistry === 'function' ? new FinalizationRegistry(docMeta => {\n      var docId = docMeta.docId;\n      var cacheItem = this.cacheItemByDocId.get(docId);\n      if (cacheItem) {\n        cacheItem[0].delete(docMeta.revisionHeight);\n        if (cacheItem[0].size === 0) {\n          /**\n           * No state of the document is cached anymore,\n           * so we can clean up.\n           */\n          this.cacheItemByDocId.delete(docId);\n        }\n      }\n    }) : undefined;\n    this.primaryPath = primaryPath;\n    this.changes$ = changes$;\n    this.documentCreator = documentCreator;\n    changes$.subscribe(changeEvent => {\n      var docId = changeEvent.documentId;\n      var cacheItem = this.cacheItemByDocId.get(docId);\n      if (cacheItem) {\n        var documentData = getDocumentDataOfRxChangeEvent(changeEvent);\n        cacheItem[1] = documentData;\n      }\n    });\n  }\n\n  /**\n   * Get the RxDocument from the cache\n   * and create a new one if not exits before.\n   * @overwrites itself with the actual function\n   * because this is @performance relevant.\n   * It is called on each document row for each write and read.\n   */\n  var _proto = DocumentCache.prototype;\n  /**\n   * Throws if not exists\n   */\n  _proto.getLatestDocumentData = function getLatestDocumentData(docId) {\n    var cacheItem = getFromMapOrThrow(this.cacheItemByDocId, docId);\n    return cacheItem[1];\n  };\n  _proto.getLatestDocumentDataIfExists = function getLatestDocumentDataIfExists(docId) {\n    var cacheItem = this.cacheItemByDocId.get(docId);\n    if (cacheItem) {\n      return cacheItem[1];\n    }\n  };\n  return _createClass(DocumentCache, [{\n    key: \"getCachedRxDocuments\",\n    get: function () {\n      var fn = getCachedRxDocumentMonad(this);\n      return overwriteGetterForCaching(this, 'getCachedRxDocuments', fn);\n    }\n  }, {\n    key: \"getCachedRxDocument\",\n    get: function () {\n      var fn = getCachedRxDocumentMonad(this);\n      return overwriteGetterForCaching(this, 'getCachedRxDocument', doc => fn([doc])[0]);\n    }\n  }]);\n}();\n\n/**\n * This function is called very very often.\n * This is likely the most important function for RxDB overall performance\n * @hotPath This is one of the most important methods for performance.\n * It is used in many places to transform the raw document data into RxDocuments.\n */\nfunction getCachedRxDocumentMonad(docCache) {\n  var primaryPath = docCache.primaryPath;\n  var cacheItemByDocId = docCache.cacheItemByDocId;\n  var registry = docCache.registry;\n  var deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\n  var documentCreator = docCache.documentCreator;\n  var fn = docsData => {\n    var ret = new Array(docsData.length);\n    var registryTasks = [];\n    for (var index = 0; index < docsData.length; index++) {\n      var docData = docsData[index];\n      var docId = docData[primaryPath];\n      var revisionHeight = getHeightOfRevision(docData._rev);\n      var byRev = void 0;\n      var cachedRxDocumentWeakRef = void 0;\n      var cacheItem = cacheItemByDocId.get(docId);\n      if (!cacheItem) {\n        byRev = new Map();\n        cacheItem = [byRev, docData];\n        cacheItemByDocId.set(docId, cacheItem);\n      } else {\n        byRev = cacheItem[0];\n        cachedRxDocumentWeakRef = byRev.get(revisionHeight);\n      }\n      var cachedRxDocument = cachedRxDocumentWeakRef ? cachedRxDocumentWeakRef.deref() : undefined;\n      if (!cachedRxDocument) {\n        docData = deepFreezeWhenDevMode(docData);\n        cachedRxDocument = documentCreator(docData);\n        byRev.set(revisionHeight, createWeakRefWithFallback(cachedRxDocument));\n        if (registry) {\n          registryTasks.push(cachedRxDocument);\n        }\n      }\n      ret[index] = cachedRxDocument;\n    }\n    if (registryTasks.length > 0 && registry) {\n      /**\n       * Calling registry.register() has shown to have\n       * really bad performance. So we add the cached documents\n       * lazily.\n       */\n      requestIdlePromiseNoQueue().then(() => {\n        for (var _index = 0; _index < registryTasks.length; _index++) {\n          var doc = registryTasks[_index];\n          registry.register(doc, {\n            docId: doc.primary,\n            revisionHeight: getHeightOfRevision(doc.revision)\n          });\n        }\n      });\n    }\n    return ret;\n  };\n  return fn;\n}\nexport function mapDocumentsDataToCacheDocs(docCache, docsData) {\n  var getCachedRxDocuments = docCache.getCachedRxDocuments;\n  return getCachedRxDocuments(docsData);\n}\n\n/**\n * Fallback for JavaScript runtimes that do not support WeakRef.\n * The fallback will keep the items in cache forever,\n * but at least works.\n */\nvar HAS_WEAK_REF = typeof WeakRef === 'function';\nvar createWeakRefWithFallback = HAS_WEAK_REF ? createWeakRef : createWeakRefFallback;\nfunction createWeakRef(obj) {\n  return new WeakRef(obj);\n}\nfunction createWeakRefFallback(obj) {\n  return {\n    deref() {\n      return obj;\n    }\n  };\n}\n", "import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { mapDocumentsDataToCacheDocs } from \"./doc-cache.js\";\nimport { now, overwriteGetterForCaching } from \"./plugins/utils/index.js\";\n/**\n * RxDB needs the query results in multiple formats.\n * Sometimes as a Map or an array with only the documentData.\n * For better performance we work with this class\n * that initializes stuff lazily so that\n * we can directly work with the query results after RxQuery.exec()\n */\nexport var RxQuerySingleResult = /*#__PURE__*/function () {\n  /**\n   * Time at which the current _result state was created.\n   * Used to determine if the result set has changed since X\n   * so that we do not emit the same result multiple times on subscription.\n   */\n\n  function RxQuerySingleResult(collection,\n  // only used internally, do not use outside, use this.docsData instead\n  docsDataFromStorageInstance,\n  // can be overwritten for count-queries\n  count) {\n    this.time = now();\n    this.collection = collection;\n    this.count = count;\n    this.documents = mapDocumentsDataToCacheDocs(this.collection._docCache, docsDataFromStorageInstance);\n  }\n\n  /**\n   * Instead of using the newResultData in the result cache,\n   * we directly use the objects that are stored in the RxDocument\n   * to ensure we do not store the same data twice and fill up the memory.\n   * @overwrites itself with the actual value\n   */\n  return _createClass(RxQuerySingleResult, [{\n    key: \"docsData\",\n    get: function () {\n      return overwriteGetterForCaching(this, 'docsData', this.documents.map(d => d._data));\n    }\n\n    // A key->document map, used in the event reduce optimization.\n  }, {\n    key: \"docsDataMap\",\n    get: function () {\n      var map = new Map();\n      this.documents.forEach(d => {\n        map.set(d.primary, d._data);\n      });\n      return overwriteGetterForCaching(this, 'docsDataMap', map);\n    }\n  }, {\n    key: \"docsMap\",\n    get: function () {\n      var map = new Map();\n      var documents = this.documents;\n      for (var i = 0; i < documents.length; i++) {\n        var doc = documents[i];\n        map.set(doc.primary, doc);\n      }\n      return overwriteGetterForCaching(this, 'docsMap', map);\n    }\n  }]);\n}();\n", "export function lastOfArray(ar) {\n  return ar[ar.length - 1];\n}\n/**\n * @link https://stackoverflow.com/a/5915122\n */\nexport function randomOfArray(items) {\n  return items[Math.floor(Math.random() * items.length)];\n}\nexport function shuffleArray(arr) {\n  return arr.slice().sort(() => Math.random() - 0.5);\n}\n/**\n * normalizes sort-field\n * in: '-age'\n * out: 'age'\n */\nexport function normalizeSortField(field) {\n  if (field.startsWith('-')) {\n    return field.substr(1);\n  } else {\n    return field;\n  }\n}\nexport function getSortFieldsOfQuery(query) {\n  if (!query.sort) {\n    // if no sort-order is set, use the primary key\n    return ['_id'];\n  }\n  return query.sort.map(maybeArray => {\n    if (Array.isArray(maybeArray)) {\n      return maybeArray[0].map(field => normalizeSortField(field));\n    } else {\n      return normalizeSortField(maybeArray);\n    }\n  });\n}\n/**\n *  @link https://stackoverflow.com/a/1431113\n */\nexport function replaceCharAt(str, index, replacement) {\n  return str.substr(0, index) + replacement + str.substr(index + replacement.length);\n}\nexport function mapToObject(map) {\n  const ret = {};\n  map.forEach((value, key) => {\n    ret[key] = value;\n  });\n  return ret;\n}\nexport function objectToMap(object) {\n  const ret = new Map();\n  Object.entries(object).forEach(([k, v]) => {\n    ret.set(k, v);\n  });\n  return ret;\n}\nexport function cloneMap(map) {\n  const ret = new Map();\n  map.forEach((value, key) => {\n    ret[key] = value;\n  });\n  return ret;\n}\n/**\n * does a flat copy on the objects,\n * is about 3 times faster then using deepClone\n * @link https://jsperf.com/object-rest-spread-vs-clone/2\n */\nexport function flatClone(obj) {\n  return Object.assign({}, obj);\n}\nexport function ensureNotFalsy(obj) {\n  if (!obj) {\n    throw new Error('ensureNotFalsy() is falsy');\n  }\n  return obj;\n}\nexport function mergeSets(sets) {\n  let ret = new Set();\n  sets.forEach(set => {\n    ret = new Set([...ret, ...set]);\n  });\n  return ret;\n}\n/**\n * @link https://stackoverflow.com/a/12830454/3443137\n */\nexport function roundToTwoDecimals(num) {\n  return parseFloat(num.toFixed(2));\n}\nexport function isObject(value) {\n  const type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\nexport function getProperty(object, path, value) {\n  if (Array.isArray(path)) {\n    path = path.join('.');\n  }\n  if (!isObject(object) || typeof path !== 'string') {\n    return value === undefined ? object : value;\n  }\n  const pathArray = path.split('.');\n  if (pathArray.length === 0) {\n    return value;\n  }\n  for (let index = 0; index < pathArray.length; index++) {\n    const key = pathArray[index];\n    if (isStringIndex(object, key)) {\n      object = index === pathArray.length - 1 ? undefined : null;\n    } else {\n      object = object[key];\n    }\n    if (object === undefined || object === null) {\n      // `object` is either `undefined` or `null` so we want to stop the loop, and\n      // if this is not the last bit of the path, and\n      // if it didn't return `undefined`\n      // it would return `null` if `object` is `null`\n      // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`\n      if (index !== pathArray.length - 1) {\n        return value;\n      }\n      break;\n    }\n  }\n  return object === undefined ? value : object;\n}\nfunction isStringIndex(object, key) {\n  if (typeof key !== 'number' && Array.isArray(object)) {\n    const index = Number.parseInt(key, 10);\n    return Number.isInteger(index) && object[index] === object[key];\n  }\n  return false;\n}\n", "import { getProperty, lastOfArray } from '../util.js';\nexport const hasLimit = input => {\n  return !!input.queryParams.limit;\n};\nexport const isFindOne = input => {\n  return input.queryParams.limit === 1;\n};\nexport const hasSkip = input => {\n  if (input.queryParams.skip && input.queryParams.skip > 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const isDelete = input => {\n  return input.changeEvent.operation === 'DELETE';\n};\nexport const isInsert = input => {\n  return input.changeEvent.operation === 'INSERT';\n};\nexport const isUpdate = input => {\n  return input.changeEvent.operation === 'UPDATE';\n};\nexport const wasLimitReached = input => {\n  return hasLimit(input) && input.previousResults.length >= input.queryParams.limit;\n};\nexport const sortParamsChanged = input => {\n  const sortFields = input.queryParams.sortFields;\n  const prev = input.changeEvent.previous;\n  const doc = input.changeEvent.doc;\n  if (!doc) {\n    return false;\n  }\n  if (!prev) {\n    return true;\n  }\n  for (let i = 0; i < sortFields.length; i++) {\n    const field = sortFields[i];\n    const beforeData = getProperty(prev, field);\n    const afterData = getProperty(doc, field);\n    if (beforeData !== afterData) {\n      return true;\n    }\n  }\n  return false;\n};\nexport const wasInResult = input => {\n  const id = input.changeEvent.id;\n  if (input.keyDocumentMap) {\n    const has = input.keyDocumentMap.has(id);\n    return has;\n  } else {\n    const primary = input.queryParams.primaryKey;\n    const results = input.previousResults;\n    for (let i = 0; i < results.length; i++) {\n      const item = results[i];\n      if (item[primary] === id) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\nexport const wasFirst = input => {\n  const first = input.previousResults[0];\n  if (first && first[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const wasLast = input => {\n  const last = lastOfArray(input.previousResults);\n  if (last && last[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const wasSortedBeforeFirst = input => {\n  const prev = input.changeEvent.previous;\n  if (!prev) {\n    return false;\n  }\n  const first = input.previousResults[0];\n  if (!first) {\n    return false;\n  }\n  /**\n   * If the changed document is the same as the first,\n   * we cannot sort-compare them, because it might end in a non-deterministic\n   * sort order. Because both document could be equal.\n   * So instead we have to return true.\n   */\n  if (first[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  }\n  const comp = input.queryParams.sortComparator(prev, first);\n  return comp < 0;\n};\nexport const wasSortedAfterLast = input => {\n  const prev = input.changeEvent.previous;\n  if (!prev) {\n    return false;\n  }\n  const last = lastOfArray(input.previousResults);\n  if (!last) {\n    return false;\n  }\n  if (last[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  }\n  const comp = input.queryParams.sortComparator(prev, last);\n  return comp > 0;\n};\nexport const isSortedBeforeFirst = input => {\n  const doc = input.changeEvent.doc;\n  if (!doc) {\n    return false;\n  }\n  const first = input.previousResults[0];\n  if (!first) {\n    return false;\n  }\n  if (first[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  }\n  const comp = input.queryParams.sortComparator(doc, first);\n  return comp < 0;\n};\nexport const isSortedAfterLast = input => {\n  const doc = input.changeEvent.doc;\n  if (!doc) {\n    return false;\n  }\n  const last = lastOfArray(input.previousResults);\n  if (!last) {\n    return false;\n  }\n  if (last[input.queryParams.primaryKey] === input.changeEvent.id) {\n    return true;\n  }\n  const comp = input.queryParams.sortComparator(doc, last);\n  return comp > 0;\n};\nexport const wasMatching = input => {\n  const prev = input.changeEvent.previous;\n  if (!prev) {\n    return false;\n  }\n  return input.queryParams.queryMatcher(prev);\n};\nexport const doesMatchNow = input => {\n  const doc = input.changeEvent.doc;\n  if (!doc) {\n    return false;\n  }\n  const ret = input.queryParams.queryMatcher(doc);\n  return ret;\n};\nexport const wasResultsEmpty = input => {\n  return input.previousResults.length === 0;\n};\n", "import { hasLimit, isFindOne, hasSkip, wasResultsEmpty, isDelete, isInsert, isUpdate, wasLimitReached, sortParamsChanged, wasInResult, wasFirst, wasLast, wasSortedBeforeFirst, wasSortedAfterLast, isSortedBeforeFirst, isSortedAfterLast, wasMatching, doesMatchNow } from './state-resolver.js';\nexport * from './state-resolver.js';\n/**\n * all states ordered by performance-cost\n * cheapest first\n * TODO run tests on which is really the fastest\n */\nexport const orderedStateList = ['isInsert', 'isUpdate', 'isDelete', 'hasLimit', 'isFindOne', 'hasSkip', 'wasResultsEmpty', 'wasLimitReached', 'wasFirst', 'wasLast', 'sortParamsChanged', 'wasInResult', 'wasSortedBeforeFirst', 'wasSortedAfterLast', 'isSortedBeforeFirst', 'isSortedAfterLast', 'wasMatching', 'doesMatchNow'];\nexport const stateResolveFunctions = {\n  isInsert,\n  isUpdate,\n  isDelete,\n  hasLimit,\n  isFindOne,\n  hasSkip,\n  wasResultsEmpty,\n  wasLimitReached,\n  wasFirst,\n  wasLast,\n  sortParamsChanged,\n  wasInResult,\n  wasSortedBeforeFirst,\n  wasSortedAfterLast,\n  isSortedBeforeFirst,\n  isSortedAfterLast,\n  wasMatching,\n  doesMatchNow\n};\nexport const stateResolveFunctionByIndex = {\n  0: isInsert,\n  1: isUpdate,\n  2: isDelete,\n  3: hasLimit,\n  4: isFindOne,\n  5: hasSkip,\n  6: wasResultsEmpty,\n  7: wasLimitReached,\n  8: wasFirst,\n  9: wasLast,\n  10: sortParamsChanged,\n  11: wasInResult,\n  12: wasSortedBeforeFirst,\n  13: wasSortedAfterLast,\n  14: isSortedBeforeFirst,\n  15: isSortedAfterLast,\n  16: wasMatching,\n  17: doesMatchNow\n};\nexport function resolveState(stateName, input) {\n  const fn = stateResolveFunctions[stateName];\n  if (!fn) {\n    throw new Error('resolveState() has no function for ' + stateName);\n  }\n  return fn(input);\n}\nexport function getStateSet(input) {\n  let set = '';\n  for (let i = 0; i < orderedStateList.length; i++) {\n    const name = orderedStateList[i];\n    const value = resolveState(name, input);\n    const add = value ? '1' : '0';\n    set += add;\n  }\n  return set;\n}\nexport function logStateSet(stateSet) {\n  orderedStateList.forEach((state, index) => {\n    console.log('state: ' + state + ' : ' + stateSet[index]);\n  });\n}\n", "/**\n * copied and adapted from npm 'binary-search-insert'\n * @link https://www.npmjs.com/package/binary-search-insert\n */\nexport function pushAtSortPosition(array, item, compareFunction, low) {\n  var length = array.length;\n  var high = length - 1;\n  var mid = 0;\n\n  /**\n   * Optimization shortcut.\n   */\n  if (length === 0) {\n    array.push(item);\n    return 0;\n  }\n\n  /**\n   * So we do not have to get the ret[mid] doc again\n   * at the last we store it here.\n   */\n  var lastMidDoc;\n  while (low <= high) {\n    // https://github.com/darkskyapp/binary-search\n    // http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n    mid = low + (high - low >> 1);\n    lastMidDoc = array[mid];\n    if (compareFunction(lastMidDoc, item) <= 0.0) {\n      // searching too low\n      low = mid + 1;\n    } else {\n      // searching too high\n      high = mid - 1;\n    }\n  }\n  if (compareFunction(lastMidDoc, item) <= 0.0) {\n    mid++;\n  }\n\n  /**\n   * Insert at correct position\n   */\n  array.splice(mid, 0, item);\n  return mid;\n}", "import { pushAtSortPosition } from 'array-push-at-sort-position';\nexport const doNothing = _input => {};\nexport const insertFirst = input => {\n  input.previousResults.unshift(input.changeEvent.doc);\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n  }\n};\nexport const insertLast = input => {\n  input.previousResults.push(input.changeEvent.doc);\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n  }\n};\nexport const removeFirstItem = input => {\n  const first = input.previousResults.shift();\n  if (input.keyDocumentMap && first) {\n    input.keyDocumentMap.delete(first[input.queryParams.primaryKey]);\n  }\n};\nexport const removeLastItem = input => {\n  const last = input.previousResults.pop();\n  if (input.keyDocumentMap && last) {\n    input.keyDocumentMap.delete(last[input.queryParams.primaryKey]);\n  }\n};\nexport const removeFirstInsertLast = input => {\n  removeFirstItem(input);\n  insertLast(input);\n};\nexport const removeLastInsertFirst = input => {\n  removeLastItem(input);\n  insertFirst(input);\n};\nexport const removeFirstInsertFirst = input => {\n  removeFirstItem(input);\n  insertFirst(input);\n};\nexport const removeLastInsertLast = input => {\n  removeLastItem(input);\n  insertLast(input);\n};\nexport const removeExisting = input => {\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.delete(input.changeEvent.id);\n  }\n  // find index of document\n  const primary = input.queryParams.primaryKey;\n  const results = input.previousResults;\n  for (let i = 0; i < results.length; i++) {\n    const item = results[i];\n    // remove\n    if (item[primary] === input.changeEvent.id) {\n      results.splice(i, 1);\n      break;\n    }\n  }\n};\nexport const replaceExisting = input => {\n  // find index of document\n  const doc = input.changeEvent.doc;\n  const primary = input.queryParams.primaryKey;\n  const results = input.previousResults;\n  for (let i = 0; i < results.length; i++) {\n    const item = results[i];\n    // replace\n    if (item[primary] === input.changeEvent.id) {\n      results[i] = doc;\n      if (input.keyDocumentMap) {\n        input.keyDocumentMap.set(input.changeEvent.id, doc);\n      }\n      break;\n    }\n  }\n};\n/**\n * this function always returns wrong results\n * it must be later optimised out\n * otherwise there is something broken\n */\nexport const alwaysWrong = input => {\n  const wrongHuman = {\n    _id: 'wrongHuman' + new Date().getTime()\n  };\n  input.previousResults.length = 0; // clear array\n  input.previousResults.push(wrongHuman);\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.clear();\n    input.keyDocumentMap.set(wrongHuman._id, wrongHuman);\n  }\n};\nexport const insertAtSortPosition = input => {\n  const docId = input.changeEvent.id;\n  const doc = input.changeEvent.doc;\n  if (input.keyDocumentMap) {\n    if (input.keyDocumentMap.has(docId)) {\n      /**\n       * If document is already in results,\n       * we cannot add it again because it would throw on non-deterministic ordering.\n       */\n      return;\n    }\n    input.keyDocumentMap.set(docId, doc);\n  } else {\n    const isDocInResults = input.previousResults.find(d => d[input.queryParams.primaryKey] === docId);\n    /**\n     * If document is already in results,\n     * we cannot add it again because it would throw on non-deterministic ordering.\n     */\n    if (isDocInResults) {\n      return;\n    }\n  }\n  pushAtSortPosition(input.previousResults, doc, input.queryParams.sortComparator, 0);\n};\nexport const removeExistingAndInsertAtSortPosition = input => {\n  removeExisting(input);\n  insertAtSortPosition(input);\n};\nexport const runFullQueryAgain = _input => {\n  throw new Error('Action runFullQueryAgain must be implemented by yourself');\n};\nexport const unknownAction = _input => {\n  throw new Error('Action unknownAction should never be called');\n};\n", "import { doNothing, insertFirst, insertLast, removeFirstItem, removeLastItem, removeFirstInsertLast, removeLastInsertFirst, removeExisting, replaceExisting, alwaysWrong, insertAtSortPosition, removeExistingAndInsertAtSortPosition, runFullQueryAgain, unknownAction, removeFirstInsertFirst, removeLastInsertLast } from './action-functions.js';\nexport * from './action-functions.js';\n/**\n * all actions ordered by performance-cost\n * cheapest first\n * TODO run tests on which is really the fastest\n */\nexport const orderedActionList = ['doNothing', 'insertFirst', 'insertLast', 'removeFirstItem', 'removeLastItem', 'removeFirstInsertLast', 'removeLastInsertFirst', 'removeFirstInsertFirst', 'removeLastInsertLast', 'removeExisting', 'replaceExisting', 'alwaysWrong', 'insertAtSortPosition', 'removeExistingAndInsertAtSortPosition', 'runFullQueryAgain', 'unknownAction'];\nexport const actionFunctions = {\n  doNothing,\n  insertFirst,\n  insertLast,\n  removeFirstItem,\n  removeLastItem,\n  removeFirstInsertLast,\n  removeLastInsertFirst,\n  removeFirstInsertFirst,\n  removeLastInsertLast,\n  removeExisting,\n  replaceExisting,\n  alwaysWrong,\n  insertAtSortPosition,\n  removeExistingAndInsertAtSortPosition,\n  runFullQueryAgain,\n  unknownAction\n};\n", "/*\nlet t = 0;\nwhile (t < 10000) {\n    const char = String.fromCharCode(t);\n    console.log(t + ' : ' + char);\n    t++;\n}\n*/\n/*\n\nTo have a really small string representation, we have to hack some stuff\nwhich makes is complicated but effective.\n\nRules for the string:\n- The string starts with a number like '23' that defines how many leaf-nodes we have\n- leaf nodes consist of two chars like 'ab'\n    - the first char is the id\n    - the second the value is a number you can get via String.charCodeAt()\n- Internal nodes have four chars like 'abcd'\n    - the first char is the id\n    - the second char is the id of the 0-branch\n    - the third char is the id of the 1-branch\n    - the last char is the id of the boolean-function (= level)\n- The last 3 chars of the string is the root node like 'abc'\n    - it looks like the internal-node but without the id (first char)\n\n*/\n// we use this because 39 is the quotes which causes problems\nexport const CHAR_CODE_OFFSET = 40; // String.fromCharCode(33) === ')'\nexport function getCharOfLevel(level) {\n  const charCode = CHAR_CODE_OFFSET + level;\n  return String.fromCharCode(charCode);\n}\nexport function getNumberOfChar(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode - CHAR_CODE_OFFSET;\n}\nexport function getCharOfValue(value) {\n  const charCode = CHAR_CODE_OFFSET + value;\n  return String.fromCharCode(charCode);\n}\nexport const FIRST_CHAR_CODE_FOR_ID = 97; // String.fromCharCode(97) === 'a'\nexport function getNextCharId(lastCode) {\n  // jump these codes because they look strange\n  if (lastCode >= 128 && lastCode <= 160) {\n    lastCode = 161;\n  }\n  const char = String.fromCharCode(lastCode);\n  return {\n    char,\n    nextCode: lastCode + 1\n  };\n}\n", "export function booleanStringToBoolean(str) {\n  if (str === '1') {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function booleanToBooleanString(b) {\n  if (b) {\n    return '1';\n  } else {\n    return '0';\n  }\n}\nexport function oppositeBoolean(input) {\n  if (input === '1') {\n    return '0';\n  } else {\n    return '1';\n  }\n}\nexport function lastChar(str) {\n  return str.slice(-1);\n}\n/**\n * @link https://stackoverflow.com/a/1349426\n */\nfunction makeid(length = 6) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\nconst nodeIdPrefix = makeid(4);\nlet lastIdGen = 0;\nexport function nextNodeId() {\n  const ret = 'node_' + nodeIdPrefix + '_' + lastIdGen;\n  lastIdGen++;\n  return ret;\n}\n/**\n * @link https://stackoverflow.com/a/16155417\n */\nexport function decimalToPaddedBinary(decimal, padding) {\n  const binary = (decimal >>> 0).toString(2);\n  const padded = binary.padStart(padding, '0');\n  return padded;\n}\nexport function oppositeBinary(i) {\n  if (i === '1') {\n    return '0';\n  } else if (i === '0') {\n    return '1';\n  } else {\n    throw new Error('non-binary given');\n  }\n}\nexport function binaryToDecimal(binary) {\n  return parseInt(binary, 2);\n}\nexport function minBinaryWithLength(length) {\n  return new Array(length).fill(0).map(() => '0').join('');\n}\nexport function maxBinaryWithLength(length) {\n  return new Array(length).fill(0).map(() => '1').join('');\n}\nexport function getNextStateSet(stateSet) {\n  const decimal = binaryToDecimal(stateSet);\n  const increase = decimal + 1;\n  const binary = decimalToPaddedBinary(increase, stateSet.length);\n  return binary;\n}\nexport function firstKeyOfMap(map) {\n  const iterator1 = map.keys();\n  return iterator1.next().value;\n}\n/**\n * Shuffles array in place. ES6 version\n * @link https://stackoverflow.com/a/6274381\n */\nexport function shuffleArray(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport function lastOfArray(ar) {\n  return ar[ar.length - 1];\n}\n/**\n * @link https://stackoverflow.com/a/6259536\n */\nexport function splitStringToChunks(str, chunkSize) {\n  const chunks = [];\n  for (let i = 0, charsLength = str.length; i < charsLength; i += chunkSize) {\n    chunks.push(str.substring(i, i + chunkSize));\n  }\n  return chunks;\n}\n", "import { splitStringToChunks } from '../util.js';\nimport { getNumberOfChar } from './string-format.js';\nexport function minimalStringToSimpleBdd(str) {\n  const nodesById = new Map();\n  // parse leaf nodes\n  const leafNodeAmount = parseInt(str.charAt(0) + str.charAt(1), 10);\n  const lastLeafNodeChar = 2 + leafNodeAmount * 2;\n  const leafNodeChars = str.substring(2, lastLeafNodeChar);\n  const leafNodeChunks = splitStringToChunks(leafNodeChars, 2);\n  for (let i = 0; i < leafNodeChunks.length; i++) {\n    const chunk = leafNodeChunks[i];\n    const id = chunk.charAt(0);\n    const value = getNumberOfChar(chunk.charAt(1));\n    nodesById.set(id, value);\n  }\n  // parse internal nodes\n  const internalNodeChars = str.substring(lastLeafNodeChar, str.length - 3);\n  const internalNodeChunks = splitStringToChunks(internalNodeChars, 4);\n  for (let i = 0; i < internalNodeChunks.length; i++) {\n    const chunk = internalNodeChunks[i];\n    const id = chunk.charAt(0);\n    const idOf0Branch = chunk.charAt(1);\n    const idOf1Branch = chunk.charAt(2);\n    const level = getNumberOfChar(chunk.charAt(3));\n    if (!nodesById.has(idOf0Branch)) {\n      throw new Error('missing node with id ' + idOf0Branch);\n    }\n    if (!nodesById.has(idOf1Branch)) {\n      throw new Error('missing node with id ' + idOf1Branch);\n    }\n    const node0 = nodesById.get(idOf0Branch);\n    const node1 = nodesById.get(idOf1Branch);\n    const node = {\n      l: level,\n      // level is first for prettier json output\n      0: node0,\n      1: node1\n    };\n    nodesById.set(id, node);\n  }\n  // parse root node\n  const last3 = str.slice(-3);\n  const idOf0 = last3.charAt(0);\n  const idOf1 = last3.charAt(1);\n  const levelOfRoot = getNumberOfChar(last3.charAt(2));\n  const nodeOf0 = nodesById.get(idOf0);\n  const nodeOf1 = nodesById.get(idOf1);\n  const rootNode = {\n    l: levelOfRoot,\n    0: nodeOf0,\n    1: nodeOf1\n  };\n  return rootNode;\n}\n", "import { booleanToBooleanString } from '../util.js';\nexport function resolveWithSimpleBdd(simpleBdd, fns, input) {\n  let currentNode = simpleBdd;\n  let currentLevel = simpleBdd.l;\n  while (true) {\n    const booleanResult = fns[currentLevel](input);\n    const branchKey = booleanToBooleanString(booleanResult);\n    currentNode = currentNode[branchKey];\n    if (typeof currentNode === 'number' || typeof currentNode === 'string') {\n      return currentNode;\n    } else {\n      currentLevel = currentNode.l;\n    }\n  }\n}\n", "import { minimalStringToSimpleBdd, resolveWithSimpleBdd } from 'binary-decision-diagram';\nimport { stateResolveFunctionByIndex } from '../states/index.js';\nexport const minimalBddString = '14a1b,c+d2e5f0g/h.i4j*k-l)m(n6oeh6pnm6qen6ril6snh6tin6ubo9vce9wmh9xns9yne9zmi9{cm9|ad9}cp9~aq9ae9¡bf9¢bq9£cg9¤ck9¥cn9¦nd9§np9¨nq9©nf9ªng9«nm9¬nk9­mr9®ms9¯mt9°mj9±mk9²ml9³mn9´mc8µ³{8¶¯}8·°¤8¸³§8¹mn8º³«8»³m8¼m´4½z²4¾³w4¿zµ4À¯¶4Á°·4Â³º4Ã³¸4Äm¹4Åv¤7Æyn7ÇÀÁ7È~7É¥¤7ÊÃÄ7Ë¨n7Ìº¹7Í­°7Î®m7Ï¯°7Ð±m7Ñ³m7Ò¼m5ÓÄm5Ô¹m5Õ½°5Ö¾m5×¿°5ØÇÏ5ÙÂm5ÚÊÑ5Û±m5Üºm5ÝÌÑ5ÞÕÍ2ß|2à¡u2á£Å2âÖÎ2ã¦Æ2ä©x2åªÆ2æ×Ø2ç|È2è¡¢2é£É2ê¤¥2ëÙÚ2ì¦Ë2í©n2îªn2ïÛÐ2ðÜÝ2ñ¬n2òÒÓ/óan/ôbn/õcn/öÞâ/÷ßã/øàä/ùáå/úæë/ûçì/üèí/ýéî/þÍÎ/ÿÏÑ/ĀòÔ,ācn,Ăöï,ă¤ñ,Ąúð,ąêñ,ĆþÐ,ćÿÑ,Ĉac0ĉbc0Ċóõ0ċôā0Čßá0čà¤0Ďçé0ďèê0Đ÷ù0đøă0Ēûý0ēüą0ĔmÒ-ĕmĀ-ĖÞæ-ėČĎ-Ęčď-ęĂĄ-ĚĐĒ-ěđē-Ĝ²»-ĝÍÏ-ĞĆć-ğ²³-ĠĔĈ3ġĕĊ3ĢĖė3ģęĚ3ĤĢĝ(ĥĜğ(ĦģĞ(ħĠġ+Ĩĉċ+ĩĤĦ+ĪĘě+īħĨ1ĬĩĪ1ĭĬī*Įĥm*ĭĮ.';\nlet simpleBdd;\nexport function getSimpleBdd() {\n  if (!simpleBdd) {\n    simpleBdd = minimalStringToSimpleBdd(minimalBddString);\n  }\n  return simpleBdd;\n}\nexport const resolveInput = input => {\n  return resolveWithSimpleBdd(getSimpleBdd(), stateResolveFunctionByIndex, input);\n};\n", "import { getStateSet } from './states/index.js';\nimport { actionFunctions, orderedActionList } from './actions/index.js';\nimport { resolveInput } from './bdd/bdd.generated.js';\nexport * from './states/index.js';\nexport * from './util.js';\nexport * from './actions/index.js';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n  const stateSet = getStateSet(input);\n  const actionName = stateSetToActionMap.get(stateSet);\n  if (!actionName) {\n    return {\n      action: 'runFullQueryAgain',\n      stateSet\n    };\n  } else {\n    return {\n      action: actionName,\n      stateSet\n    };\n  }\n}\nexport function calculateActionName(input) {\n  const resolvedActionId = resolveInput(input);\n  return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n  const actionName = calculateActionName(input);\n  return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n  const fn = actionFunctions[action];\n  fn({\n    queryParams,\n    changeEvent,\n    previousResults,\n    keyDocumentMap\n  });\n  return previousResults;\n}\n", "import { calculateActionName, runAction } from 'event-reduce-js';\nimport { rxChangeEventToEventReduceChangeEvent } from \"./rx-change-event.js\";\nimport { arrayFilterNotEmpty, clone, ensureNotFalsy, getFromMapOrCreate } from \"./plugins/utils/index.js\";\nimport { getQueryMatcher, getSortComparator, normalizeMangoQuery } from \"./rx-query-helper.js\";\nexport function getSortFieldsOfQuery(primaryKey, query) {\n  if (!query.sort || query.sort.length === 0) {\n    return [primaryKey];\n  } else {\n    return query.sort.map(part => Object.keys(part)[0]);\n  }\n}\nexport var RXQUERY_QUERY_PARAMS_CACHE = new WeakMap();\nexport function getQueryParams(rxQuery) {\n  return getFromMapOrCreate(RXQUERY_QUERY_PARAMS_CACHE, rxQuery, () => {\n    var collection = rxQuery.collection;\n    var normalizedMangoQuery = normalizeMangoQuery(collection.storageInstance.schema, clone(rxQuery.mangoQuery));\n    var primaryKey = collection.schema.primaryPath;\n\n    /**\n     * Create a custom sort comparator\n     * that uses the hooks to ensure\n     * we send for example compressed documents to be sorted by compressed queries.\n     */\n    var sortComparator = getSortComparator(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useSortComparator = (docA, docB) => {\n      var sortComparatorData = {\n        docA,\n        docB,\n        rxQuery\n      };\n      return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n    };\n\n    /**\n     * Create a custom query matcher\n     * that uses the hooks to ensure\n     * we send for example compressed documents to match compressed queries.\n     */\n    var queryMatcher = getQueryMatcher(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useQueryMatcher = doc => {\n      var queryMatcherData = {\n        doc,\n        rxQuery\n      };\n      return queryMatcher(queryMatcherData.doc);\n    };\n    var ret = {\n      primaryKey: rxQuery.collection.schema.primaryPath,\n      skip: normalizedMangoQuery.skip,\n      limit: normalizedMangoQuery.limit,\n      sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery),\n      sortComparator: useSortComparator,\n      queryMatcher: useQueryMatcher\n    };\n    return ret;\n  });\n}\nexport function calculateNewResults(rxQuery, rxChangeEvents) {\n  if (!rxQuery.collection.database.eventReduce) {\n    return {\n      runFullQueryAgain: true\n    };\n  }\n  var queryParams = getQueryParams(rxQuery);\n  var previousResults = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n  var previousResultsMap = ensureNotFalsy(rxQuery._result).docsDataMap;\n  var changed = false;\n  var eventReduceEvents = rxChangeEvents.map(cE => rxChangeEventToEventReduceChangeEvent(cE)).filter(arrayFilterNotEmpty);\n  var foundNonOptimizeable = eventReduceEvents.find(eventReduceEvent => {\n    var stateResolveFunctionInput = {\n      queryParams,\n      changeEvent: eventReduceEvent,\n      previousResults,\n      keyDocumentMap: previousResultsMap\n    };\n    var actionName = calculateActionName(stateResolveFunctionInput);\n    if (actionName === 'runFullQueryAgain') {\n      return true;\n    } else if (actionName !== 'doNothing') {\n      changed = true;\n      runAction(actionName, queryParams, eventReduceEvent, previousResults, previousResultsMap);\n      return false;\n    }\n  });\n  if (foundNonOptimizeable) {\n    return {\n      runFullQueryAgain: true\n    };\n  } else {\n    return {\n      runFullQueryAgain: false,\n      changed,\n      newResults: previousResults\n    };\n  }\n}\n", "import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { BehaviorSubject, firstValueFrom, merge } from 'rxjs';\nimport { mergeMap, filter, map, startWith, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport { sortObject, pluginMissing, overwriteGetterForCaching, now, PROMISE_RESOLVE_FALSE, RXJS_SHARE_REPLAY_DEFAULTS, ensureNotFalsy, areRxDocumentArraysEqual, appendToArray } from \"./plugins/utils/index.js\";\nimport { newRxError } from \"./rx-error.js\";\nimport { runPluginHooks } from \"./hooks.js\";\nimport { calculateNewResults } from \"./event-reduce.js\";\nimport { triggerCacheReplacement } from \"./query-cache.js\";\nimport { getQueryMatcher, normalizeMangoQuery, runQueryUpdateFunction } from \"./rx-query-helper.js\";\nimport { RxQuerySingleResult } from \"./rx-query-single-result.js\";\nimport { getQueryPlan } from \"./query-planner.js\";\nvar _queryCount = 0;\nvar newQueryID = function () {\n  return ++_queryCount;\n};\nexport var RxQueryBase = /*#__PURE__*/function () {\n  /**\n   * Some stats then are used for debugging and cache replacement policies\n   */\n\n  // used in the query-cache to determine if the RxQuery can be cleaned up.\n\n  // used to count the subscribers to the query\n\n  /**\n   * Contains the current result state\n   * or null if query has not run yet.\n   */\n\n  function RxQueryBase(op, mangoQuery, collection,\n  // used by some plugins\n  other = {}) {\n    this.id = newQueryID();\n    this._execOverDatabaseCount = 0;\n    this._creationTime = now();\n    this._lastEnsureEqual = 0;\n    this.uncached = false;\n    this.refCount$ = new BehaviorSubject(null);\n    this._result = null;\n    this._latestChangeEvent = -1;\n    this._lastExecStart = 0;\n    this._lastExecEnd = 0;\n    this._ensureEqualQueue = PROMISE_RESOLVE_FALSE;\n    this.op = op;\n    this.mangoQuery = mangoQuery;\n    this.collection = collection;\n    this.other = other;\n    if (!mangoQuery) {\n      this.mangoQuery = _getDefaultQuery();\n    }\n    this.isFindOneByIdQuery = isFindOneByIdQuery(this.collection.schema.primaryPath, mangoQuery);\n  }\n  var _proto = RxQueryBase.prototype;\n  /**\n   * Returns an observable that emits the results\n   * This should behave like an rxjs-BehaviorSubject which means:\n   * - Emit the current result-set on subscribe\n   * - Emit the new result-set when an RxChangeEvent comes in\n   * - Do not emit anything before the first result-set was created (no null)\n   */\n  /**\n   * set the new result-data as result-docs of the query\n   * @param newResultData json-docs that were received from the storage\n   */\n  _proto._setResultData = function _setResultData(newResultData) {\n    if (typeof newResultData === 'number') {\n      this._result = new RxQuerySingleResult(this.collection, [], newResultData);\n      return;\n    } else if (newResultData instanceof Map) {\n      newResultData = Array.from(newResultData.values());\n    }\n    var newQueryResult = new RxQuerySingleResult(this.collection, newResultData, newResultData.length);\n    this._result = newQueryResult;\n  }\n\n  /**\n   * executes the query on the database\n   * @return results-array with document-data\n   */;\n  _proto._execOverDatabase = async function _execOverDatabase() {\n    this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n    this._lastExecStart = now();\n    if (this.op === 'count') {\n      var preparedQuery = this.getPreparedQuery();\n      var result = await this.collection.storageInstance.count(preparedQuery);\n      if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n        throw newRxError('QU14', {\n          collection: this.collection,\n          queryObj: this.mangoQuery\n        });\n      } else {\n        return result.count;\n      }\n    }\n    if (this.op === 'findByIds') {\n      var ids = ensureNotFalsy(this.mangoQuery.selector)[this.collection.schema.primaryPath].$in;\n      var ret = new Map();\n      var mustBeQueried = [];\n      // first try to fill from docCache\n      ids.forEach(id => {\n        var docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n        if (docData) {\n          if (!docData._deleted) {\n            var doc = this.collection._docCache.getCachedRxDocument(docData);\n            ret.set(id, doc);\n          }\n        } else {\n          mustBeQueried.push(id);\n        }\n      });\n      // everything which was not in docCache must be fetched from the storage\n      if (mustBeQueried.length > 0) {\n        var docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n        docs.forEach(docData => {\n          var doc = this.collection._docCache.getCachedRxDocument(docData);\n          ret.set(doc.primary, doc);\n        });\n      }\n      return ret;\n    }\n    var docsPromise = queryCollection(this);\n    return docsPromise.then(docs => {\n      this._lastExecEnd = now();\n      return docs;\n    });\n  }\n\n  /**\n   * Execute the query\n   * To have an easier implementations,\n   * just subscribe and use the first result\n   */;\n  _proto.exec = function exec(throwIfMissing) {\n    if (throwIfMissing && this.op !== 'findOne') {\n      throw newRxError('QU9', {\n        collection: this.collection.name,\n        query: this.mangoQuery,\n        op: this.op\n      });\n    }\n\n    /**\n     * run _ensureEqual() here,\n     * this will make sure that errors in the query which throw inside of the RxStorage,\n     * will be thrown at this execution context and not in the background.\n     */\n    return _ensureEqual(this).then(() => firstValueFrom(this.$)).then(result => {\n      if (!result && throwIfMissing) {\n        throw newRxError('QU10', {\n          collection: this.collection.name,\n          query: this.mangoQuery,\n          op: this.op\n        });\n      } else {\n        return result;\n      }\n    });\n  }\n\n  /**\n   * cached call to get the queryMatcher\n   * @overwrites itself with the actual value\n   */;\n  /**\n   * returns a string that is used for equal-comparisons\n   * @overwrites itself with the actual value\n   */\n  _proto.toString = function toString() {\n    var stringObj = sortObject({\n      op: this.op,\n      query: this.mangoQuery,\n      other: this.other\n    }, true);\n    var value = JSON.stringify(stringObj);\n    this.toString = () => value;\n    return value;\n  }\n\n  /**\n   * returns the prepared query\n   * which can be send to the storage instance to query for documents.\n   * @overwrites itself with the actual value.\n   */;\n  _proto.getPreparedQuery = function getPreparedQuery() {\n    var hookInput = {\n      rxQuery: this,\n      // can be mutated by the hooks so we have to deep clone first.\n      mangoQuery: normalizeMangoQuery(this.collection.schema.jsonSchema, this.mangoQuery)\n    };\n    hookInput.mangoQuery.selector._deleted = {\n      $eq: false\n    };\n    if (hookInput.mangoQuery.index) {\n      hookInput.mangoQuery.index.unshift('_deleted');\n    }\n    runPluginHooks('prePrepareQuery', hookInput);\n    var value = prepareQuery(this.collection.schema.jsonSchema, hookInput.mangoQuery);\n    this.getPreparedQuery = () => value;\n    return value;\n  }\n\n  /**\n   * returns true if the document matches the query,\n   * does not use the 'skip' and 'limit'\n   */;\n  _proto.doesDocumentDataMatch = function doesDocumentDataMatch(docData) {\n    // if doc is deleted, it cannot match\n    if (docData._deleted) {\n      return false;\n    }\n    return this.queryMatcher(docData);\n  }\n\n  /**\n   * deletes all found documents\n   * @return promise with deleted documents\n   */;\n  _proto.remove = function remove() {\n    return this.exec().then(docs => {\n      if (Array.isArray(docs)) {\n        // TODO use a bulk operation instead of running .remove() on each document\n        return Promise.all(docs.map(doc => doc.remove()));\n      } else {\n        return docs.remove();\n      }\n    });\n  };\n  _proto.incrementalRemove = function incrementalRemove() {\n    return runQueryUpdateFunction(this.asRxQuery, doc => doc.incrementalRemove());\n  }\n\n  /**\n   * helper function to transform RxQueryBase to RxQuery type\n   */;\n  /**\n   * updates all found documents\n   * @overwritten by plugin (optional)\n   */\n  _proto.update = function update(_updateObj) {\n    throw pluginMissing('update');\n  };\n  _proto.patch = function patch(_patch) {\n    return runQueryUpdateFunction(this.asRxQuery, doc => doc.patch(_patch));\n  };\n  _proto.incrementalPatch = function incrementalPatch(patch) {\n    return runQueryUpdateFunction(this.asRxQuery, doc => doc.incrementalPatch(patch));\n  };\n  _proto.modify = function modify(mutationFunction) {\n    return runQueryUpdateFunction(this.asRxQuery, doc => doc.modify(mutationFunction));\n  };\n  _proto.incrementalModify = function incrementalModify(mutationFunction) {\n    return runQueryUpdateFunction(this.asRxQuery, doc => doc.incrementalModify(mutationFunction));\n  }\n\n  // we only set some methods of query-builder here\n  // because the others depend on these ones\n  ;\n  _proto.where = function where(_queryObj) {\n    throw pluginMissing('query-builder');\n  };\n  _proto.sort = function sort(_params) {\n    throw pluginMissing('query-builder');\n  };\n  _proto.skip = function skip(_amount) {\n    throw pluginMissing('query-builder');\n  };\n  _proto.limit = function limit(_amount) {\n    throw pluginMissing('query-builder');\n  };\n  return _createClass(RxQueryBase, [{\n    key: \"$\",\n    get: function () {\n      if (!this._$) {\n        var results$ = this.collection.$.pipe(\n        /**\n         * Performance shortcut.\n         * Changes to local documents are not relevant for the query.\n         */\n        filter(changeEvent => !changeEvent.isLocal),\n        /**\n         * Start once to ensure the querying also starts\n         * when there where no changes.\n         */\n        startWith(null),\n        // ensure query results are up to date.\n        mergeMap(() => _ensureEqual(this)),\n        // use the current result set, written by _ensureEqual().\n        map(() => this._result),\n        // do not run stuff above for each new subscriber, only once.\n        shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n        // do not proceed if result set has not changed.\n        distinctUntilChanged((prev, curr) => {\n          if (prev && prev.time === ensureNotFalsy(curr).time) {\n            return true;\n          } else {\n            return false;\n          }\n        }), filter(result => !!result),\n        /**\n         * Map the result set to a single RxDocument or an array,\n         * depending on query type\n         */\n        map(result => {\n          var useResult = ensureNotFalsy(result);\n          if (this.op === 'count') {\n            return useResult.count;\n          } else if (this.op === 'findOne') {\n            // findOne()-queries emit RxDocument or null\n            return useResult.documents.length === 0 ? null : useResult.documents[0];\n          } else if (this.op === 'findByIds') {\n            return useResult.docsMap;\n          } else {\n            // find()-queries emit RxDocument[]\n            // Flat copy the array so it won't matter if the user modifies it.\n            return useResult.documents.slice(0);\n          }\n        }));\n        this._$ = merge(results$,\n        /**\n         * Also add the refCount$ to the query observable\n         * to allow us to count the amount of subscribers.\n         */\n        this.refCount$.pipe(filter(() => false)));\n      }\n      return this._$;\n    }\n  }, {\n    key: \"$$\",\n    get: function () {\n      var reactivity = this.collection.database.getReactivityFactory();\n      return reactivity.fromObservable(this.$, undefined, this.collection.database);\n    }\n\n    // stores the changeEvent-number of the last handled change-event\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n  }, {\n    key: \"queryMatcher\",\n    get: function () {\n      var schema = this.collection.schema.jsonSchema;\n      var normalizedQuery = normalizeMangoQuery(this.collection.schema.jsonSchema, this.mangoQuery);\n      return overwriteGetterForCaching(this, 'queryMatcher', getQueryMatcher(schema, normalizedQuery));\n    }\n  }, {\n    key: \"asRxQuery\",\n    get: function () {\n      return this;\n    }\n  }]);\n}();\nexport function _getDefaultQuery() {\n  return {\n    selector: {}\n  };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache(rxQuery) {\n  return rxQuery.collection._queryCache.getByQuery(rxQuery);\n}\nexport function createRxQuery(op, queryObj, collection, other) {\n  runPluginHooks('preCreateRxQuery', {\n    op,\n    queryObj,\n    collection,\n    other\n  });\n  var ret = new RxQueryBase(op, queryObj, collection, other);\n\n  // ensure when created with same params, only one is created\n  ret = tunnelQueryCache(ret);\n  triggerCacheReplacement(collection);\n  return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery) {\n  var currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n  if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery) {\n  // Optimisation shortcut\n  if (rxQuery.collection.database.destroyed || _isResultsInSync(rxQuery)) {\n    return PROMISE_RESOLVE_FALSE;\n  }\n  rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue.then(() => __ensureEqual(rxQuery));\n  return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery) {\n  rxQuery._lastEnsureEqual = now();\n\n  /**\n   * Optimisation shortcuts\n   */\n  if (\n  // db is closed\n  rxQuery.collection.database.destroyed ||\n  // nothing happened since last run\n  _isResultsInSync(rxQuery)) {\n    return PROMISE_RESOLVE_FALSE;\n  }\n  var ret = false;\n  var mustReExec = false; // if this becomes true, a whole execution over the database is made\n  if (rxQuery._latestChangeEvent === -1) {\n    // have not executed yet -> must run\n    mustReExec = true;\n  }\n\n  /**\n   * try to use EventReduce to calculate the new results\n   */\n  if (!mustReExec) {\n    var missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n    if (missedChangeEvents === null) {\n      // changeEventBuffer is of bounds -> we must re-execute over the database\n      mustReExec = true;\n    } else {\n      rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n      var runChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.reduceByLastOfDoc(missedChangeEvents);\n      if (rxQuery.op === 'count') {\n        // 'count' query\n        var previousCount = ensureNotFalsy(rxQuery._result).count;\n        var newCount = previousCount;\n        runChangeEvents.forEach(cE => {\n          var didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n          var doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n          if (!didMatchBefore && doesMatchNow) {\n            newCount++;\n          }\n          if (didMatchBefore && !doesMatchNow) {\n            newCount--;\n          }\n        });\n        if (newCount !== previousCount) {\n          ret = true; // true because results changed\n          rxQuery._setResultData(newCount);\n        }\n      } else {\n        // 'find' or 'findOne' query\n        var eventReduceResult = calculateNewResults(rxQuery, runChangeEvents);\n        if (eventReduceResult.runFullQueryAgain) {\n          // could not calculate the new results, execute must be done\n          mustReExec = true;\n        } else if (eventReduceResult.changed) {\n          // we got the new results, we do not have to re-execute, mustReExec stays false\n          ret = true; // true because results changed\n          rxQuery._setResultData(eventReduceResult.newResults);\n        }\n      }\n    }\n  }\n\n  // oh no we have to re-execute the whole query over the database\n  if (mustReExec) {\n    return rxQuery._execOverDatabase().then(newResultData => {\n      /**\n       * The RxStorage is defined to always first emit events and then return\n       * on bulkWrite() calls. So here we have to use the counter AFTER the execOverDatabase()\n       * has been run, not the one from before.\n       */\n      rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.counter;\n\n      // A count query needs a different has-changed check.\n      if (typeof newResultData === 'number') {\n        if (!rxQuery._result || newResultData !== rxQuery._result.count) {\n          ret = true;\n          rxQuery._setResultData(newResultData);\n        }\n        return ret;\n      }\n      if (!rxQuery._result || !areRxDocumentArraysEqual(rxQuery.collection.schema.primaryPath, newResultData, rxQuery._result.docsData)) {\n        ret = true; // true because results changed\n        rxQuery._setResultData(newResultData);\n      }\n      return ret;\n    });\n  }\n  return Promise.resolve(ret); // true if results have changed\n}\n\n/**\n * @returns a format of the query that can be used with the storage\n * when calling RxStorageInstance().query()\n */\nexport function prepareQuery(schema, mutateableQuery) {\n  if (!mutateableQuery.sort) {\n    throw newRxError('SNH', {\n      query: mutateableQuery\n    });\n  }\n\n  /**\n   * Store the query plan together with the\n   * prepared query to save performance.\n   */\n  var queryPlan = getQueryPlan(schema, mutateableQuery);\n  return {\n    query: mutateableQuery,\n    queryPlan\n  };\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection(rxQuery) {\n  var docs = [];\n  var collection = rxQuery.collection;\n\n  /**\n   * Optimizations shortcut.\n   * If query is find-one-document-by-id,\n   * then we do not have to use the slow query() method\n   * but instead can use findDocumentsById()\n   */\n  if (rxQuery.isFindOneByIdQuery) {\n    if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n      var docIds = rxQuery.isFindOneByIdQuery;\n      docIds = docIds.filter(docId => {\n        // first try to fill from docCache\n        var docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n        if (docData) {\n          if (!docData._deleted) {\n            docs.push(docData);\n          }\n          return false;\n        } else {\n          return true;\n        }\n      });\n      // otherwise get from storage\n      if (docIds.length > 0) {\n        var docsFromStorage = await collection.storageInstance.findDocumentsById(docIds, false);\n        appendToArray(docs, docsFromStorage);\n      }\n    } else {\n      var docId = rxQuery.isFindOneByIdQuery;\n\n      // first try to fill from docCache\n      var docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n      if (!docData) {\n        // otherwise get from storage\n        var fromStorageList = await collection.storageInstance.findDocumentsById([docId], false);\n        if (fromStorageList[0]) {\n          docData = fromStorageList[0];\n        }\n      }\n      if (docData && !docData._deleted) {\n        docs.push(docData);\n      }\n    }\n  } else {\n    var preparedQuery = rxQuery.getPreparedQuery();\n    var queryResult = await collection.storageInstance.query(preparedQuery);\n    docs = queryResult.documents;\n  }\n  return docs;\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(primaryPath, query) {\n  // must have exactly one operator which must be $eq || $in\n  if (!query.skip && query.selector && Object.keys(query.selector).length === 1 && query.selector[primaryPath]) {\n    var value = query.selector[primaryPath];\n    if (typeof value === 'string') {\n      return value;\n    } else if (Object.keys(value).length === 1 && typeof value.$eq === 'string') {\n      return value.$eq;\n    }\n\n    // same with $in string arrays\n    if (Object.keys(value).length === 1 && Array.isArray(value.$eq) &&\n    // must only contain strings\n    !value.$eq.find(r => typeof r !== 'string')) {\n      return value.$eq;\n    }\n  }\n  return false;\n}\nexport function isRxQuery(obj) {\n  return obj instanceof RxQueryBase;\n}\n"],
  "mappings": "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",
  "names": ["has", "has", "map", "o", "t", "e", "t", "t", "_isNativeReflectConstruct", "_wrapNativeSuper", "t", "RxError", "toString", "RxTypeError", "fieldName", "operation", "clone", "isObject", "isObject", "merge", "map", "isObject", "ProcessingMode", "OperatorType", "isObject", "Action", "isObject", "isObject", "isObject", "key", "compare", "isObject", "$nin", "$eq", "$gt", "$gte", "$lt", "$lte", "$ne", "isObject", "merge", "$eq", "$gt", "$gte", "$in", "$lt", "$lte", "$ne", "$nin", "$mod", "$regex", "$all", "$elemMatch", "$size", "$exists", "$type", "$eq", "$elemMatch", "$exists", "$gt", "$gte", "$in", "$lt", "$lte", "$ne", "$nin", "$mod", "$regex", "$size", "$type", "QueryCache", "rxQuery", "DocumentCache", "RxQuerySingleResult", "map", "lastOfArray", "isObject", "getProperty", "isStringIndex", "getProperty", "has", "lastOfArray", "simpleBdd", "RxQueryBase", "docs", "toString", "doesMatchNow", "docId", "docData"]
}
